{"version":3,"sources":["../../src/patterns/Not.js"],"names":["Not","constructor","name","parser","value","mark","parse","cursor","reset","tryParser","moveToMark","length","ValueNode","index","ParseError","error","getChar","hasNext","next","clone"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,GAAN,CAAU;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAY,IAAZ;AACD;;AAEDC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,SAAKC,KAAL,CAAWD,MAAX;AACA,WAAO,KAAKE,SAAL,EAAP;AACD;;AAEDD,EAAAA,KAAK,CAACD,MAAD,EAAS;AACZ,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKH,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAY,KAAKE,MAAL,CAAYF,IAAZ,EAAZ;AACD;;AAEDI,EAAAA,SAAS,GAAG;AACV,UAAMJ,IAAI,GAAG,KAAKE,MAAL,CAAYF,IAAZ,EAAb;;AAEA,QAAI;AACF,WAAKF,MAAL,CAAYG,KAAZ,CAAkB,KAAKC,MAAvB;AACA,WAAKA,MAAL,CAAYG,UAAZ,CAAuBL,IAAvB;;AAEA,UAAI,KAAKD,KAAL,CAAWO,MAAX,GAAoB,CAAxB,EAA2B;AACzB,eAAO,IAAIC,kBAAJ,CACL,KAAKV,IADA,EAEL,KAAKE,KAFA,EAGL,KAAKC,IAAL,CAAUQ,KAHL,EAIL,KAAKR,IAAL,CAAUQ,KAAV,GAAkB,KAAKT,KAAL,CAAWO,MAA7B,GAAsC,CAJjC,CAAP;AAMD,OAPD,MAOO;AACL,cAAM,IAAIG,mBAAJ,CACH,uCAAsC,KAAKX,MAAL,CAAYD,IAAK,WADpD,CAAN;AAGD;AACF,KAhBD,CAgBE,OAAOa,KAAP,EAAc;AACd,WAAKX,KAAL,IAAc,KAAKG,MAAL,CAAYS,OAAZ,EAAd;;AAEA,UAAI,KAAKT,MAAL,CAAYU,OAAZ,EAAJ,EAA2B;AACzB,aAAKV,MAAL,CAAYW,IAAZ;AACA,eAAO,KAAKT,SAAL,EAAP;AACD,OAHD,MAGO;AACL,eAAO,IAAIG,kBAAJ,CACL,KAAKV,IADA,EAEL,KAAKE,KAFA,EAGL,KAAKC,IAAL,CAAUQ,KAHL,EAIL,KAAKR,IAAL,CAAUQ,KAAV,GAAkB,KAAKT,KAAL,CAAWO,MAA7B,GAAsC,CAJjC,CAAP;AAMD;AACF;AACF;;AAEDQ,EAAAA,KAAK,GAAG;AACN,WAAO,IAAInB,GAAJ,CAAQ,KAAKE,IAAb,EAAmB,KAAKC,MAAxB,CAAP;AACD;;AAzDsB","sourcesContent":["import ValueNode from \"../ast/ValueNode.js\";\nimport ParseError from \"../ParseError.js\";\n\nexport default class Not {\n  constructor(name, parser) {\n    this.name = name;\n    this.parser = parser;\n    this.value = \"\";\n    this.mark = null;\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    return this.tryParser();\n  }\n\n  reset(cursor) {\n    this.cursor = cursor;\n    this.value = \"\";\n    this.mark = this.cursor.mark();\n  }\n\n  tryParser() {\n    const mark = this.cursor.mark();\n\n    try {\n      this.parser.parse(this.cursor);\n      this.cursor.moveToMark(mark);\n\n      if (this.value.length > 0) {\n        return new ValueNode(\n          this.name,\n          this.value,\n          this.mark.index,\n          this.mark.index + this.value.length - 1\n        );\n      } else {\n        throw new ParseError(\n          `Couldn't find pattern not matching '${this.parser.name}' parser.`\n        );\n      }\n    } catch (error) {\n      this.value += this.cursor.getChar();\n\n      if (this.cursor.hasNext()) {\n        this.cursor.next();\n        return this.tryParser();\n      } else {\n        return new ValueNode(\n          this.name,\n          this.value,\n          this.mark.index,\n          this.mark.index + this.value.length - 1\n        );\n      }\n    }\n  }\n\n  clone() {\n    return new Not(this.name, this.parser);\n  }\n}\n"],"file":"Not.js"}