{"version":3,"sources":["../../../src/patterns/__tests__/Not.js"],"names":["describe","test","expect","cursor","Cursor","toThrow","not","Not","node","parse","moveToBeginning","node2","value","toBe","type","getChar"],"mappings":"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","sourcesContent":["import Not from \"../Not.js\";\nimport Cursor from \"../../Cursor.js\";\n\ndescribe(\"Not\", () => {\n  test(\"Zero characters, should throw.\", () => {\n    expect(() => {\n      const cursor = new Cursor(\"\");\n    }).toThrow();\n  });\n\n  test(\"Parse twice with same parser.\", () => {\n    const cursor = new Cursor(\"1\");\n    const not = new Not(\"not-two\", \"2\");\n    const node = not.parse(cursor);\n\n    cursor.moveToBeginning();\n\n    const node2 = not.parse(cursor);\n\n    expect(node.value).toBe(\"1\");\n    expect(node.type).toBe(\"not-two\");\n    expect(node2.value).toBe(\"1\");\n    expect(node2.type).toBe(\"not-two\");\n  });\n\n  test(\"One character, Exact.\", () => {\n    const cursor = new Cursor(\"1\");\n    const not = new Not(\"not-two\", \"2\");\n    const node = not.parse(cursor);\n\n    expect(node.value).toBe(\"1\");\n    expect(node.type).toBe(\"not-two\");\n  });\n\n  test(\"Two characters, Exact.\", () => {\n    const cursor = new Cursor(\"10\");\n    const not = new Not(\"not-twenty\", \"20\");\n    const node = not.parse(cursor);\n\n    expect(node.value).toBe(\"10\");\n    expect(node.type).toBe(\"not-twenty\");\n  });\n\n  test(\"One character, Within.\", () => {\n    const cursor = new Cursor(\"12\");\n    const not = new Not(\"not-two\", \"2\");\n    const node = not.parse(cursor);\n\n    expect(node.value).toBe(\"1\");\n    expect(node.type).toBe(\"not-two\");\n    expect(cursor.getChar()).toBe(\"2\");\n  });\n\n  test(\"Two characters, Within.\", () => {\n    const cursor = new Cursor(\"1020\");\n    const not = new Not(\"not-twenty\", \"20\");\n    const node = not.parse(cursor);\n\n    expect(node.value).toBe(\"10\");\n    expect(node.type).toBe(\"not-twenty\");\n    expect(cursor.getChar()).toBe(\"2\");\n  });\n\n});\n"],"file":"Not.js"}