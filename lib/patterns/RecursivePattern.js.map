{"version":3,"sources":["../../src/patterns/RecursivePattern.js"],"names":["RecursivePattern","name","_climb","parent","pattern","isMatch","cursor","getPattern","throwError","ParserError","index","clone","parse","getCurrentMark","Pattern"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,gB;;;;;AACnB,4BAAYC,IAAZ,EAAkB;AAAA;;AAAA,yFACVA,IADU;AAEjB;;;;iCAEY;AAAA;;AACX,aAAO,KAAKC,MAAL,CAAY,KAAKC,MAAjB,EAAyB,UAAAC,OAAO,EAAI;AACzC,eAAOA,OAAO,CAACH,IAAR,KAAiB,KAAI,CAACA,IAA7B;AACD,OAFM,CAAP;AAGD;;;2BAEMG,O,EAASC,O,EAAS;AACvB,UAAIA,OAAO,CAACD,OAAD,CAAX,EAAsB;AACpB,eAAOA,OAAP;AACD,OAFD,MAEO;AACL,YAAIA,OAAO,CAACD,MAAR,IAAkB,IAAtB,EAA4B;AAC1B,iBAAO,KAAKD,MAAL,CAAYE,OAAO,CAACD,MAApB,EAA4BE,OAA5B,CAAP;AACD;;AACD,eAAO,IAAP;AACD;AACF;;;0BAEKC,M,EAAQ;AACZ,UAAMF,OAAO,GAAG,KAAKG,UAAL,EAAhB;;AAEA,UAAIH,OAAO,IAAI,IAAf,EAAqB;AACnBE,QAAAA,MAAM,CAACE,UAAP,CACE,IAAIC,mBAAJ,4EACsE,KAAKR,IAD3E,OADF,EAIEK,MAAM,CAACI,KAJT,EAKE,IALF;AAOA,eAAO,IAAP;AACD;;AAED,WAAKN,OAAL,GAAeA,OAAO,CAACO,KAAR,EAAf;AACA,WAAKP,OAAL,CAAaD,MAAb,GAAsB,IAAtB;AAEA,aAAO,KAAKC,OAAL,CAAaQ,KAAb,CAAmBN,MAAnB,CAAP;AACD;;;0BAEKL,I,EAAM;AACV,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,QAAAA,IAAI,GAAG,KAAKA,IAAZ;AACD;;AACD,aAAO,IAAID,gBAAJ,CAAqBC,IAArB,CAAP;AACD;;;qCAEgB;AACf,aAAO,KAAKG,OAAL,CAAaS,cAAb,EAAP;AACD;;;;EAnD2CC,iB","sourcesContent":["import Pattern from \"./Pattern.js\";\nimport ParserError from \"./ParseError.js\";\n\nexport default class RecursivePattern extends Pattern {\n  constructor(name) {\n    super(name);\n  }\n\n  getPattern() {\n    return this._climb(this.parent, pattern => {\n      return pattern.name === this.name;\n    });\n  }\n\n  _climb(pattern, isMatch) {\n    if (isMatch(pattern)) {\n      return pattern;\n    } else {\n      if (pattern.parent != null) {\n        return this._climb(pattern.parent, isMatch);\n      }\n      return null;\n    }\n  }\n\n  parse(cursor) {\n    const pattern = this.getPattern();\n\n    if (pattern == null) {\n      cursor.throwError(\n        new ParserError(\n          `Couldn't find parent pattern to recursively parse, with the name ${this.name}.`\n        ),\n        cursor.index,\n        this\n      );\n      return null;\n    }\n\n    this.pattern = pattern.clone();\n    this.pattern.parent = this;\n\n    return this.pattern.parse(cursor);\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new RecursivePattern(name);\n  }\n\n  getCurrentMark() {\n    return this.pattern.getCurrentMark();\n  }\n}\n"],"file":"RecursivePattern.js"}