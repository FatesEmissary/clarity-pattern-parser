{"version":3,"sources":["../../src/patterns/RecursivePattern.js"],"names":["RecursivePattern","name","_climb","parent","pattern","isMatch","cursor","parseError","getPattern","ParserError","clone","parse","getCurrentMark","Pattern"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,gB;;;;;AACnB,4BAAYC,IAAZ,EAAkB;AAAA;;AAAA,yFACVA,IADU;AAEjB;;;;iCAEY;AAAA;;AACX,aAAO,KAAKC,MAAL,CAAY,KAAKC,MAAjB,EAAyB,UAAAC,OAAO,EAAI;AACzC,eAAOA,OAAO,CAACH,IAAR,KAAiB,KAAI,CAACA,IAA7B;AACD,OAFM,CAAP;AAGD;;;2BAEMG,O,EAASC,O,EAAS;AACvB,UAAIA,OAAO,CAACD,OAAD,CAAX,EAAsB;AACpB,eAAOA,OAAP;AACD,OAFD,MAEO;AACL,YAAIA,OAAO,CAACD,MAAR,IAAkB,IAAtB,EAA4B;AAC1B,iBAAO,KAAKD,MAAL,CAAYE,OAAO,CAACD,MAApB,EAA4BE,OAA5B,CAAP;AACD;;AACD,eAAO,IAAP;AACD;AACF;;;0BAEKC,M,EAAQC,U,EAAY;AACxB,UAAMH,OAAO,GAAG,KAAKI,UAAL,EAAhB;;AAEA,UAAIJ,OAAO,IAAI,IAAf,EAAqB;AACnB,cAAM,IAAIK,mBAAJ,4EACgE,KAAKR,IADrE,OAAN;AAGD;;AACD,WAAKG,OAAL,GAAeA,OAAO,CAACM,KAAR,EAAf;AACA,WAAKN,OAAL,CAAaD,MAAb,GAAsB,IAAtB;AAEA,aAAO,KAAKC,OAAL,CAAaO,KAAb,CAAmBL,MAAnB,EAA2BC,UAA3B,CAAP;AACD;;;0BAEKN,I,EAAM;AACV,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,QAAAA,IAAI,GAAG,KAAKA,IAAZ;AACD;;AACD,aAAO,IAAID,gBAAJ,CAAqBC,IAArB,CAAP;AACD;;;qCAEe;AACd,aAAO,KAAKG,OAAL,CAAaQ,cAAb,EAAP;AACD;;;;EA7C2CC,iB","sourcesContent":["import Pattern from \"./Pattern.js\";\nimport ParserError from \"./ParseError.js\";\n\nexport default class RecursivePattern extends Pattern {\n  constructor(name) {\n    super(name);\n  }\n\n  getPattern() {\n    return this._climb(this.parent, pattern => {\n      return pattern.name === this.name;\n    });\n  }\n\n  _climb(pattern, isMatch) {\n    if (isMatch(pattern)) {\n      return pattern;\n    } else {\n      if (pattern.parent != null) {\n        return this._climb(pattern.parent, isMatch);\n      }\n      return null;\n    }\n  }\n\n  parse(cursor, parseError) {\n    const pattern = this.getPattern();\n\n    if (pattern == null) {\n      throw new ParserError(\n        `Couldn't find parent pattern to recursively parse, with the name ${this.name}.`\n      );\n    }\n    this.pattern = pattern.clone();\n    this.pattern.parent = this;\n\n    return this.pattern.parse(cursor, parseError);\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new RecursivePattern(name);\n  }\n\n  getCurrentMark(){\n    return this.pattern.getCurrentMark();\n  }\n}\n"],"file":"RecursivePattern.js"}