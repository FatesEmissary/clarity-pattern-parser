{"version":3,"sources":["../../src/patterns/Alternation.js"],"names":["CompositeNode","Alternation","constructor","parsers","cursor","index","mark","errors","assertParsers","forEach","parser","parse","Error","length","reset","tryParser","error","push","moveToMark","throwError","furthestError","reduce"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,yBAA1B;;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC/BC,cAAYC,OAAZ,EAAqB;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;;AAEA,SAAKC,aAAL;AACD;;AAEDA,kBAAgB;AACd,SAAKL,OAAL,CAAaM,OAAb,CAAqBC,UAAU;AAC7B,UAAI,OAAOA,OAAOC,KAAd,KAAwB,UAA5B,EAAwC;AACtC,cAAM,IAAIC,KAAJ,CACJ,2DADI,CAAN;AAGD;AACF,KAND;;AAQA,QAAI,KAAKT,OAAL,CAAaU,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,YAAM,IAAID,KAAJ,CACJ,+DADI,CAAN;AAGD;AACF;;AAEDD,QAAMP,MAAN,EAAc;AACZ,SAAKU,KAAL,CAAWV,MAAX;AACA,SAAKW,SAAL;AACD;;AAEDD,QAAMV,MAAN,EAAc;AACZ,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,IAAL,GAAY,KAAKF,MAAL,CAAYE,IAAZ,EAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDQ,cAAY;AACV,UAAML,SAAS,KAAKP,OAAL,CAAa,KAAKE,KAAlB,CAAf;;AAEA,QAAI;AACF,aAAOK,OAAOC,KAAP,CAAaP,MAAb,CAAP;AACD,KAFD,CAEE,OAAOY,KAAP,EAAc;AACd,WAAKT,MAAL,CAAYU,IAAZ,CAAiBD,KAAjB;;AAEA,UAAI,KAAKX,KAAL,GAAa,CAAb,GAAiB,KAAKF,OAAL,CAAaU,MAAlC,EAA0C;AACxC,aAAKR,KAAL;AACA,aAAKD,MAAL,CAAYc,UAAZ,CAAuB,KAAKZ,IAA5B;AACA,eAAO,KAAKS,SAAL,EAAP;AACD;;AAED,WAAKI,UAAL;AACD;AACF;;AAEDA,eAAa;AACX,UAAMC,gBAAgB,KAAKb,MAAL,CAAYc,MAAZ,CAAmB,CAACD,aAAD,EAAgBJ,KAAhB,KAA0B;AACjE,aAAOI,cAAcf,KAAd,GAAsBW,MAAMX,KAA5B,GAAoCe,aAApC,GAAoDJ,KAA3D;AACD,KAFqB,CAAtB;;AAIA,QAAII,iBAAiB,IAArB,EAA2B;AACzB,YAAMA,aAAN;AACD;AACF;AAjE8B","file":"Alternation.js","sourcesContent":["import CompositeNode from \"../ast/CompositeNode.js\";\n\nexport default class Alternation {\n  constructor(parsers) {\n    this.parsers = parsers;\n    this.cursor = null;\n    this.index = 0;\n    this.mark = null;\n    this.errors = [];\n\n    this.assertParsers();\n  }\n\n  assertParsers() {\n    this.parsers.forEach(parser => {\n      if (typeof parser.parse !== \"function\") {\n        throw new Error(\n          \"Invalid Argument: An Alternation can only accept parsers.\"\n        );\n      }\n    });\n\n    if (this.parsers.length < 2) {\n      throw new Error(\n        \"Invalid Arguments: An Alternation needs at least two options.\"\n      );\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryParser();\n  }\n\n  reset(cursor) {\n    this.cursor = cursor;\n    this.index = 0;\n    this.mark = this.cursor.mark();\n    this.errors = [];\n  }\n\n  tryParser() {\n    const parser = this.parsers[this.index];\n\n    try {\n      return parser.parse(cursor);\n    } catch (error) {\n      this.errors.push(error);\n\n      if (this.index + 1 < this.parsers.length) {\n        this.index++;\n        this.cursor.moveToMark(this.mark);\n        return this.tryParser();\n      }\n\n      this.throwError();\n    }\n  }\n\n  throwError() {\n    const furthestError = this.errors.reduce((furthestError, error) => {\n      return furthestError.index > error.index ? furthestError : error;\n    });\n\n    if (furthestError != null) {\n      throw furthestError;\n    }\n  }\n}\n"]}