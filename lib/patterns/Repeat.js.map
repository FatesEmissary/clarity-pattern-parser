{"version":3,"sources":["../../src/patterns/Repeat.js"],"names":["Repeat","constructor","name","parser","options","clone","cursor","nodes","value","assertParser","recoverFromBadOptions","parse","Error","isValue","isOptional","dividerParser","reset","tryParser","createValue","mark","node","ParseError","push","endIndex","lastIndex","tryDividerParser","error","length","moveToMark","every","ValueNode","map","join","startIndex","CompositeNode","children"],"mappings":"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","sourcesContent":["import CompositeNode from \"../ast/CompositeNode.js\";\nimport ParseError from \"../ParseError.js\";\nimport ValueNode from \"../ast/ValueNode.js\";\n\nexport default class Repeat {\n  constructor(name, parser, options) {\n    this.name = name;\n    this.parser = parser.clone();\n    this.options = options;\n    this.cursor = null;\n    this.nodes = [];\n    this.value = null;\n\n    this.assertParser();\n    this.recoverFromBadOptions();\n  }\n\n  assertParser() {\n    if (typeof this.parser.parse !== \"function\") {\n      throw new Error(\n        \"Invalid Argument: A Repetition can only accept a parser.\"\n      );\n    }\n  }\n\n  recoverFromBadOptions() {\n    if (typeof this.options !== \"object\" || this.options == null) {\n      this.options = {};\n      this.options.isValue = false;\n      this.options.isOptional = false;\n      this.options.dividerParser = null;\n    } else {\n      if (typeof this.options.isValue !== \"boolean\") {\n        this.options.isValue = false;\n      }\n\n      if (typeof this.options.isOptional !== \"boolean\") {\n        this.options.isOptional = false;\n      }\n\n      if (\n        this.options.dividerParser != null &&\n        typeof this.options.dividerParser.parse !== \"function\"\n      ) {\n        this.options.dividerParser = null;\n      }\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryParser();\n    this.createValue();\n\n    return this.value;\n  }\n\n  reset(cursor) {\n    this.cursor = cursor;\n    this.nodes = [];\n    this.value = null;\n  }\n\n  tryParser() {\n    const mark = this.cursor.mark();\n\n    try {\n      const node = this.parser.parse(this.cursor);\n\n      if (node == null) {\n        throw new ParseError(\n          `Repeat cannot have an optional parser. It will infinitely retry parsing. Change ${this.parser.name} to not be optional.`\n        );\n      }\n\n      this.nodes.push(node);\n\n      if (node.endIndex !== this.cursor.lastIndex()) {\n        if (this.options.dividerParser != null) {\n          this.tryDividerParser();\n        }\n\n        this.tryParser();\n      }\n    } catch (error) {\n      if (this.nodes.length === 0) {\n        if (this.options.isOptional) {\n          this.value = null;\n        }\n        throw new ParseError(`Expected a ${this.name}.`);\n      }\n\n      this.cursor.moveToMark(mark);\n    }\n  }\n\n  tryDividerParser() {\n    const mark = this.cursor.mark();\n\n    try {\n      const node = this.options.dividerParser.parse(this.cursor);\n      this.nodes.push(node);\n    } catch (error) {\n      this.cursor.moveToMark(mark);\n    }\n  }\n\n  createValue() {\n    if (this.nodes.length === 0) {\n      return;\n    }\n\n    if (\n      this.options.isValue &&\n      this.nodes.every(node => node instanceof ValueNode)\n    ) {\n      this.value = new ValueNode(\n        this.name,\n        this.nodes.map(node => node.value).join(\"\"),\n        this.nodes[0].startIndex,\n        this.nodes[this.nodes.length - 1].endIndex\n      );\n    } else {\n      this.value = new CompositeNode(\n        this.name,\n        this.nodes[0].startIndex,\n        this.nodes[this.nodes.length - 1].endIndex\n      );\n      this.value.children = this.nodes;\n    }\n  }\n\n  clone() {\n    return new Repeat(this.name, this.parser);\n  }\n}\n"],"file":"Repeat.js"}