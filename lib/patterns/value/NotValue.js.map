{"version":3,"sources":["../../../src/patterns/value/NotValue.js"],"names":["NotValue","ValuePattern","constructor","name","pattern","clone","patterns","assertArguments","reset","Error","cursor","mark","match","node","parse","tryPattern","moveToMark","error","getChar","hasNext","next","processMatch","length","ParseError","getName","index","ValueNode","getPatterns","getValue"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,MAAMA,QAAN,SAAuBC,qBAAvB,CAAoC;AACjDC,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACzB;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAO,CAACC,KAAR,EAAf;AACA,SAAKC,QAAL,GAAgB,CAACF,OAAD,CAAhB;AAEA,SAAKG,eAAL;AACA,SAAKC,KAAL;AACD;;AAEDD,EAAAA,eAAe,GAAG;AAChB,QAAI,EAAE,KAAKH,OAAL,YAAwBH,qBAA1B,CAAJ,EAA6C;AAC3C,YAAM,IAAIQ,KAAJ,CACJ,+DADI,CAAN;AAGD;;AAED,QAAI,OAAO,KAAKN,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,YAAM,IAAIM,KAAJ,CAAU,kDAAV,CAAN;AACD;AACF;;AAEDD,EAAAA,KAAK,CAACE,MAAD,EAAS;AACZ,SAAKA,MAAL,GAAc,IAAd;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAY,IAAZ;;AAEA,QAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,IAAL,GAAY,KAAKD,MAAL,CAAYC,IAAZ,EAAZ;AACD;AACF;;AAEDG,EAAAA,KAAK,CAACJ,MAAD,EAAS;AACZ,SAAKF,KAAL,CAAWE,MAAX;AACA,SAAKK,UAAL;AAEA,WAAO,KAAKF,IAAZ;AACD;;AAEDE,EAAAA,UAAU,GAAG;AACX,WAAO,IAAP,EAAa;AACX,YAAMJ,IAAI,GAAG,KAAKD,MAAL,CAAYC,IAAZ,EAAb;;AAEA,UAAI;AACF,aAAKP,OAAL,CAAaU,KAAb,CAAmB,KAAKJ,MAAxB;AACA,aAAKA,MAAL,CAAYM,UAAZ,CAAuBL,IAAvB;AACA;AACD,OAJD,CAIE,OAAOM,KAAP,EAAc;AACd,aAAKP,MAAL,CAAYM,UAAZ,CAAuBL,IAAvB;AACA,aAAKC,KAAL,IAAc,KAAKF,MAAL,CAAYQ,OAAZ,EAAd;;AAEA,YAAI,KAAKR,MAAL,CAAYS,OAAZ,EAAJ,EAA2B;AACzB,eAAKT,MAAL,CAAYU,IAAZ;AACD;;AACD;AACD;AACF;;AAED,SAAKC,YAAL;AACD;;AAEDA,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKT,KAAL,CAAWU,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,YAAM,IAAIC,mBAAJ,CACH,mDAAkD,KAAKnB,OAAL,CAAaoB,OAAb,EAAuB,WADtE,EAEJ,KAAKb,IAAL,CAAUc,KAFN,EAGJ,IAHI,CAAN;AAKD,KAND,MAMO;AACL,WAAKZ,IAAL,GAAY,IAAIa,kBAAJ,CACV,KAAKvB,IADK,EAEV,KAAKS,KAFK,EAGV,KAAKD,IAAL,CAAUc,KAHA,EAIV,KAAKd,IAAL,CAAUc,KAJA,CAAZ;AAMD;AACF;;AAEDD,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKrB,IAAZ;AACD;;AAEDwB,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKrB,QAAZ;AACD;;AAEDsB,EAAAA,QAAQ,GAAG;AACT,WAAO,IAAP;AACD;;AAEDvB,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIL,QAAJ,CAAa,KAAKG,IAAlB,EAAwB,KAAKC,OAA7B,CAAP;AACD;;AA/FgD","sourcesContent":["import ValuePattern from \"./ValuePattern\";\nimport ValueNode from \"../../ast/ValueNode\";\nimport ParseError from \"../ParseError.js\";\n\nexport default class NotValue extends ValuePattern {\n  constructor(name, pattern) {\n    super();\n    this.name = name;\n    this.pattern = pattern.clone();\n    this.patterns = [pattern];\n\n    this.assertArguments();\n    this.reset();\n  }\n\n  assertArguments() {\n    if (!(this.pattern instanceof ValuePattern)) {\n      throw new Error(\n        \"Invalid Arguments: Expected the pattern to be a ValuePattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\"Invalid Arguments: Expected name to be a string.\");\n    }\n  }\n\n  reset(cursor) {\n    this.cursor = null;\n    this.mark = null;\n    this.match = \"\";\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  tryPattern() {\n    while (true) {\n      const mark = this.cursor.mark();\n\n      try {\n        this.pattern.parse(this.cursor);\n        this.cursor.moveToMark(mark);\n        break;\n      } catch (error) {\n        this.cursor.moveToMark(mark);\n        this.match += this.cursor.getChar();\n\n        if (this.cursor.hasNext()) {\n          this.cursor.next();\n        }\n        break;\n      }\n    }\n\n    this.processMatch();\n  }\n\n  processMatch() {\n    if (this.match.length === 0) {\n      throw new ParseError(\n        `Didn't find any characters the didn't match the ${this.pattern.getName()} pattern.`,\n        this.mark.index,\n        this\n      );\n    } else {\n      this.node = new ValueNode(\n        this.name,\n        this.match,\n        this.mark.index,\n        this.mark.index\n      );\n    }\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getPatterns() {\n    return this.patterns;\n  }\n\n  getValue() {\n    return null;\n  }\n\n  clone() {\n    return new NotValue(this.name, this.pattern);\n  }\n}\n"],"file":"NotValue.js"}