{"version":3,"sources":["../../../src/patterns/value/NotValue.js"],"names":["NotValue","name","pattern","clone","patterns","assertArguments","reset","ValuePattern","Error","cursor","mark","match","node","tryPattern","parse","moveToMark","error","getChar","hasNext","next","processMatch","length","ParseError","getName","index","ValueNode"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,Q;;;;;AACnB,oBAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AAAA;;AACzB;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,OAAL,GAAeA,OAAO,CAACC,KAAR,EAAf;AACA,UAAKC,QAAL,GAAgB,CAACF,OAAD,CAAhB;;AAEA,UAAKG,eAAL;;AACA,UAAKC,KAAL;;AAPyB;AAQ1B;;;;sCAEiB;AAChB,UAAI,EAAE,KAAKJ,OAAL,YAAwBK,sBAA1B,CAAJ,EAA6C;AAC3C,cAAM,IAAIC,KAAJ,CACJ,+DADI,CAAN;AAGD;;AAED,UAAI,OAAO,KAAKP,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIO,KAAJ,CAAU,kDAAV,CAAN;AACD;AACF;;;0BAEKC,M,EAAQ;AACZ,WAAKA,MAAL,GAAc,IAAd;AACA,WAAKC,IAAL,GAAY,IAAZ;AACA,WAAKC,KAAL,GAAa,EAAb;AACA,WAAKC,IAAL,GAAY,IAAZ;;AAEA,UAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKC,IAAL,GAAY,KAAKD,MAAL,CAAYC,IAAZ,EAAZ;AACD;AACF;;;0BAEKD,M,EAAQ;AACZ,WAAKH,KAAL,CAAWG,MAAX;AACA,WAAKI,UAAL;AAEA,aAAO,KAAKD,IAAZ;AACD;;;iCAEY;AACX,aAAO,IAAP,EAAa;AACX,YAAMF,IAAI,GAAG,KAAKD,MAAL,CAAYC,IAAZ,EAAb;;AAEA,YAAI;AACF,eAAKR,OAAL,CAAaY,KAAb,CAAmB,KAAKL,MAAxB;AACA,eAAKA,MAAL,CAAYM,UAAZ,CAAuBL,IAAvB;AACA;AACD,SAJD,CAIE,OAAOM,KAAP,EAAc;AACd,eAAKP,MAAL,CAAYM,UAAZ,CAAuBL,IAAvB;AACA,eAAKC,KAAL,IAAc,KAAKF,MAAL,CAAYQ,OAAZ,EAAd;;AAEA,cAAI,KAAKR,MAAL,CAAYS,OAAZ,EAAJ,EAA2B;AACzB,iBAAKT,MAAL,CAAYU,IAAZ;AACD;;AACD;AACD;AACF;;AAED,WAAKC,YAAL;AACD;;;mCAEc;AACb,UAAI,KAAKT,KAAL,CAAWU,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIC,mBAAJ,2DAC+C,KAAKpB,OAAL,CAAaqB,OAAb,EAD/C,gBAEJ,KAAKb,IAAL,CAAUc,KAFN,EAGJ,IAHI,CAAN;AAKD,OAND,MAMO;AACL,aAAKZ,IAAL,GAAY,IAAIa,kBAAJ,CACV,KAAKxB,IADK,EAEV,KAAKU,KAFK,EAGV,KAAKD,IAAL,CAAUc,KAHA,EAIV,KAAKd,IAAL,CAAUc,KAJA,CAAZ;AAMD;AACF;;;8BAES;AACR,aAAO,KAAKvB,IAAZ;AACD;;;kCAEa;AACZ,aAAO,KAAKG,QAAZ;AACD;;;+BAEU;AACT,aAAO,IAAP;AACD;;;4BAEO;AACN,aAAO,IAAIJ,QAAJ,CAAa,KAAKC,IAAlB,EAAwB,KAAKC,OAA7B,CAAP;AACD;;;;EA/FmCK,sB","sourcesContent":["import ValuePattern from \"./ValuePattern\";\nimport ValueNode from \"../../ast/ValueNode\";\nimport ParseError from \"../ParseError.js\";\n\nexport default class NotValue extends ValuePattern {\n  constructor(name, pattern) {\n    super();\n    this.name = name;\n    this.pattern = pattern.clone();\n    this.patterns = [pattern];\n\n    this.assertArguments();\n    this.reset();\n  }\n\n  assertArguments() {\n    if (!(this.pattern instanceof ValuePattern)) {\n      throw new Error(\n        \"Invalid Arguments: Expected the pattern to be a ValuePattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\"Invalid Arguments: Expected name to be a string.\");\n    }\n  }\n\n  reset(cursor) {\n    this.cursor = null;\n    this.mark = null;\n    this.match = \"\";\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  tryPattern() {\n    while (true) {\n      const mark = this.cursor.mark();\n\n      try {\n        this.pattern.parse(this.cursor);\n        this.cursor.moveToMark(mark);\n        break;\n      } catch (error) {\n        this.cursor.moveToMark(mark);\n        this.match += this.cursor.getChar();\n\n        if (this.cursor.hasNext()) {\n          this.cursor.next();\n        }\n        break;\n      }\n    }\n\n    this.processMatch();\n  }\n\n  processMatch() {\n    if (this.match.length === 0) {\n      throw new ParseError(\n        `Didn't find any characters the didn't match the ${this.pattern.getName()} pattern.`,\n        this.mark.index,\n        this\n      );\n    } else {\n      this.node = new ValueNode(\n        this.name,\n        this.match,\n        this.mark.index,\n        this.mark.index\n      );\n    }\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getPatterns() {\n    return this.patterns;\n  }\n\n  getValue() {\n    return null;\n  }\n\n  clone() {\n    return new NotValue(this.name, this.pattern);\n  }\n}\n"],"file":"NotValue.js"}