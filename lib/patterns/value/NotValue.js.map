{"version":3,"sources":["../../../src/patterns/value/NotValue.js"],"names":["NotValue","name","pattern","_assertArguments","_reset","children","ValuePattern","Error","cursor","mark","match","node","_tryPattern","parse","moveToMark","error","getChar","_processMatch","length","ParseError","index","ValueNode","setIndex","endIndex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,Q;;;;;AACnB,oBAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AAAA;;AACzB,kFAAMD,IAAN,EAAY,CAACC,OAAD,CAAZ;;AACA,UAAKC,gBAAL;;AACA,UAAKC,MAAL;;AAHyB;AAI1B;;;;uCAEkB;AACjB,UAAI,EAAE,KAAKC,QAAL,CAAc,CAAd,aAA4BC,sBAA9B,CAAJ,EAAiD;AAC/C,cAAM,IAAIC,KAAJ,CACJ,+DADI,CAAN;AAGD;;AAED,UAAI,OAAO,KAAKN,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIM,KAAJ,CAAU,kDAAV,CAAN;AACD;AACF;;;2BAEMC,M,EAAQ;AACb,WAAKA,MAAL,GAAc,IAAd;AACA,WAAKC,IAAL,GAAY,IAAZ;AACA,WAAKC,KAAL,GAAa,EAAb;AACA,WAAKC,IAAL,GAAY,IAAZ;;AAEA,UAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKC,IAAL,GAAY,KAAKD,MAAL,CAAYC,IAAZ,EAAZ;AACD;AACF;;;0BAEKD,M,EAAQ;AACZ,WAAKJ,MAAL,CAAYI,MAAZ;;AACA,WAAKI,WAAL;;AAEA,aAAO,KAAKD,IAAZ;AACD;;;kCAEa;AACZ,aAAO,IAAP,EAAa;AACX,YAAMF,IAAI,GAAG,KAAKD,MAAL,CAAYC,IAAZ,EAAb;;AAEA,YAAI;AACF,eAAKJ,QAAL,CAAc,CAAd,EAAiBQ,KAAjB,CAAuB,KAAKL,MAA5B;AACA,eAAKA,MAAL,CAAYM,UAAZ,CAAuBL,IAAvB;AACA;AACD,SAJD,CAIE,OAAOM,KAAP,EAAc;AACd,eAAKP,MAAL,CAAYM,UAAZ,CAAuBL,IAAvB;AACA,eAAKC,KAAL,IAAc,KAAKF,MAAL,CAAYQ,OAAZ,EAAd;AACA;AACD;AACF;;AAED,WAAKC,aAAL;AACD;;;oCAEe;AACd,UAAI,KAAKP,KAAL,CAAWQ,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIC,mBAAJ,2DAC+C,KAAKd,QAAL,CAAc,CAAd,EAAiBJ,IADhE,gBAEJ,KAAKQ,IAAL,CAAUW,KAFN,EAGJ,IAHI,CAAN;AAKD,OAND,MAMO;AACL,aAAKT,IAAL,GAAY,IAAIU,kBAAJ,CACV,KAAKpB,IADK,EAEV,KAAKS,KAFK,EAGV,KAAKD,IAAL,CAAUW,KAHA,EAIV,KAAKX,IAAL,CAAUW,KAJA,CAAZ;AAOA,aAAKZ,MAAL,CAAYc,QAAZ,CAAqB,KAAKX,IAAL,CAAUY,QAA/B;AACD;AACF;;;4BAEO;AACN,aAAO,IAAIvB,QAAJ,CAAa,KAAKC,IAAlB,EAAwB,KAAKI,QAAL,CAAc,CAAd,CAAxB,CAAP;AACD;;;;EA7EmCC,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport ParseError from \"../ParseError.js\";\n\nexport default class NotValue extends ValuePattern {\n  constructor(name, pattern) {\n    super(name, [pattern]);\n    this._assertArguments();\n    this._reset();\n  }\n\n  _assertArguments() {\n    if (!(this.children[0] instanceof ValuePattern)) {\n      throw new Error(\n        \"Invalid Arguments: Expected the pattern to be a ValuePattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\"Invalid Arguments: Expected name to be a string.\");\n    }\n  }\n\n  _reset(cursor) {\n    this.cursor = null;\n    this.mark = null;\n    this.match = \"\";\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _tryPattern() {\n    while (true) {\n      const mark = this.cursor.mark();\n\n      try {\n        this.children[0].parse(this.cursor);\n        this.cursor.moveToMark(mark);\n        break;\n      } catch (error) {\n        this.cursor.moveToMark(mark);\n        this.match += this.cursor.getChar();\n        break;\n      }\n    }\n\n    this._processMatch();\n  }\n\n  _processMatch() {\n    if (this.match.length === 0) {\n      throw new ParseError(\n        `Didn't find any characters the didn't match the ${this.children[0].name} pattern.`,\n        this.mark.index,\n        this\n      );\n    } else {\n      this.node = new ValueNode(\n        this.name,\n        this.match,\n        this.mark.index,\n        this.mark.index\n      );\n\n      this.cursor.setIndex(this.node.endIndex);\n    }\n  }\n\n  clone() {\n    return new NotValue(this.name, this.children[0]);\n  }\n}\n"],"file":"NotValue.js"}