{"version":3,"sources":["../../../src/patterns/value/AnyOfThese.js"],"names":["AnyOfThese","name","characters","_assertArguments","Error","length","cursor","parseError","_reset","_assertCursor","_tryPattern","node","Cursor","mark","ParseError","_isMatch","value","getChar","index","getIndex","ValueNode","_processError","indexOf","message","pattern","ValuePattern"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,U;;;;;AACnB,sBAAYC,IAAZ,EAAkBC,UAAlB,EAA8B;AAAA;;AAAA;;AAC5B,oFAAMD,IAAN;AACA,UAAKC,UAAL,GAAkBA,UAAlB;;AAEA,UAAKC,gBAAL;;AAJ4B;AAK7B;;;;uCAEkB;AACjB,UAAI,OAAO,KAAKD,UAAZ,KAA2B,QAA/B,EAAyC;AACvC,cAAM,IAAIE,KAAJ,CACJ,gFADI,CAAN;AAGD;;AAED,UAAI,KAAKF,UAAL,CAAgBG,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,cAAM,IAAID,KAAJ,CACJ,qFADI,CAAN;AAGD;AACF;;;0BAEKE,M,EAAQC,U,EAAY;AACxB,WAAKC,MAAL,CAAYF,MAAZ,EAAoBC,UAApB;;AACA,WAAKE,aAAL;;AACA,WAAKC,WAAL;;AACA,aAAO,KAAKC,IAAZ;AACD;;;oCAEe;AACd,UAAI,EAAE,KAAKL,MAAL,YAAuBM,eAAzB,CAAJ,EAAsC;AACpC,cAAM,IAAIR,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;;2BAEME,M,EAAQC,U,EAAY;AACzB,UAAID,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAc,IAAd;AACA,aAAKO,IAAL,GAAY,IAAZ;AACD,OAHD,MAGO;AACL,aAAKP,MAAL,GAAcA,MAAd;AACA,aAAKO,IAAL,GAAY,KAAKP,MAAL,CAAYO,IAAZ,EAAZ;AACD;;AAED,WAAKF,IAAL,GAAY,IAAZ;AACA,WAAKJ,UAAL,GAAkBA,UAAlB;;AAEA,UAAIA,UAAU,IAAI,IAAlB,EAAuB;AACrB,aAAKA,UAAL,GAAkB,IAAIO,mBAAJ,EAAlB;AACD;AACF;;;kCAEa;AACZ,UAAI,KAAKC,QAAL,EAAJ,EAAqB;AACnB,YAAMC,KAAK,GAAG,KAAKV,MAAL,CAAYW,OAAZ,EAAd;AACA,YAAMC,KAAK,GAAG,KAAKZ,MAAL,CAAYa,QAAZ,EAAd;AAEA,aAAKR,IAAL,GAAY,IAAIS,kBAAJ,CAAc,KAAKnB,IAAnB,EAAyBe,KAAzB,EAAgCE,KAAhC,EAAuCA,KAAvC,CAAZ;AACD,OALD,MAKO;AACL,aAAKG,aAAL;AACD;AACF;;;+BAEU;AACT,aAAO,KAAKnB,UAAL,CAAgBoB,OAAhB,CAAwB,KAAKhB,MAAL,CAAYW,OAAZ,EAAxB,IAAiD,CAAC,CAAzD;AACD;;;oCAEe;AACd,UAAMM,OAAO,4DACX,KAAKrB,UADM,0BAEG,KAAKI,MAAL,CAAYW,OAAZ,EAFH,kCAEgD,KAAKhB,IAFrD,OAAb;AAIA,WAAKM,UAAL,CAAgBgB,OAAhB,GAA0BA,OAA1B;AACA,WAAKhB,UAAL,CAAgBW,KAAhB,GAAwB,KAAKZ,MAAL,CAAYa,QAAZ,EAAxB;AACA,WAAKZ,UAAL,CAAgBiB,OAAhB,GAA0B,IAA1B;AAEA,YAAM,KAAKjB,UAAX;AACD;;;0BAEKN,I,EAAM;AACV,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,QAAAA,IAAI,GAAG,KAAKA,IAAZ;AACD;;AACD,aAAO,IAAID,UAAJ,CAAeC,IAAf,EAAqB,KAAKC,UAA1B,CAAP;AACD;;;qCAEe;AACd,aAAO,KAAKW,IAAZ;AACD;;;;EAxFqCY,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ParseError from \"../ParseError.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport Cursor from \"../../Cursor.js\";\n\nexport default class AnyOfThese extends ValuePattern {\n  constructor(name, characters) {\n    super(name);\n    this.characters = characters;\n\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (typeof this.characters !== \"string\") {\n      throw new Error(\n        \"Invalid Arguments: The characters argument needs to be a string of characters.\"\n      );\n    }\n\n    if (this.characters.length < 1) {\n      throw new Error(\n        \"Invalid Arguments: The characters argument needs to be at least one character long.\"\n      );\n    }\n  }\n\n  parse(cursor, parseError) {\n    this._reset(cursor, parseError);\n    this._assertCursor();\n    this._tryPattern();\n    return this.node;\n  }\n\n  _assertCursor() {\n    if (!(this.cursor instanceof Cursor)) {\n      throw new Error(\"Invalid Arguments: Expected a cursor.\");\n    }\n  }\n\n  _reset(cursor, parseError) {\n    if (cursor == null) {\n      this.cursor = null;\n      this.mark = null;\n    } else {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n\n    this.node = null;\n    this.parseError = parseError;\n\n    if (parseError == null){\n      this.parseError = new ParseError();\n    }\n  }\n\n  _tryPattern() {\n    if (this._isMatch()) {\n      const value = this.cursor.getChar();\n      const index = this.cursor.getIndex();\n\n      this.node = new ValueNode(this.name, value, index, index);\n    } else {\n      this._processError();\n    }\n  }\n\n  _isMatch() {\n    return this.characters.indexOf(this.cursor.getChar()) > -1;\n  }\n\n  _processError() {\n    const message = `ParseError: Expected one of these characters, '${\n      this.characters\n    }' but found '${this.cursor.getChar()}' while parsing for '${this.name}'.`;\n\n    this.parseError.message = message;\n    this.parseError.index = this.cursor.getIndex();\n    this.parseError.pattern = this;\n\n    throw this.parseError;\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new AnyOfThese(name, this.characters);\n  }\n\n  getCurrentMark(){\n    return this.mark;\n  }\n}\n"],"file":"AnyOfThese.js"}