{"version":3,"sources":["../../../src/patterns/value/AnyOfThese.js"],"names":["AnyOfThese","name","characters","_assertArguments","Error","length","cursor","_reset","_tryPattern","node","mark","_isMatch","value","getChar","index","getIndex","ValueNode","addMatch","_processError","indexOf","message","parseError","ParseError","throwError","rootPattern","Pattern","split","ValuePattern"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,U;;;;;AACnB,sBAAYC,IAAZ,EAAkBC,UAAlB,EAA8B;AAAA;;AAAA;;AAC5B,oFAAM,cAAN,EAAsBD,IAAtB;AACA,UAAKC,UAAL,GAAkBA,UAAlB;;AACA,UAAKC,gBAAL;;AAH4B;AAI7B;;;;uCAEkB;AACjB,UAAI,OAAO,KAAKD,UAAZ,KAA2B,QAA/B,EAAyC;AACvC,cAAM,IAAIE,KAAJ,CACJ,gFADI,CAAN;AAGD;;AAED,UAAI,KAAKF,UAAL,CAAgBG,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,cAAM,IAAID,KAAJ,CACJ,qFADI,CAAN;AAGD;AACF;;;0BAEKE,M,EAAQ;AACZ,WAAKC,MAAL,CAAYD,MAAZ;;AACA,WAAKE,WAAL;;AACA,aAAO,KAAKC,IAAZ;AACD;;;2BAEMH,M,EAAQ;AACb,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKI,IAAL,GAAY,KAAKJ,MAAL,CAAYI,IAAZ,EAAZ;AACA,WAAKD,IAAL,GAAY,IAAZ;AACD;;;kCAEa;AACZ,UAAI,KAAKE,QAAL,EAAJ,EAAqB;AACnB,YAAMC,KAAK,GAAG,KAAKN,MAAL,CAAYO,OAAZ,EAAd;AACA,YAAMC,KAAK,GAAG,KAAKR,MAAL,CAAYS,QAAZ,EAAd;AAEA,aAAKN,IAAL,GAAY,IAAIO,kBAAJ,CAAc,cAAd,EAA8B,KAAKf,IAAnC,EAAyCW,KAAzC,EAAgDE,KAAhD,EAAuDA,KAAvD,CAAZ;AAEA,aAAKR,MAAL,CAAYW,QAAZ,CAAqB,IAArB,EAA2B,KAAKR,IAAhC;AACD,OAPD,MAOO;AACL,aAAKS,aAAL;AACD;AACF;;;+BAEU;AACT,aAAO,KAAKhB,UAAL,CAAgBiB,OAAhB,CAAwB,KAAKb,MAAL,CAAYO,OAAZ,EAAxB,IAAiD,CAAC,CAAzD;AACD;;;oCAEe;AACd,UAAMO,OAAO,4DACX,KAAKlB,UADM,0BAEG,KAAKI,MAAL,CAAYO,OAAZ,EAFH,kCAEgD,KAAKZ,IAFrD,OAAb;AAIA,UAAMoB,UAAU,GAAG,IAAIC,mBAAJ,CAAeF,OAAf,EAAwB,KAAKd,MAAL,CAAYS,QAAZ,EAAxB,EAAgD,IAAhD,CAAnB;AACA,WAAKT,MAAL,CAAYiB,UAAZ,CAAuBF,UAAvB;AACD;;;0BAEKpB,I,EAAM;AACV,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,QAAAA,IAAI,GAAG,KAAKA,IAAZ;AACD;;AACD,aAAO,IAAID,UAAJ,CAAeC,IAAf,EAAqB,KAAKC,UAA1B,CAAP;AACD;;;qCAEgBsB,W,EAAa;AAC5B,UAAIA,WAAW,IAAI,IAAf,IAAuB,EAAEA,WAAW,YAAYC,gBAAzB,CAA3B,EAA8D;AAC5DD,QAAAA,WAAW,GAAG,IAAd;AACD;;AAED,aAAO,KAAKtB,UAAL,CAAgBwB,KAAhB,CAAsB,EAAtB,CAAP;AACD;;;;EAxEqCC,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ParseError from \"../ParseError.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport Pattern from \"../Pattern.js\";\n\nexport default class AnyOfThese extends ValuePattern {\n  constructor(name, characters) {\n    super(\"any-of-these\", name);\n    this.characters = characters;\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (typeof this.characters !== \"string\") {\n      throw new Error(\n        \"Invalid Arguments: The characters argument needs to be a string of characters.\"\n      );\n    }\n\n    if (this.characters.length < 1) {\n      throw new Error(\n        \"Invalid Arguments: The characters argument needs to be at least one character long.\"\n      );\n    }\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n    return this.node;\n  }\n\n  _reset(cursor) {\n    this.cursor = cursor;\n    this.mark = this.cursor.mark();\n    this.node = null;\n  }\n\n  _tryPattern() {\n    if (this._isMatch()) {\n      const value = this.cursor.getChar();\n      const index = this.cursor.getIndex();\n\n      this.node = new ValueNode(\"any-of-these\", this.name, value, index, index);\n\n      this.cursor.addMatch(this, this.node);\n    } else {\n      this._processError();\n    }\n  }\n\n  _isMatch() {\n    return this.characters.indexOf(this.cursor.getChar()) > -1;\n  }\n\n  _processError() {\n    const message = `ParseError: Expected one of these characters, '${\n      this.characters\n    }' but found '${this.cursor.getChar()}' while parsing for '${this.name}'.`;\n\n    const parseError = new ParseError(message, this.cursor.getIndex(), this);\n    this.cursor.throwError(parseError);\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new AnyOfThese(name, this.characters);\n  }\n\n  getPossibilities(rootPattern) {\n    if (rootPattern == null || !(rootPattern instanceof Pattern)) {\n      rootPattern = this;\n    }\n\n    return this.characters.split(\"\");\n  }\n}\n"],"file":"AnyOfThese.js"}