{"version":3,"sources":["../../../src/patterns/value/AnyOfThese.js"],"names":["AnyOfThese","name","characters","reset","assertArguments","Error","length","cursor","assertCursor","tryPattern","node","Cursor","mark","isMatch","value","getChar","index","getIndex","ValueNode","incrementCursor","processError","indexOf","message","ParseError","hasNext","next","ValuePattern"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,U;;;;;AACnB,sBAAYC,IAAZ,EAAkBC,UAAlB,EAA8B;AAAA;;AAAA;;AAC5B;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,UAAL,GAAkBA,UAAlB;;AAEA,UAAKC,KAAL;;AACA,UAAKC,eAAL;;AAN4B;AAO7B;;;;sCAEiB;AAChB,UAAI,OAAO,KAAKH,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAII,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,UAAI,OAAO,KAAKH,UAAZ,KAA2B,QAA/B,EAAyC;AACvC,cAAM,IAAIG,KAAJ,CACJ,gFADI,CAAN;AAGD;;AAED,UAAI,KAAKH,UAAL,CAAgBI,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,cAAM,IAAID,KAAJ,CACJ,qFADI,CAAN;AAGD;AACF;;;8BAES;AACR,aAAO,KAAKJ,IAAZ;AACD;;;0BAEKM,M,EAAQ;AACZ,WAAKJ,KAAL,CAAWI,MAAX;AACA,WAAKC,YAAL;AACA,WAAKC,UAAL;AACA,aAAO,KAAKC,IAAZ;AACD;;;mCAEc;AACb,UAAI,EAAE,KAAKH,MAAL,YAAuBI,eAAzB,CAAJ,EAAsC;AACpC,cAAM,IAAIN,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;;0BAEKE,M,EAAQ;AACZ,UAAIA,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAc,IAAd;AACA,aAAKK,IAAL,GAAY,IAAZ;AACD,OAHD,MAGO;AACL,aAAKL,MAAL,GAAcA,MAAd;AACA,aAAKK,IAAL,GAAY,KAAKL,MAAL,CAAYK,IAAZ,EAAZ;AACD;;AAED,WAAKF,IAAL,GAAY,IAAZ;AACD;;;iCAEY;AACX,UAAI,KAAKG,OAAL,EAAJ,EAAoB;AAClB,YAAMC,KAAK,GAAG,KAAKP,MAAL,CAAYQ,OAAZ,EAAd;AACA,YAAMC,KAAK,GAAG,KAAKT,MAAL,CAAYU,QAAZ,EAAd;AAEA,aAAKP,IAAL,GAAY,IAAIQ,kBAAJ,CAAc,KAAKjB,IAAnB,EAAyBa,KAAzB,EAAgCE,KAAhC,EAAuCA,KAAvC,CAAZ;AACA,aAAKG,eAAL;AACD,OAND,MAMO;AACL,aAAKC,YAAL;AACD;AACF;;;8BAES;AACR,aAAO,KAAKlB,UAAL,CAAgBmB,OAAhB,CAAwB,KAAKd,MAAL,CAAYQ,OAAZ,EAAxB,IAAiD,CAAC,CAAzD;AACD;;;mCAEc;AACb,UAAMO,OAAO,4DACX,KAAKpB,UADM,0BAEG,KAAKK,MAAL,CAAYQ,OAAZ,EAFH,kCAEgD,KAAKd,IAFrD,OAAb;AAIA,YAAM,IAAIsB,mBAAJ,CAAeD,OAAf,EAAwB,KAAKf,MAAL,CAAYU,QAAZ,EAAxB,EAAgD,IAAhD,CAAN;AACD;;;sCAEiB;AAChB,UAAI,KAAKV,MAAL,CAAYiB,OAAZ,EAAJ,EAA2B;AACzB,aAAKjB,MAAL,CAAYkB,IAAZ;AACD;AACF;;;4BAEO;AACN,aAAO,IAAIzB,UAAJ,CAAe,KAAKC,IAApB,EAA0B,KAAKC,UAA/B,CAAP;AACD;;;+BAEU;AACT,aAAO,KAAKA,UAAZ;AACD;;;;EA7FqCwB,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ParseError from \"../ParseError.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport Cursor from \"../../Cursor.js\";\n\nexport default class AnyOfThese extends ValuePattern {\n  constructor(name, characters) {\n    super();\n    this.name = name;\n    this.characters = characters;\n\n    this.reset();\n    this.assertArguments();\n  }\n\n  assertArguments() {\n    if (typeof this.name !== \"string\") {\n      throw new Error(\"Invalid Arguments: The name needs to be a string.\");\n    }\n\n    if (typeof this.characters !== \"string\") {\n      throw new Error(\n        \"Invalid Arguments: The characters argument needs to be a string of characters.\"\n      );\n    }\n\n    if (this.characters.length < 1) {\n      throw new Error(\n        \"Invalid Arguments: The characters argument needs to be at least one character long.\"\n      );\n    }\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.assertCursor();\n    this.tryPattern();\n    return this.node;\n  }\n\n  assertCursor() {\n    if (!(this.cursor instanceof Cursor)) {\n      throw new Error(\"Invalid Arguments: Expected a cursor.\");\n    }\n  }\n\n  reset(cursor) {\n    if (cursor == null) {\n      this.cursor = null;\n      this.mark = null;\n    } else {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n\n    this.node = null;\n  }\n\n  tryPattern() {\n    if (this.isMatch()) {\n      const value = this.cursor.getChar();\n      const index = this.cursor.getIndex();\n\n      this.node = new ValueNode(this.name, value, index, index);\n      this.incrementCursor();\n    } else {\n      this.processError();\n    }\n  }\n\n  isMatch() {\n    return this.characters.indexOf(this.cursor.getChar()) > -1;\n  }\n\n  processError() {\n    const message = `ParseError: Expected one of these characters, '${\n      this.characters\n    }' but found '${this.cursor.getChar()}' while parsing for '${this.name}'.`;\n\n    throw new ParseError(message, this.cursor.getIndex(), this);\n  }\n\n  incrementCursor() {\n    if (this.cursor.hasNext()) {\n      this.cursor.next();\n    }\n  }\n\n  clone() {\n    return new AnyOfThese(this.name, this.characters);\n  }\n\n  getValue() {\n    return this.characters;\n  }\n}\n"],"file":"AnyOfThese.js"}