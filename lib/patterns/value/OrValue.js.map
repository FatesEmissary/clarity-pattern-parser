{"version":3,"sources":["../../../src/patterns/value/OrValue.js"],"names":["OrValue","ValuePatterns","constructor","name","patterns","reset","cursor","mark","index","errors","node","parse","assertCursor","tryPattern","Cursor","Error","pattern","ParserError","ValueNode","value","startIndex","endIndex","error","push","length","moveToMark","throwError","reduce","furthestError","nextError","patternStack","clone"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,MAAMA,OAAN,SAAsBC,sBAAtB,CAAoC;AACjDC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC1B,UAAMD,IAAN,EAAYC,QAAZ;AACA,SAAKC,KAAL;AACD;;AAEDA,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,SAAKA,MAAL,GAAc,IAAd;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,IAAZ;;AAEA,QAAIJ,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,IAAL,GAAYD,MAAM,CAACC,IAAP,EAAZ;AACD;AACF;;AAEDI,EAAAA,KAAK,CAACL,MAAD,EAAS;AACZ,SAAKD,KAAL,CAAWC,MAAX;AACA,SAAKM,YAAL;AACA,SAAKC,UAAL;AAEA,WAAO,KAAKH,IAAZ;AACD;;AAEDE,EAAAA,YAAY,GAAG;AACb,QAAI,EAAE,KAAKN,MAAL,YAAuBQ,eAAzB,CAAJ,EAAsC;AACpC,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;AAEDF,EAAAA,UAAU,GAAG;AACX,WAAO,IAAP,EAAa;AACX,YAAMG,OAAO,GAAG,KAAKZ,QAAL,CAAc,KAAKI,KAAnB,CAAhB;;AAEA,UAAI;AACF,cAAME,IAAI,GAAIM,OAAO,CAACL,KAAR,CAAc,KAAKL,MAAnB,CAAd;;AAEA,YAAII,IAAI,IAAI,IAAZ,EAAkB;AAChB,gBAAM,IAAIO,WAAJ,CACJ,iCADI,EAEJ,KAAKV,IAAL,CAAUC,KAFN,EAGJ,IAHI,CAAN;AAKD;;AAED,aAAKE,IAAL,GAAY,IAAIQ,kBAAJ,CAAc,KAAKf,IAAnB,EAAyBO,IAAI,CAACS,KAA9B,EAAqCT,IAAI,CAACU,UAA1C,EAAsDV,IAAI,CAACW,QAA3D,CAAZ;AACA;AACD,OAbD,CAaE,OAAOC,KAAP,EAAc;AACd,aAAKb,MAAL,CAAYc,IAAZ,CAAiBD,KAAjB;;AAEA,YAAI,KAAKd,KAAL,GAAa,CAAb,GAAiB,KAAKJ,QAAL,CAAcoB,MAAnC,EAA2C;AACzC,eAAKhB,KAAL;AACA,eAAKF,MAAL,CAAYmB,UAAZ,CAAuB,KAAKlB,IAA5B;AACD,SAHD,MAGO;AACL,eAAKmB,UAAL;AACD;AACF;AACF;AACF;;AAEDA,EAAAA,UAAU,GAAG;AACX,UAAMJ,KAAK,GAAG,KAAKb,MAAL,CAAYkB,MAAZ,CAAmB,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAC7D,UAAID,aAAa,CAACpB,KAAd,GAAsBqB,SAAS,CAACrB,KAApC,EAA2C;AACzC,eAAOoB,aAAP;AACD,OAFD,MAEO;AACL,eAAOC,SAAP;AACD;AACF,KANa,CAAd;AAQAP,IAAAA,KAAK,CAACQ,YAAN,CAAmBP,IAAnB,CAAwB,IAAxB;AAEA,UAAMD,KAAN;AACD;;AAEDS,EAAAA,KAAK,GAAG;AACN,WAAO,IAAI/B,OAAJ,CAAY,KAAKG,IAAjB,EAAuB,KAAKC,QAA5B,CAAP;AACD;;AA/EgD","sourcesContent":["import ValuePatterns from \"./ValuePatterns.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport Cursor from \"../../Cursor.js\";\n\nexport default class OrValue extends ValuePatterns {\n  constructor(name, patterns) {\n    super(name, patterns);\n    this.reset();\n  }\n\n  reset(cursor) {\n    this.cursor = null;\n    this.mark = null;\n    this.index = 0;\n    this.errors = [];\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.assertCursor();\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  assertCursor() {\n    if (!(this.cursor instanceof Cursor)) {\n      throw new Error(\"Invalid Arguments: Expected a cursor.\");\n    }\n  }\n\n  tryPattern() {\n    while (true) {\n      const pattern = this.patterns[this.index];\n\n      try {\n        const node  = pattern.parse(this.cursor);\n\n        if (node == null) {\n          throw new ParserError(\n            \"Optional pattern did not match.\",\n            this.mark.index,\n            this\n          );\n        }\n\n        this.node = new ValueNode(this.name, node.value, node.startIndex, node.endIndex);\n        break;\n      } catch (error) {\n        this.errors.push(error);\n\n        if (this.index + 1 < this.patterns.length) {\n          this.index++;\n          this.cursor.moveToMark(this.mark);\n        } else {\n          this.throwError();\n        }\n      }\n    }\n  }\n\n  throwError() {\n    const error = this.errors.reduce((furthestError, nextError) => {\n      if (furthestError.index > nextError.index) {\n        return furthestError;\n      } else {\n        return nextError;\n      }\n    });\n\n    error.patternStack.push(this);\n\n    throw error;\n  }\n\n  clone() {\n    return new OrValue(this.name, this.patterns);\n  }\n}\n"],"file":"OrValue.js"}