{"version":3,"sources":["../../../src/patterns/value/OrValue.js"],"names":["OrValue","name","patterns","_assertArguments","_children","length","Error","cursor","mark","index","errors","node","_reset","_assertCursor","_tryPattern","Cursor","pattern","parse","ParserError","ValueNode","value","startIndex","endIndex","error","push","moveToMark","throwError","reduce","furthestError","nextError","stack","ValuePattern"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,O;;;;;AACnB,mBAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;AAAA;;AAAA;;AAC1B,iFAAMD,IAAN,EAAYC,QAAZ;;AACA,UAAKC,gBAAL;;AAF0B;AAG3B;;;;uCAEkB;AACjB,UAAI,KAAKC,SAAL,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,cAAM,IAAIC,KAAJ,CACJ,sEADI,CAAN;AAGD;AACF;;;2BAEMC,M,EAAQ;AACb,WAAKA,MAAL,GAAc,IAAd;AACA,WAAKC,IAAL,GAAY,IAAZ;AACA,WAAKC,KAAL,GAAa,CAAb;AACA,WAAKC,MAAL,GAAc,EAAd;AACA,WAAKC,IAAL,GAAY,IAAZ;;AAEA,UAAIJ,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKC,IAAL,GAAYD,MAAM,CAACC,IAAP,EAAZ;AACD;AACF;;;0BAEKD,M,EAAQ;AACZ,WAAKK,MAAL,CAAYL,MAAZ;;AACA,WAAKM,aAAL;;AACA,WAAKC,WAAL;;AAEA,aAAO,KAAKH,IAAZ;AACD;;;oCAEe;AACd,UAAI,EAAE,KAAKJ,MAAL,YAAuBQ,eAAzB,CAAJ,EAAsC;AACpC,cAAM,IAAIT,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;;kCAEa;AACZ,aAAO,IAAP,EAAa;AACX,YAAMU,OAAO,GAAG,KAAKZ,SAAL,CAAe,KAAKK,KAApB,CAAhB;;AAEA,YAAI;AACF,cAAME,IAAI,GAAGK,OAAO,CAACC,KAAR,CAAc,KAAKV,MAAnB,CAAb;;AAEA,cAAII,IAAI,IAAI,IAAZ,EAAkB;AAChB,kBAAM,IAAIO,WAAJ,CACJ,iCADI,EAEJ,KAAKV,IAAL,CAAUC,KAFN,EAGJ,IAHI,CAAN;AAKD;;AAED,eAAKE,IAAL,GAAY,IAAIQ,kBAAJ,CACV,KAAKlB,IADK,EAEVU,IAAI,CAACS,KAFK,EAGVT,IAAI,CAACU,UAHK,EAIVV,IAAI,CAACW,QAJK,CAAZ;AAMA;AACD,SAlBD,CAkBE,OAAOC,KAAP,EAAc;AACd,eAAKb,MAAL,CAAYc,IAAZ,CAAiBD,KAAjB;;AAEA,cAAI,KAAKd,KAAL,GAAa,CAAb,GAAiB,KAAKL,SAAL,CAAeC,MAApC,EAA4C;AAC1C,iBAAKI,KAAL;AACA,iBAAKF,MAAL,CAAYkB,UAAZ,CAAuB,KAAKjB,IAA5B;AACD,WAHD,MAGO;AACL,iBAAKkB,UAAL;AACD;AACF;AACF;AACF;;;iCAEY;AACX,UAAMH,KAAK,GAAG,KAAKb,MAAL,CAAYiB,MAAZ,CAAmB,UAACC,aAAD,EAAgBC,SAAhB,EAA8B;AAC7D,YAAID,aAAa,CAACnB,KAAd,GAAsBoB,SAAS,CAACpB,KAApC,EAA2C;AACzC,iBAAOmB,aAAP;AACD,SAFD,MAEO;AACL,iBAAOC,SAAP;AACD;AACF,OANa,CAAd;AAQAN,MAAAA,KAAK,CAACO,KAAN,CAAYN,IAAZ,CAAiB,KAAKhB,IAAtB,EAA4B,IAA5B;AAEA,YAAMe,KAAN;AACD;;;4BAEO;AACN,aAAO,IAAIvB,OAAJ,CAAY,KAAKC,IAAjB,EAAuB,KAAKG,SAA5B,CAAP;AACD;;;;EA5FkC2B,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport Cursor from \"../../Cursor.js\";\n\nexport default class OrValue extends ValuePattern {\n  constructor(name, patterns) {\n    super(name, patterns);\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (this._children.length < 2) {\n      throw new Error(\n        \"Invalid Argument: OrValue needs to have more than one value pattern.\"\n      );\n    }\n  }\n\n  _reset(cursor) {\n    this.cursor = null;\n    this.mark = null;\n    this.index = 0;\n    this.errors = [];\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._assertCursor();\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _assertCursor() {\n    if (!(this.cursor instanceof Cursor)) {\n      throw new Error(\"Invalid Arguments: Expected a cursor.\");\n    }\n  }\n\n  _tryPattern() {\n    while (true) {\n      const pattern = this._children[this.index];\n\n      try {\n        const node = pattern.parse(this.cursor);\n\n        if (node == null) {\n          throw new ParserError(\n            \"Optional pattern did not match.\",\n            this.mark.index,\n            this\n          );\n        }\n\n        this.node = new ValueNode(\n          this.name,\n          node.value,\n          node.startIndex,\n          node.endIndex\n        );\n        break;\n      } catch (error) {\n        this.errors.push(error);\n\n        if (this.index + 1 < this._children.length) {\n          this.index++;\n          this.cursor.moveToMark(this.mark);\n        } else {\n          this.throwError();\n        }\n      }\n    }\n  }\n\n  throwError() {\n    const error = this.errors.reduce((furthestError, nextError) => {\n      if (furthestError.index > nextError.index) {\n        return furthestError;\n      } else {\n        return nextError;\n      }\n    });\n\n    error.stack.push(this.mark, this);\n\n    throw error;\n  }\n\n  clone() {\n    return new OrValue(this.name, this._children);\n  }\n}\n"],"file":"OrValue.js"}