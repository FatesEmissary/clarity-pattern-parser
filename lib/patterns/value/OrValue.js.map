{"version":3,"sources":["../../../src/patterns/value/OrValue.js"],"names":["OrValue","name","patterns","_assertArguments","_children","length","Error","hasOptionalChildren","some","pattern","OptionalValue","cursor","index","errors","node","mark","_reset","_tryPattern","parse","parseError","hasUnresolvedError","resolveError","moveToMark","ValueNode","value","startIndex","endIndex","setIndex","ValuePattern"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,O;;;;;AACnB,mBAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;AAAA;;AAAA;;AAC1B,iFAAMD,IAAN,EAAYC,QAAZ;;AACA,UAAKC,gBAAL;;AAF0B;AAG3B;;;;uCAEkB;AACjB,UAAI,KAAKC,SAAL,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,cAAM,IAAIC,KAAJ,CACJ,sEADI,CAAN;AAGD;;AAED,UAAMC,mBAAmB,GAAG,KAAKH,SAAL,CAAeI,IAAf,CAC1B,UAAAC,OAAO;AAAA,eAAIA,OAAO,YAAYC,sBAAvB;AAAA,OADmB,CAA5B;;AAIA,UAAIH,mBAAJ,EAAyB;AACvB,cAAM,IAAID,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;;2BAEMK,M,EAAQ;AACb,WAAKC,KAAL,GAAa,CAAb;AACA,WAAKC,MAAL,GAAc,EAAd;AACA,WAAKC,IAAL,GAAY,IAAZ;AACA,WAAKH,MAAL,GAAcA,MAAd;AACA,WAAKI,IAAL,GAAYJ,MAAM,CAACI,IAAP,EAAZ;AACD;;;0BAEKJ,M,EAAQ;AACZ,WAAKK,MAAL,CAAYL,MAAZ;;AACA,WAAKM,WAAL;;AAEA,aAAO,KAAKH,IAAZ;AACD;;;kCAEa;AACZ,aAAO,IAAP,EAAa;AACX,YAAML,OAAO,GAAG,KAAKL,SAAL,CAAe,KAAKQ,KAApB,CAAhB;AACA,YAAME,IAAI,GAAGL,OAAO,CAACS,KAAR,CAAc,KAAKP,MAAnB,EAA2B,KAAKQ,UAAhC,CAAb;;AAEA,YAAI,KAAKR,MAAL,CAAYS,kBAAZ,EAAJ,EAAsC;AAEpC,cAAI,KAAKR,KAAL,GAAa,CAAb,GAAiB,KAAKR,SAAL,CAAeC,MAApC,EAA4C;AAC1C,iBAAKM,MAAL,CAAYU,YAAZ;AACA,iBAAKT,KAAL;AACA,iBAAKD,MAAL,CAAYW,UAAZ,CAAuB,KAAKP,IAA5B;AACD,WAJD,MAIO;AACL,iBAAKD,IAAL,GAAY,IAAZ;AACA;AACD;AAEF,SAXD,MAWO;AACL,eAAKA,IAAL,GAAY,IAAIS,kBAAJ,CACV,KAAKtB,IADK,EAEVa,IAAI,CAACU,KAFK,EAGVV,IAAI,CAACW,UAHK,EAIVX,IAAI,CAACY,QAJK,CAAZ;AAOA,eAAKf,MAAL,CAAYgB,QAAZ,CAAqB,KAAKb,IAAL,CAAUY,QAA/B;AACA;AACD;AACF;AACF;;;0BAEKzB,I,EAAM;AACV,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,QAAAA,IAAI,GAAG,KAAKA,IAAZ;AACD;;AACD,aAAO,IAAID,OAAJ,CAAYC,IAAZ,EAAkB,KAAKG,SAAvB,CAAP;AACD;;;qCAEgB;AACf,aAAO,KAAKW,IAAZ;AACD;;;;EA5EkCa,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport Cursor from \"../../Cursor.js\";\nimport OptionalValue from \"./OptionalValue.js\";\n\nexport default class OrValue extends ValuePattern {\n  constructor(name, patterns) {\n    super(name, patterns);\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (this._children.length < 2) {\n      throw new Error(\n        \"Invalid Argument: OrValue needs to have more than one value pattern.\"\n      );\n    }\n\n    const hasOptionalChildren = this._children.some(\n      pattern => pattern instanceof OptionalValue\n    );\n\n    if (hasOptionalChildren) {\n      throw new Error(\"OrValues cannot have optional values.\");\n    }\n  }\n\n  _reset(cursor) {\n    this.index = 0;\n    this.errors = [];\n    this.node = null;\n    this.cursor = cursor;\n    this.mark = cursor.mark();\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _tryPattern() {\n    while (true) {\n      const pattern = this._children[this.index];\n      const node = pattern.parse(this.cursor, this.parseError);\n\n      if (this.cursor.hasUnresolvedError()) {\n\n        if (this.index + 1 < this._children.length) {\n          this.cursor.resolveError();\n          this.index++;\n          this.cursor.moveToMark(this.mark);\n        } else {\n          this.node = null;\n          break;\n        }\n\n      } else {\n        this.node = new ValueNode(\n          this.name,\n          node.value,\n          node.startIndex,\n          node.endIndex\n        );\n\n        this.cursor.setIndex(this.node.endIndex);\n        break;\n      }\n    }\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new OrValue(name, this._children);\n  }\n\n  getCurrentMark() {\n    return this.mark;\n  }\n}\n"],"file":"OrValue.js"}