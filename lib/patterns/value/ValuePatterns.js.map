{"version":3,"sources":["../../../src/patterns/value/ValuePatterns.js"],"names":["ValuePatterns","name","patterns","assertArguments","clonePatterns","Array","isArray","Error","areAllPatterns","every","pattern","ValuePattern","length","map","clone"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,a;;;;;AACnB,yBAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;AAAA;;AAAA;;AAC1B;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,QAAL,GAAgBA,QAAhB;;AACA,UAAKC,eAAL;;AACA,UAAKC,aAAL;;AAL0B;AAM3B;;;;sCAEiB;AAChB,UAAI,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKJ,QAAnB,CAAL,EAAmC;AACjC,cAAM,IAAIK,KAAJ,CACJ,gFADI,CAAN;AAGD;;AAED,UAAMC,cAAc,GAAG,KAAKN,QAAL,CAAcO,KAAd,CACrB,UAAAC,OAAO;AAAA,eAAIA,OAAO,YAAYC,sBAAvB;AAAA,OADc,CAAvB;;AAIA,UAAI,CAACH,cAAL,EAAqB;AACnB,cAAM,IAAID,KAAJ,CACJ,wEADI,CAAN;AAGD;;AAED,UAAI,KAAKL,QAAL,CAAcU,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,cAAM,IAAIL,KAAJ,CACJ,sEADI,CAAN;AAGD;;AAED,UAAI,OAAO,KAAKN,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIM,KAAJ,CACJ,iEADI,CAAN;AAGD;AACF;;;oCAEe;AACd;AACA,WAAKL,QAAL,GAAgB,KAAKA,QAAL,CAAcW,GAAd,CAAkB,UAAAH,OAAO;AAAA,eAAIA,OAAO,CAACI,KAAR,EAAJ;AAAA,OAAzB,CAAhB;AACD;;;8BAES;AACR,aAAO,OAAP;AACD;;;8BAES;AACR,aAAO,KAAKb,IAAZ;AACD;;;+BAEU;AACT,aAAO,IAAP;AACD;;;kCAEa;AACZ,aAAO,KAAKC,QAAZ;AACD;;;4BAEM;AACL,YAAM,IAAIK,KAAJ,CAAU,qBAAV,CAAN;AACD;;;;EA9DwCI,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\n\nexport default class ValuePatterns extends ValuePattern {\n  constructor(name, patterns) {\n    super();\n    this.name = name;\n    this.patterns = patterns;\n    this.assertArguments();\n    this.clonePatterns();\n  }\n\n  assertArguments() {\n    if (!Array.isArray(this.patterns)) {\n      throw new Error(\n        \"Invalid Arguments: The patterns argument need to be an array of ValuePatterns.\"\n      );\n    }\n\n    const areAllPatterns = this.patterns.every(\n      pattern => pattern instanceof ValuePattern\n    );\n\n    if (!areAllPatterns) {\n      throw new Error(\n        \"Invalid Argument: All patterns need to be an instance of ValuePattern.\"\n      );\n    }\n\n    if (this.patterns.length < 2) {\n      throw new Error(\n        \"Invalid Argument: OrValue needs to have more than one value pattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\n        \"Invalid Argument: OrValue needs to have a name that's a string.\"\n      );\n    }\n  }\n\n  clonePatterns() {\n    // We need to clone the patterns so nested patterns can be parsed.\n    this.patterns = this.patterns.map(pattern => pattern.clone());\n  }\n  \n  getType() {\n    return \"value\";\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getValue() {\n    return null;\n  }\n\n  getPatterns() {\n    return this.patterns;\n  }\n\n  clone(){\n    throw new Error(\"Not Yet Implemented\");\n  }\n}\n"],"file":"ValuePatterns.js"}