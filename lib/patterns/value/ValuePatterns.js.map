{"version":3,"sources":["../../../src/patterns/value/ValuePatterns.js"],"names":["ValuePatterns","ValuePattern","constructor","name","patterns","assertArguments","clonePatterns","Array","isArray","Error","areAllPatterns","every","pattern","length","map","clone","getType","getName","getValue","getPatterns"],"mappings":";;;;;;;AAAA;;;;AAEe,MAAMA,aAAN,SAA4BC,qBAA5B,CAAyC;AACtDC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC1B;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,eAAL;AACA,SAAKC,aAAL;AACD;;AAEDD,EAAAA,eAAe,GAAG;AAChB,QAAI,CAACE,KAAK,CAACC,OAAN,CAAc,KAAKJ,QAAnB,CAAL,EAAmC;AACjC,YAAM,IAAIK,KAAJ,CACJ,gFADI,CAAN;AAGD;;AAED,UAAMC,cAAc,GAAG,KAAKN,QAAL,CAAcO,KAAd,CACrBC,OAAO,IAAIA,OAAO,YAAYX,qBADT,CAAvB;;AAIA,QAAI,CAACS,cAAL,EAAqB;AACnB,YAAM,IAAID,KAAJ,CACJ,wEADI,CAAN;AAGD;;AAED,QAAI,KAAKL,QAAL,CAAcS,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,YAAM,IAAIJ,KAAJ,CACJ,sEADI,CAAN;AAGD;;AAED,QAAI,OAAO,KAAKN,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,YAAM,IAAIM,KAAJ,CACJ,iEADI,CAAN;AAGD;AACF;;AAEDH,EAAAA,aAAa,GAAG;AACd;AACA,SAAKF,QAAL,GAAgB,KAAKA,QAAL,CAAcU,GAAd,CAAkBF,OAAO,IAAIA,OAAO,CAACG,KAAR,EAA7B,CAAhB;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,OAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKd,IAAZ;AACD;;AAEDe,EAAAA,QAAQ,GAAG;AACT,WAAO,IAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKf,QAAZ;AACD;;AAEDW,EAAAA,KAAK,GAAE;AACL,UAAM,IAAIN,KAAJ,CAAU,qBAAV,CAAN;AACD;;AA9DqD","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\n\nexport default class ValuePatterns extends ValuePattern {\n  constructor(name, patterns) {\n    super();\n    this.name = name;\n    this.patterns = patterns;\n    this.assertArguments();\n    this.clonePatterns();\n  }\n\n  assertArguments() {\n    if (!Array.isArray(this.patterns)) {\n      throw new Error(\n        \"Invalid Arguments: The patterns argument need to be an array of ValuePatterns.\"\n      );\n    }\n\n    const areAllPatterns = this.patterns.every(\n      pattern => pattern instanceof ValuePattern\n    );\n\n    if (!areAllPatterns) {\n      throw new Error(\n        \"Invalid Argument: All patterns need to be an instance of ValuePattern.\"\n      );\n    }\n\n    if (this.patterns.length < 2) {\n      throw new Error(\n        \"Invalid Argument: OrValue needs to have more than one value pattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\n        \"Invalid Argument: OrValue needs to have a name that's a string.\"\n      );\n    }\n  }\n\n  clonePatterns() {\n    // We need to clone the patterns so nested patterns can be parsed.\n    this.patterns = this.patterns.map(pattern => pattern.clone());\n  }\n  \n  getType() {\n    return \"value\";\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getValue() {\n    return null;\n  }\n\n  getPatterns() {\n    return this.patterns;\n  }\n\n  clone(){\n    throw new Error(\"Not Yet Implemented\");\n  }\n}\n"],"file":"ValuePatterns.js"}