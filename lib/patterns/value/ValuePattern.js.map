{"version":3,"sources":["../../../src/patterns/value/ValuePattern.js"],"names":["ValuePattern","name","children","_children","_assertPatternArguments","_cloneChildren","_assignAsParent","Array","isArray","Error","areAllPatterns","every","pattern","map","clone","Object","freeze","forEach","child","parent","Pattern"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,Y;;;;;AACnB,wBAAYC,IAAZ,EAAiC;AAAA;;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AAAA;;AAC/B,sFAAMD,IAAN;AACA,UAAKE,SAAL,GAAiBD,QAAjB;;AACA,UAAKE,uBAAL;;AACA,UAAKC,cAAL;;AACA,UAAKC,eAAL;;AAL+B;AAMhC;;;;8CAEyB;AACxB,UAAI,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKL,SAAnB,CAAL,EAAoC;AAClC,cAAM,IAAIM,KAAJ,CACJ,+EADI,CAAN;AAGD;;AAED,UAAMC,cAAc,GAAG,KAAKP,SAAL,CAAeQ,KAAf,CACrB,UAAAC,OAAO;AAAA,eAAIA,OAAO,YAAYZ,YAAvB;AAAA,OADc,CAAvB;;AAIA,UAAI,CAACU,cAAL,EAAqB;AACnB,cAAM,IAAID,KAAJ,CACJ,wEADI,CAAN;AAGD;;AAED,UAAI,OAAO,KAAKR,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIQ,KAAJ,CACJ,uEADI,CAAN;AAGD;AACF;;;qCAEgB;AACf;AACA,WAAKN,SAAL,GAAiB,KAAKA,SAAL,CAAeU,GAAf,CAAmB,UAAAD,OAAO;AAAA,eAAIA,OAAO,CAACE,KAAR,EAAJ;AAAA,OAA1B,CAAjB,CAFe,CAIf;;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKb,SAAnB;AACD;;;sCAEiB;AAAA;;AAChB,WAAKA,SAAL,CAAec,OAAf,CAAuB,UAAAC,KAAK;AAAA,eAAKA,KAAK,CAACC,MAAN,GAAe,MAApB;AAAA,OAA5B;AACD;;;4BAEO;AACN,YAAM,IAAIV,KAAJ,CAAU,qBAAV,CAAN;AACD;;;;EA/CuCW,iB","sourcesContent":["import Pattern from \"../Pattern.js\";\n\nexport default class ValuePattern extends Pattern {\n  constructor(name, children = []) {\n    super(name);\n    this._children = children;\n    this._assertPatternArguments();\n    this._cloneChildren();\n    this._assignAsParent();\n  }\n\n  _assertPatternArguments() {\n    if (!Array.isArray(this._children)) {\n      throw new Error(\n        \"Invalid Arguments: The patterns argument need to be an array of ValuePattern.\"\n      );\n    }\n\n    const areAllPatterns = this._children.every(\n      pattern => pattern instanceof ValuePattern\n    );\n\n    if (!areAllPatterns) {\n      throw new Error(\n        \"Invalid Argument: All patterns need to be an instance of ValuePattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\n        \"Invalid Argument: ValuePatterns needs to have a name that's a string.\"\n      );\n    }\n  }\n\n  _cloneChildren() {\n    // We need to clone the patterns so nested patterns can be parsed.\n    this._children = this._children.map(pattern => pattern.clone());\n\n    // We need to freeze the childen so they aren't modified.\n    Object.freeze(this._children);\n  }\n\n  _assignAsParent() {\n    this._children.forEach(child => (child.parent = this));\n  }\n\n  clone() {\n    throw new Error(\"Not Yet Implemented\");\n  }\n}\n"],"file":"ValuePattern.js"}