{"version":3,"sources":["../../../src/patterns/value/RegexValue.js"],"names":["RegexValue","name","regex","regexString","RegExp","_assertArguments","Error","length","charAt","cursor","_reset","_tryPattern","node","lastIndex","substring","string","substr","getIndex","result","exec","index","currentIndex","newIndex","ValueNode","addMatch","_processError","message","parseError","ParseError","throwError","getTokenValue","ValuePattern"],"mappings":"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","sourcesContent":["import ParseError from \"../ParseError.js\";\nimport Cursor from \"../../Cursor.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport ValuePattern from \"./ValuePattern.js\";\n\nexport default class RegexValue extends ValuePattern {\n  constructor(name, regex) {\n    super(\"regex-value\", name);\n    this.regexString = regex;\n    this.regex = new RegExp(`^${regex}`, \"g\");\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (typeof this.regexString !== \"string\") {\n      throw new Error(\n        \"Invalid Arguments: The regex argument needs to be a string of regex.\"\n      );\n    }\n\n    if (this.regexString.length < 1) {\n      throw new Error(\n        \"Invalid Arguments: The regex string argument needs to be at least one character long.\"\n      );\n    }\n\n    if (this.regexString.charAt(0) === \"^\") {\n      throw new Error(\n        \"Invalid Arguments: The regex string cannot start with a '^' because it is expected to be in the middle of a string.\"\n      );\n    }\n\n    if (this.regexString.charAt(this.regexString.length - 1) === \"$\") {\n      throw new Error(\n        \"Invalid Arguments: The regex string cannot end with a '$' because it is expected to be in the middle of a string.\"\n      );\n    }\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _reset(cursor) {\n    this.cursor = cursor;\n    this.regex.lastIndex = 0;\n    this.substring = this.cursor.string.substr(this.cursor.getIndex());\n    this.node = null;\n  }\n\n  _tryPattern() {\n    const result = this.regex.exec(this.substring);\n\n    if (result != null && result.index === 0) {\n      const currentIndex = this.cursor.getIndex();\n      const newIndex = currentIndex + result[0].length - 1;\n\n      this.node = new ValueNode(\n        \"regex-value\",\n        this.name,\n        result[0],\n        currentIndex,\n        newIndex\n      );\n\n      this.cursor.index = newIndex;\n      this.cursor.addMatch(this, this.node);\n    } else {\n      this._processError();\n    }\n  }\n\n  _processError() {\n    const message = `ParseError: Expected regex pattern of '${this.regexString}' but found '${this.substring}'.`;\n    const parseError = new ParseError(message, this.cursor.getIndex(), this);\n\n    this.cursor.throwError(parseError);\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new RegexValue(name, this.regexString);\n  }\n\n  getPossibilities() {\n    return [this.getTokenValue()];\n  }\n\n  getTokenValue() {\n    return this.name;\n  }\n\n  getTokens() {\n    return [this.name];\n  }\n}\n"],"file":"RegexValue.js"}