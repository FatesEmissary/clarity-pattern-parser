{"version":3,"sources":["../../../src/patterns/value/RepeatValue.js"],"names":["RepeatValue","ValuePattern","constructor","name","pattern","clone","patterns","assertArguments","reset","Error","OptionalValue","cursor","mark","nodes","parse","tryPattern","node","push","endIndex","lastIndex","processMatch","error","moveToMark","length","ParseError","getName","index","value","map","join","ValueNode","startIndex","getPatterns","getValue"],"mappings":"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","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ValueNode from \"../../ast/ValueNode\";\nimport ParseError from \"../ParseError.js\";\nimport OptionalValue from \"./OptionalValue.js\";\n\nexport default class RepeatValue extends ValuePattern {\n  constructor(name, pattern) {\n    super();\n    this.name = name;\n    this.pattern = pattern.clone();\n    this.patterns = [pattern];\n\n    this.assertArguments();\n    this.reset();\n  }\n\n  assertArguments() {\n    if (!(this.pattern instanceof ValuePattern)) {\n      throw new Error(\n        \"Invalid Arguments: Expected the pattern to be a ValuePattern.\"\n      );\n    }\n\n    if (this.pattern instanceof OptionalValue) {\n      throw new Error(\n        \"Invalid Arguments: The pattern cannot be a optional pattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\"Invalid Arguments: Expected name to be a string.\");\n    }\n  }\n\n  reset(cursor) {\n    this.cursor = null;\n    this.mark = null;\n    this.nodes = [];\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  tryPattern() {\n    while (true) {\n      const mark = this.cursor.mark();\n\n      try {\n        const node = this.pattern.parse(this.cursor);\n        this.nodes.push(node);\n\n        if (node.endIndex === this.cursor.lastIndex()){\n          this.processMatch();\n          break;\n        }\n      } catch (error) {\n        this.processMatch();\n        this.cursor.moveToMark(mark);\n        break;\n      }\n    }\n  }\n\n  processMatch() {\n    if (this.nodes.length === 0) {\n      throw new ParseError(\n        `Did not find a repeating match of ${this.pattern.getName()}.`,\n        this.mark.index,\n        this\n      );\n    } else {\n      const value = this.nodes.map(node => node.value).join(\"\");\n\n      this.node = new ValueNode(\n        this.name,\n        value,\n        this.nodes[0].startIndex,\n        this.nodes[this.nodes.length - 1].endIndex\n      );\n    }\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getPatterns() {\n    return this.patterns;\n  }\n\n  getValue() {\n    return null;\n  }\n\n  clone() {\n    return new RepeatValue(this.name, this.pattern);\n  }\n}\n"],"file":"RepeatValue.js"}