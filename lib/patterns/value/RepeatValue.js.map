{"version":3,"sources":["../../../src/patterns/value/RepeatValue.js"],"names":["RepeatValue","name","pattern","divider","_pattern","children","_divider","_assertArguments","_reset","OptionalValue","Error","cursor","mark","nodes","_tryPattern","node","parse","push","endIndex","lastIndex","_processMatch","next","error","moveToMark","length","ParseError","index","value","map","join","ValueNode","startIndex","setIndex","ValuePattern"],"mappings":"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","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport ParseError from \"../ParseError.js\";\nimport OptionalValue from \"./OptionalValue.js\";\n\nexport default class RepeatValue extends ValuePattern {\n  constructor(name, pattern, divider) {\n    super(name, divider != null ? [pattern, divider] : [pattern]);\n\n    this._pattern = this.children[0];\n    this._divider = this.children[1];\n\n    this._assertArguments();\n    this._reset();\n  }\n\n  _assertArguments() {\n    if (this._pattern instanceof OptionalValue) {\n      throw new Error(\n        \"Invalid Arguments: The pattern cannot be a optional pattern.\"\n      );\n    }\n  }\n\n  _reset(cursor) {\n    this.cursor = null;\n    this.mark = null;\n    this.nodes = [];\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _tryPattern() {\n    while (true) {\n      let mark = this.cursor.mark();\n\n      try {\n        const node = this._pattern.parse(this.cursor);\n        this.nodes.push(node);\n\n        if (node.endIndex === this.cursor.lastIndex()) {\n          this._processMatch();\n          break;\n        }\n\n        mark = this.cursor.mark();\n\n        this.cursor.next();\n\n        if (this._divider != null) {\n          const mark = this.cursor.mark();\n          try {\n            this.nodes.push(this._divider.parse(this.cursor));\n            this.cursor.next();\n          } catch (error) {\n            this.cursor.moveToMark(mark);\n            this._processMatch();\n            break;\n          }\n        }\n      } catch (error) {\n        this._processMatch();\n        break;\n      }\n    }\n  }\n\n  _processMatch() {\n    if (this.nodes.length === 0) {\n      throw new ParseError(\n        `Did not find a repeating match of ${this.name}.`,\n        this.mark.index,\n        this\n      );\n    } else {\n      const value = this.nodes.map(node => node.value).join(\"\");\n\n      this.node = new ValueNode(\n        this.name,\n        value,\n        this.nodes[0].startIndex,\n        this.nodes[this.nodes.length - 1].endIndex\n      );\n\n      this.cursor.setIndex(this.node.endIndex);\n    }\n  }\n\n  clone() {\n    return new RepeatValue(this.name, this._pattern, this._divider);\n  }\n}\n"],"file":"RepeatValue.js"}