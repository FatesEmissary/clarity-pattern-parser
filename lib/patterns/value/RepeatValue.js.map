{"version":3,"sources":["../../../src/patterns/value/RepeatValue.js"],"names":["RepeatValue","name","pattern","clone","patterns","assertArguments","reset","ValuePattern","Error","OptionalValue","cursor","mark","nodes","tryPattern","node","parse","push","endIndex","lastIndex","processMatch","error","moveToMark","length","ParseError","getName","index","value","map","join","ValueNode","startIndex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,W;;;;;AACnB,uBAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AAAA;;AACzB;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,OAAL,GAAeA,OAAO,CAACC,KAAR,EAAf;AACA,UAAKC,QAAL,GAAgB,CAACF,OAAD,CAAhB;;AAEA,UAAKG,eAAL;;AACA,UAAKC,KAAL;;AAPyB;AAQ1B;;;;sCAEiB;AAChB,UAAI,EAAE,KAAKJ,OAAL,YAAwBK,sBAA1B,CAAJ,EAA6C;AAC3C,cAAM,IAAIC,KAAJ,CACJ,+DADI,CAAN;AAGD;;AAED,UAAI,KAAKN,OAAL,YAAwBO,sBAA5B,EAA2C;AACzC,cAAM,IAAID,KAAJ,CACJ,8DADI,CAAN;AAGD;;AAED,UAAI,OAAO,KAAKP,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIO,KAAJ,CAAU,kDAAV,CAAN;AACD;AACF;;;0BAEKE,M,EAAQ;AACZ,WAAKA,MAAL,GAAc,IAAd;AACA,WAAKC,IAAL,GAAY,IAAZ;AACA,WAAKC,KAAL,GAAa,EAAb;;AAEA,UAAIF,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKC,IAAL,GAAY,KAAKD,MAAL,CAAYC,IAAZ,EAAZ;AACD;AACF;;;0BAEKD,M,EAAQ;AACZ,WAAKJ,KAAL,CAAWI,MAAX;AACA,WAAKG,UAAL;AAEA,aAAO,KAAKC,IAAZ;AACD;;;iCAEY;AACX,aAAO,IAAP,EAAa;AACX,YAAMH,IAAI,GAAG,KAAKD,MAAL,CAAYC,IAAZ,EAAb;;AAEA,YAAI;AACF,cAAMG,IAAI,GAAG,KAAKZ,OAAL,CAAaa,KAAb,CAAmB,KAAKL,MAAxB,CAAb;AACA,eAAKE,KAAL,CAAWI,IAAX,CAAgBF,IAAhB;;AAEA,cAAIA,IAAI,CAACG,QAAL,KAAkB,KAAKP,MAAL,CAAYQ,SAAZ,EAAtB,EAA8C;AAC5C,iBAAKC,YAAL;AACA;AACD;AACF,SARD,CAQE,OAAOC,KAAP,EAAc;AACd,eAAKD,YAAL;AACA,eAAKT,MAAL,CAAYW,UAAZ,CAAuBV,IAAvB;AACA;AACD;AACF;AACF;;;mCAEc;AACb,UAAI,KAAKC,KAAL,CAAWU,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIC,mBAAJ,6CACiC,KAAKrB,OAAL,CAAasB,OAAb,EADjC,QAEJ,KAAKb,IAAL,CAAUc,KAFN,EAGJ,IAHI,CAAN;AAKD,OAND,MAMO;AACL,YAAMC,KAAK,GAAG,KAAKd,KAAL,CAAWe,GAAX,CAAe,UAAAb,IAAI;AAAA,iBAAIA,IAAI,CAACY,KAAT;AAAA,SAAnB,EAAmCE,IAAnC,CAAwC,EAAxC,CAAd;AAEA,aAAKd,IAAL,GAAY,IAAIe,kBAAJ,CACV,KAAK5B,IADK,EAEVyB,KAFU,EAGV,KAAKd,KAAL,CAAW,CAAX,EAAckB,UAHJ,EAIV,KAAKlB,KAAL,CAAW,KAAKA,KAAL,CAAWU,MAAX,GAAoB,CAA/B,EAAkCL,QAJxB,CAAZ;AAMD;AACF;;;8BAES;AACR,aAAO,KAAKhB,IAAZ;AACD;;;kCAEa;AACZ,aAAO,KAAKG,QAAZ;AACD;;;+BAEU;AACT,aAAO,IAAP;AACD;;;4BAEO;AACN,aAAO,IAAIJ,WAAJ,CAAgB,KAAKC,IAArB,EAA2B,KAAKC,OAAhC,CAAP;AACD;;;;EApGsCK,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ValueNode from \"../../ast/ValueNode\";\nimport ParseError from \"../ParseError.js\";\nimport OptionalValue from \"./OptionalValue.js\";\n\nexport default class RepeatValue extends ValuePattern {\n  constructor(name, pattern) {\n    super();\n    this.name = name;\n    this.pattern = pattern.clone();\n    this.patterns = [pattern];\n\n    this.assertArguments();\n    this.reset();\n  }\n\n  assertArguments() {\n    if (!(this.pattern instanceof ValuePattern)) {\n      throw new Error(\n        \"Invalid Arguments: Expected the pattern to be a ValuePattern.\"\n      );\n    }\n\n    if (this.pattern instanceof OptionalValue) {\n      throw new Error(\n        \"Invalid Arguments: The pattern cannot be a optional pattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\"Invalid Arguments: Expected name to be a string.\");\n    }\n  }\n\n  reset(cursor) {\n    this.cursor = null;\n    this.mark = null;\n    this.nodes = [];\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  tryPattern() {\n    while (true) {\n      const mark = this.cursor.mark();\n\n      try {\n        const node = this.pattern.parse(this.cursor);\n        this.nodes.push(node);\n\n        if (node.endIndex === this.cursor.lastIndex()){\n          this.processMatch();\n          break;\n        }\n      } catch (error) {\n        this.processMatch();\n        this.cursor.moveToMark(mark);\n        break;\n      }\n    }\n  }\n\n  processMatch() {\n    if (this.nodes.length === 0) {\n      throw new ParseError(\n        `Did not find a repeating match of ${this.pattern.getName()}.`,\n        this.mark.index,\n        this\n      );\n    } else {\n      const value = this.nodes.map(node => node.value).join(\"\");\n\n      this.node = new ValueNode(\n        this.name,\n        value,\n        this.nodes[0].startIndex,\n        this.nodes[this.nodes.length - 1].endIndex\n      );\n    }\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getPatterns() {\n    return this.patterns;\n  }\n\n  getValue() {\n    return null;\n  }\n\n  clone() {\n    return new RepeatValue(this.name, this.pattern);\n  }\n}\n"],"file":"RepeatValue.js"}