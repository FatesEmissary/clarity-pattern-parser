{"version":3,"sources":["../../../src/patterns/value/RepeatValue.js"],"names":["RepeatValue","name","pattern","divider","_pattern","children","_divider","_assertArguments","OptionalValue","Error","cursor","nodes","mark","_reset","_tryPattern","node","parse","hasUnresolvedError","_processMatch","push","endIndex","lastIndex","next","moveToMark","resolveError","length","parseError","ParseError","throwError","value","map","join","ValueNode","startIndex","index","addMatch","dividerPossibilities","getPossibilities","possibility","reduce","acc","concat","ValuePattern"],"mappings":"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","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport ParseError from \"../ParseError.js\";\nimport OptionalValue from \"./OptionalValue.js\";\n\nexport default class RepeatValue extends ValuePattern {\n  constructor(name, pattern, divider) {\n    super(\n      \"repeat-value\",\n      name,\n      divider != null ? [pattern, divider] : [pattern]\n    );\n\n    this._pattern = this.children[0];\n    this._divider = this.children[1];\n\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (this._pattern instanceof OptionalValue) {\n      throw new Error(\n        \"Invalid Arguments: The pattern cannot be a optional pattern.\"\n      );\n    }\n  }\n\n  _reset(cursor) {\n    this.nodes = [];\n    this.cursor = cursor;\n    this.mark = this.cursor.mark();\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _tryPattern() {\n    while (true) {\n      const node = this._pattern.parse(this.cursor);\n\n      if (this.cursor.hasUnresolvedError()) {\n        this._processMatch();\n        break;\n      } else {\n        this.nodes.push(node);\n\n        if (node.endIndex === this.cursor.lastIndex()) {\n          this._processMatch();\n          break;\n        }\n\n        this.cursor.next();\n\n        if (this._divider != null) {\n          const mark = this.cursor.mark();\n          const node = this._divider.parse(this.cursor);\n\n          if (this.cursor.hasUnresolvedError()) {\n            this.cursor.moveToMark(mark);\n            this._processMatch();\n            break;\n          } else {\n            this.nodes.push(node);\n            this.cursor.next();\n          }\n        }\n      }\n    }\n  }\n\n  _processMatch() {\n    this.cursor.resolveError();\n\n    if (this.nodes.length === 0) {\n      const parseError = new ParseError(\n        `Did not find a repeating match of ${this.name}.`,\n        this.mark,\n        this\n      );\n      this.cursor.throwError(parseError);\n      this.node = null;\n    } else {\n      const value = this.nodes.map(node => node.value).join(\"\");\n\n      this.node = new ValueNode(\n        \"repeat-value\",\n        this.name,\n        value,\n        this.nodes[0].startIndex,\n        this.nodes[this.nodes.length - 1].endIndex\n      );\n\n      this.cursor.index = this.node.endIndex;\n      this.cursor.addMatch(this, this.node);\n    }\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new RepeatValue(name, this._pattern, this._divider);\n  }\n\n  getCurrentMark() {\n    return this.mark;\n  }\n\n  getPossibilities() {\n    if (this._divider != null) {\n      const dividerPossibilities = this._divider.getPossibilities();\n\n      return this._pattern\n        .getPossibilities()\n        .map(possibility => {\n          return dividerPossibilities.map(divider => {\n            return `${possibility}${divider}`;\n          });\n        })\n        .reduce((acc, value) => {\n          return acc.concat(value);\n        }, []);\n    } else {\n      return this._pattern.getPossibilities();\n    }\n  }\n}\n"],"file":"RepeatValue.js"}