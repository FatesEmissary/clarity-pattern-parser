{"version":3,"sources":["../../../src/patterns/value/RepeatValue.js"],"names":["RepeatValue","name","pattern","divider","_pattern","children","_divider","_assertArguments","OptionalValue","Error","cursor","nodes","mark","_reset","_tryPattern","node","parse","parseError","hasUnresolvedError","_processMatch","push","endIndex","lastIndex","next","moveToMark","resolveError","length","ParseError","index","throwError","value","map","join","ValueNode","startIndex","setIndex","ValuePattern"],"mappings":"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","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport ParseError from \"../ParseError.js\";\nimport OptionalValue from \"./OptionalValue.js\";\n\nexport default class RepeatValue extends ValuePattern {\n  constructor(name, pattern, divider) {\n    super(name, divider != null ? [pattern, divider] : [pattern]);\n\n    this._pattern = this.children[0];\n    this._divider = this.children[1];\n\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (this._pattern instanceof OptionalValue) {\n      throw new Error(\n        \"Invalid Arguments: The pattern cannot be a optional pattern.\"\n      );\n    }\n  }\n\n  _reset(cursor) {\n    this.nodes = [];\n    this.cursor = cursor;\n    this.mark = this.cursor.mark();\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _tryPattern() {\n    while (true) {\n      let mark = this.cursor.mark();\n\n      const node = this._pattern.parse(this.cursor, this.parseError);\n\n      if (this.cursor.hasUnresolvedError()) {\n        this._processMatch();\n        break;\n      } else {\n        this.nodes.push(node);\n\n        if (node.endIndex === this.cursor.lastIndex()) {\n          this._processMatch();\n          break;\n        }\n\n        mark = this.cursor.mark();\n        this.cursor.next();\n\n        if (this._divider != null) {\n          const mark = this.cursor.mark();\n          const node = this._divider.parse(this.cursor);\n\n          if (this.cursor.hasUnresolvedError()) {\n            this.cursor.moveToMark(mark);\n            this._processMatch();\n            break;\n          } else {\n            this.nodes.push(node);\n            this.cursor.next();\n          }\n        }\n      }\n    }\n  }\n\n  _processMatch() {\n    this.cursor.resolveError();\n    \n    if (this.nodes.length === 0) {\n      const parseError = new ParseError(\n        `Did not find a repeating match of ${this.name}.`,\n        this.mark.index,\n        this\n      );\n      this.cursor.throwError(parseError);\n      this.node = null;\n    } else {\n      const value = this.nodes.map(node => node.value).join(\"\");\n\n      this.node = new ValueNode(\n        this.name,\n        value,\n        this.nodes[0].startIndex,\n        this.nodes[this.nodes.length - 1].endIndex\n      );\n\n      this.cursor.setIndex(this.node.endIndex);\n    }\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new RepeatValue(name, this._pattern, this._divider);\n  }\n\n  getCurrentMark() {\n    return this.mark;\n  }\n}\n"],"file":"RepeatValue.js"}