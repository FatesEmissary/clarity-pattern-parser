{"version":3,"sources":["../../../src/patterns/value/Literal.js"],"names":["Literal","ValuePattern","constructor","name","literalString","literal","reset","assertArguments","Error","length","getName","parse","cursor","assertCursor","tryParse","node","mark","index","match","Cursor","doesCharacterMatch","processCharacterMatch","processError","charAt","getChar","saveMatch","isComplete","ValueNode","getIndex","incrementIndex","hasNext","next","message","ParseError","clone","getValue"],"mappings":"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","sourcesContent":["import ParseError from \"../ParseError.js\";\nimport Cursor from \"../../Cursor.js\";\nimport ValueNode from \"../../ast/ValueNode.js\";\nimport ValuePattern from \"./ValuePattern.js\";\n\nexport default class Literal extends ValuePattern {\n  constructor(name, literalString) {\n    super();\n\n    this.name = name;\n    this.literal = literalString;\n\n    this.reset(null);\n    this.assertArguments();\n  }\n\n  assertArguments() {\n    if (typeof this.name !== \"string\") {\n      throw new Error(\"Invalid Arguments: The name needs to be a string.\");\n    }\n\n    if (typeof this.literal !== \"string\") {\n      throw new Error(\n        \"Invalid Arguments: The literalString argument needs to be a string of characters.\"\n      );\n    }\n\n    if (this.literal.length < 1) {\n      throw new Error(\n        \"Invalid Arguments: The literalString argument needs to be at least one character long.\"\n      );\n    }\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.assertCursor();\n    this.tryParse();\n\n    return this.node;\n  }\n\n  reset(cursor) {\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    } else {\n      this.cursor = null;\n      this.mark = null;\n    }\n\n    this.index = 0;\n    this.match = \"\";\n    this.node = null;\n  }\n\n  assertCursor() {\n    if (!(this.cursor instanceof Cursor)) {\n      throw new Error(\"Invalid Arguments: Expected a cursor.\");\n    }\n  }\n\n  tryParse() {\n    if (this.doesCharacterMatch()) {\n      this.processCharacterMatch();\n    } else {\n      this.processError();\n    }\n  }\n\n  doesCharacterMatch() {\n    return this.literal.charAt(this.index) === this.cursor.getChar();\n  }\n\n  processCharacterMatch() {\n    this.saveMatch();\n\n    if (this.isComplete()) {\n      this.node = new ValueNode(\n        this.name,\n        this.literal,\n        this.mark.index,\n        this.cursor.getIndex()\n      );\n\n      this.incrementIndex();\n    } else {\n      this.incrementIndex();\n      this.tryParse();\n    }\n  }\n\n  saveMatch() {\n    this.match += this.cursor.getChar();\n  }\n\n  isComplete() {\n    return this.match === this.literal;\n  }\n\n  incrementIndex() {\n    if (this.cursor.hasNext()) {\n      this.cursor.next();\n      this.index++;\n    }\n  }\n\n  processError() {\n    const message = `ParseError: Expected '${this.literal.charAt(\n      this.index\n    )}' but found '${this.cursor.getChar()}' while parsing for '${this.name}'.`;\n\n    throw new ParseError(message, this.cursor.getIndex(), this);\n  }\n\n  clone() {\n    return new Literal(this.name, this.literal);\n  }\n\n  getValue() {\n    return this.literal;\n  }\n}\n"],"file":"Literal.js"}