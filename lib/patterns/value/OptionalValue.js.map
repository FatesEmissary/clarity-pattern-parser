{"version":3,"sources":["../../../src/patterns/value/OptionalValue.js"],"names":["OptionalValue","ValuePattern","constructor","pattern","assertArguments","Error","getName","getType","getPatterns","parse","cursor","mark","error","moveToMark","clone"],"mappings":";;;;;;;AAAA;;;;AAEe,MAAMA,aAAN,SAA4BC,qBAA5B,CAAyC;AACtDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,eAAL;AACD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,QAAI,EAAE,KAAKD,OAAL,YAAwBF,qBAA1B,CAAJ,EAA6C;AAC3C,YAAM,IAAII,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKH,OAAL,CAAaG,OAAb,EAAP;AACD;;AAEDC,EAAAA,OAAO,GAAE;AACP,WAAO,KAAKJ,OAAL,CAAaI,OAAb,EAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKL,OAAL,CAAaK,WAAb,EAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,UAAMC,IAAI,GAAGD,MAAM,CAACC,IAAP,EAAb;;AAEA,QAAI;AACF,aAAO,KAAKR,OAAL,CAAaM,KAAb,CAAmBC,MAAnB,CAAP;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AACdF,MAAAA,MAAM,CAACG,UAAP,CAAkBF,IAAlB;AACA,aAAO,IAAP;AACD;AACF;;AAEDG,EAAAA,KAAK,GAAG;AACN,WAAO,IAAId,aAAJ,CAAkB,KAAKG,OAAvB,CAAP;AACD;;AArCqD","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\n\nexport default class OptionalValue extends ValuePattern {\n  constructor(pattern) {\n    this.pattern = pattern;\n    this.assertArguments();\n  }\n\n  assertArguments() {\n    if (!(this.pattern instanceof ValuePattern)) {\n      throw new Error(\"Invalid Arguments: Expected a ValuePattern.\");\n    }\n  }\n\n  getName() {\n    return this.pattern.getName();\n  }\n\n  getType(){\n    return this.pattern.getType();\n  }\n  \n  getPatterns() {\n    return this.pattern.getPatterns();\n  }\n\n  parse(cursor) {\n    const mark = cursor.mark();\n\n    try {\n      return this.pattern.parse(cursor);\n    } catch (error) {\n      cursor.moveToMark(mark);\n      return null;\n    }\n  }\n\n  clone() {\n    return new OptionalValue(this.pattern);\n  }\n}\n"],"file":"OptionalValue.js"}