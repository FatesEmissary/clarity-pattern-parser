{"version":3,"sources":["../../../src/patterns/value/OptionalValue.js"],"names":["OptionalValue","pattern","_assertArguments","children","ValuePattern","Error","cursor","mark","node","parse","hasUnresolvedError","resolveError","moveToMark","addMatch","rootPattern","Pattern","parent","possibilities","getPossibilities","unshift","_children","getTokens"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,a;;;;;AACnB,yBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,uFAAM,gBAAN,EAAwB,gBAAxB,EAA0C,CAACA,OAAD,CAA1C;;AACA,UAAKC,gBAAL;;AAFmB;AAGpB;;;;uCAEkB;AACjB,UAAI,EAAE,KAAKC,QAAL,CAAc,CAAd,aAA4BC,sBAA9B,CAAJ,EAAiD;AAC/C,cAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF;;;0BAEKC,M,EAAQ;AACZ,UAAMC,IAAI,GAAGD,MAAM,CAACC,IAAP,EAAb;AAEA,UAAMC,IAAI,GAAG,KAAKL,QAAL,CAAc,CAAd,EAAiBM,KAAjB,CAAuBH,MAAvB,CAAb;;AAEA,UAAIA,MAAM,CAACI,kBAAP,EAAJ,EAAiC;AAC/BJ,QAAAA,MAAM,CAACK,YAAP;AACAL,QAAAA,MAAM,CAACM,UAAP,CAAkBL,IAAlB;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACLD,QAAAA,MAAM,CAACO,QAAP,CAAgB,IAAhB,EAAsBL,IAAtB;AACA,eAAOA,IAAP;AACD;AACF;;;4BAEO;AACN,aAAO,IAAIR,aAAJ,CAAkB,KAAKG,QAAL,CAAc,CAAd,CAAlB,CAAP;AACD;;;qCAEgBW,W,EAAa;AAC5B,UAAIA,WAAW,IAAI,IAAf,IAAuB,EAAEA,WAAW,YAAYC,gBAAzB,CAA3B,EAA8D;AAC5DD,QAAAA,WAAW,GAAG,IAAd;AACD,OAH2B,CAK5B;;;AACA,UAAI,KAAKE,MAAL,KAAgBF,WAApB,EAAiC;AAC/B,YAAMG,aAAa,GAAG,KAAKd,QAAL,CAAc,CAAd,EAAiBe,gBAAjB,CAAkCJ,WAAlC,CAAtB;AACAG,QAAAA,aAAa,CAACE,OAAd,CAAsB,EAAtB;AAEA,eAAOF,aAAP;AACD,OALD,MAKO;AACL,eAAO,KAAKd,QAAL,CAAc,CAAd,EAAiBe,gBAAjB,CAAkCJ,WAAlC,CAAP;AACD;AACF;;;gCAEW;AACV,aAAO,KAAKM,SAAL,CAAe,CAAf,EAAkBC,SAAlB,EAAP;AACD;;;;EAjDwCjB,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\nimport Pattern from \"../Pattern.js\";\n\nexport default class OptionalValue extends ValuePattern {\n  constructor(pattern) {\n    super(\"optional-value\", \"optional-value\", [pattern]);\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (!(this.children[0] instanceof ValuePattern)) {\n      throw new Error(\"Invalid Arguments: Expected a ValuePattern.\");\n    }\n  }\n\n  parse(cursor) {\n    const mark = cursor.mark();\n\n    const node = this.children[0].parse(cursor);\n\n    if (cursor.hasUnresolvedError()) {\n      cursor.resolveError();\n      cursor.moveToMark(mark);\n      return null;\n    } else {\n      cursor.addMatch(this, node);\n      return node;\n    }\n  }\n\n  clone() {\n    return new OptionalValue(this.children[0]);\n  }\n\n  getPossibilities(rootPattern) {\n    if (rootPattern == null || !(rootPattern instanceof Pattern)) {\n      rootPattern = this;\n    }\n\n    // This is to prevent possibilities explosion.\n    if (this.parent === rootPattern) {\n      const possibilities = this.children[0].getPossibilities(rootPattern);\n      possibilities.unshift(\"\");\n\n      return possibilities;\n    } else {\n      return this.children[0].getPossibilities(rootPattern);\n    }\n  }\n\n  getTokens() {\n    return this._children[0].getTokens();\n  }\n  \n}\n"],"file":"OptionalValue.js"}