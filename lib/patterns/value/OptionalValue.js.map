{"version":3,"sources":["../../../src/patterns/value/OptionalValue.js"],"names":["OptionalValue","pattern","_assertArguments","children","ValuePattern","Error","cursor","mark","node","parse","hasUnresolvedError","resolveError","moveToMark","addMatch"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,a;;;;;AACnB,yBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,uFAAM,gBAAN,EAAwB,gBAAxB,EAA0C,CAACA,OAAD,CAA1C;;AACA,UAAKC,gBAAL;;AAFmB;AAGpB;;;;uCAEkB;AACjB,UAAI,EAAE,KAAKC,QAAL,CAAc,CAAd,aAA4BC,sBAA9B,CAAJ,EAAiD;AAC/C,cAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF;;;0BAEKC,M,EAAQ;AACZ,UAAMC,IAAI,GAAGD,MAAM,CAACC,IAAP,EAAb;AAEA,UAAMC,IAAI,GAAG,KAAKL,QAAL,CAAc,CAAd,EAAiBM,KAAjB,CAAuBH,MAAvB,CAAb;;AAEA,UAAIA,MAAM,CAACI,kBAAP,EAAJ,EAAiC;AAC/BJ,QAAAA,MAAM,CAACK,YAAP;AACAL,QAAAA,MAAM,CAACM,UAAP,CAAkBL,IAAlB;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACLD,QAAAA,MAAM,CAACO,QAAP,CAAgB,IAAhB,EAAsBL,IAAtB;AACA,eAAOA,IAAP;AACD;AACF;;;4BAEO;AACN,aAAO,IAAIR,aAAJ,CAAkB,KAAKG,QAAL,CAAc,CAAd,CAAlB,CAAP;AACD;;;qCAEgB;AACf,aAAO,KAAKI,IAAZ;AACD;;;;EAjCwCH,sB","sourcesContent":["import ValuePattern from \"./ValuePattern.js\";\n\nexport default class OptionalValue extends ValuePattern {\n  constructor(pattern) {\n    super(\"optional-value\", \"optional-value\", [pattern]);\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (!(this.children[0] instanceof ValuePattern)) {\n      throw new Error(\"Invalid Arguments: Expected a ValuePattern.\");\n    }\n  }\n\n  parse(cursor) {\n    const mark = cursor.mark();\n\n    const node = this.children[0].parse(cursor);\n\n    if (cursor.hasUnresolvedError()) {\n      cursor.resolveError();\n      cursor.moveToMark(mark);\n      return null;\n    } else {\n      cursor.addMatch(this, node);\n      return node;\n    }\n  }\n\n  clone() {\n    return new OptionalValue(this.children[0]);\n  }\n\n  getCurrentMark() {\n    return this.mark;\n  }\n}\n"],"file":"OptionalValue.js"}