{"version":3,"sources":["../../src/patterns/Pattern.js"],"names":["Pattern","name","_name","_parent","_children","_assertName","Error","Array","isArray","areAllPatterns","every","pattern","length","forEach","child","parent","value","_assertChildren","_assignAsParent","map","clone","Object","freeze"],"mappings":";;;;;;;;;;;;;IAAqBA,O;;;AACnB,qBAAyB;AAAA,QAAbC,IAAa,uEAAN,IAAM;;AAAA;;AACvB,SAAKC,KAAL,GAAaD,IAAb;AACA,SAAKE,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiB,EAAjB;;AAEA,SAAKC,WAAL;AACD;;;;kCAEa;AACZ,UAAI,OAAO,KAAKJ,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIK,KAAJ,CACJ,kEADI,CAAN;AAGD;AACF;;;4BAEO;AACN,YAAM,IAAIA,KAAJ,CAAU,wBAAV,CAAN;AACD;;;sCA6BiB;AAChB,UAAI,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKJ,SAAnB,CAAL,EAAoC;AAClC,cAAM,IAAIE,KAAJ,CACJ,2EADI,CAAN;AAGD;;AAED,UAAMG,cAAc,GAAG,KAAKL,SAAL,CAAeM,KAAf,CACrB,UAAAC,OAAO;AAAA,eAAIA,OAAO,YAAYX,OAAvB;AAAA,OADc,CAAvB;;AAIA,UAAI,CAACS,cAAL,EAAqB;AACnB,cAAM,IAAIH,KAAJ,CACJ,mEADI,CAAN;AAGD;;AAED,UAAI,KAAKF,SAAL,CAAeQ,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,cAAM,IAAIN,KAAJ,CACJ,iFADI,CAAN;AAGD;AACF;;;sCAEiB;AAAA;;AAChB,WAAKF,SAAL,CAAeS,OAAf,CAAuB,UAAAC,KAAK;AAAA,eAAKA,KAAK,CAACC,MAAN,GAAe,KAApB;AAAA,OAA5B;AACD;;;4BAEO;AACN,YAAM,IAAIT,KAAJ,CAAU,wBAAV,CAAN;AACD;;;wBAzDU;AACT,aAAO,KAAKJ,KAAZ;AACD;;;wBAEY;AACX,aAAO,KAAKC,OAAZ;AACD,K;sBAEUa,K,EAAO;AAChB,UAAIA,KAAK,YAAYhB,OAArB,EAA8B;AAC5B,aAAKG,OAAL,GAAea,KAAf;AACD;AACF;;;wBAEc;AACb,aAAO,KAAKZ,SAAZ;AACD,K;sBAEYY,K,EAAO;AAClB,WAAKZ,SAAL,GAAiBY,KAAjB;;AACA,WAAKC,eAAL;;AACA,WAAKC,eAAL;;AAEA,WAAKd,SAAL,GAAiBY,KAAK,CAACG,GAAN,CAAU,UAAAR,OAAO;AAAA,eAAIA,OAAO,CAACS,KAAR,EAAJ;AAAA,OAAjB,CAAjB;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKlB,SAAnB;AACD","sourcesContent":["export default class Pattern {\n  constructor(name = null) {\n    this._name = name;\n    this._parent = null;\n    this._children = [];\n\n    this._assertName();\n  }\n\n  _assertName() {\n    if (typeof this.name !== \"string\") {\n      throw new Error(\n        \"Invalid Argument: Patterns needs to have a name that's a string.\"\n      );\n    }\n  }\n\n  parse() {\n    throw new Error(\"Method Not Implemented\");\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  set parent(value) {\n    if (value instanceof Pattern) {\n      this._parent = value;\n    }\n  }\n\n  get children() {\n    return this._children;\n  }\n\n  set children(value) {\n    this._children = value;\n    this._assertChildren();\n    this._assignAsParent();\n\n    this._children = value.map(pattern => pattern.clone());\n    Object.freeze(this._children);\n  }\n\n  _assertChildren() {\n    if (!Array.isArray(this._children)) {\n      throw new Error(\n        \"Invalid Arguments: The patterns argument need to be an array of Patterns.\"\n      );\n    }\n\n    const areAllPatterns = this._children.every(\n      pattern => pattern instanceof Pattern\n    );\n\n    if (!areAllPatterns) {\n      throw new Error(\n        \"Invalid Argument: All patterns need to be an instance of Pattern.\"\n      );\n    }\n\n    if (this._children.length < 2) {\n      throw new Error(\n        \"Invalid Argument: Composite Patterns needs to have more than one value pattern.\"\n      );\n    }\n  }\n\n  _assignAsParent() {\n    this._children.forEach(child => (child.parent = this));\n  }\n\n  clone() {\n    throw new Error(\"Method Not Implemented\");\n  }\n}\n"],"file":"Pattern.js"}