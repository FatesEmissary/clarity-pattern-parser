{"version":3,"sources":["../../src/patterns/And.js"],"names":["And","constructor","name","parsers","map","parser","clone","assertParsers","forEach","parse","Error","length","cursor","nodes","x","push","node","CompositeNode","children"],"mappings":";;;;;;;AAAA;;;;AAEe,MAAMA,GAAN,CAAU;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACzB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAO,CAACC,GAAR,CAAYC,MAAM,IAAEA,MAAM,CAACC,KAAP,EAApB,CAAf;AAEA,SAAKC,aAAL;AACD;;AAEDA,EAAAA,aAAa,GAAG;AACd,SAAKJ,OAAL,CAAaK,OAAb,CAAqBH,MAAM,IAAI;AAC7B,UAAI,OAAOA,MAAM,CAACI,KAAd,KAAwB,UAA5B,EAAwC;AACtC,cAAM,IAAIC,KAAJ,CACJ,uDADI,CAAN;AAGD;AACF,KAND;;AAQA,QAAI,KAAKP,OAAL,CAAaQ,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,YAAM,IAAID,KAAJ,CACJ,2DADI,CAAN;AAGD;AACF;;AAEDD,EAAAA,KAAK,CAACG,MAAD,EAAS;AACZ,UAAMC,KAAK,GAAG,EAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,OAAL,CAAaQ,MAAjC,EAAyCG,CAAC,EAA1C,EAA8C;AAC5CD,MAAAA,KAAK,CAACE,IAAN,CAAW,KAAKZ,OAAL,CAAaW,CAAb,EAAgBL,KAAhB,CAAsBG,MAAtB,CAAX;AACD;;AAED,UAAMI,IAAI,GAAG,IAAIC,sBAAJ,CAAkB,KAAKf,IAAvB,CAAb;AACAc,IAAAA,IAAI,CAACE,QAAL,GAAgBL,KAAhB;AACA,WAAOG,IAAP;AACD;;AAEDV,EAAAA,KAAK,GAAE;AACL,WAAO,IAAIN,GAAJ,CAAQE,IAAR,EAAcC,OAAd,CAAP;AACD;;AAtCsB","sourcesContent":["import CompositeNode from \"../ast/CompositeNode.js\";\n\nexport default class And {\n  constructor(name, parsers) {\n    this.name = name;\n    this.parsers = parsers.map(parser=>parser.clone());\n\n    this.assertParsers();\n  }\n\n  assertParsers() {\n    this.parsers.forEach(parser => {\n      if (typeof parser.parse !== \"function\") {\n        throw new Error(\n          \"Invalid Argument: A Sequence can only accept parsers.\"\n        );\n      }\n    });\n\n    if (this.parsers.length < 2) {\n      throw new Error(\n        \"Invalid Arguments: A Sequence needs at least two options.\"\n      );\n    }\n  }\n\n  parse(cursor) {\n    const nodes = [];\n\n    for (let x = 0; x < this.parsers.length; x++) {\n      nodes.push(this.parsers[x].parse(cursor));\n    }\n\n    const node = new CompositeNode(this.name);\n    node.children = nodes;\n    return node;\n  }\n\n  clone(){\n    return new And(name, parsers);\n  }\n}\n"],"file":"And.js"}