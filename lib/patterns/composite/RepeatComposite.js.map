{"version":3,"sources":["../../../src/patterns/composite/RepeatComposite.js"],"names":["RepeatComposite","name","pattern","divider","_pattern","children","_divider","_assertArguments","OptionalComposite","Error","cursor","nodes","mark","_reset","_tryPattern","node","parse","hasUnresolvedError","_processMatch","push","endIndex","lastIndex","next","moveToMark","resolveError","length","throwError","ParseError","index","CompositeNode","startIndex","setIndex","CompositePattern"],"mappings":"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","sourcesContent":["import CompositePattern from \"./CompositePattern.js\";\nimport CompositeNode from \"../../ast/CompositeNode.js\";\nimport ParseError from \"../ParseError.js\";\nimport OptionalComposite from \"./OptionalComposite.js\";\n\nexport default class RepeatComposite extends CompositePattern {\n  constructor(name, pattern, divider) {\n    super(name, divider != null ? [pattern, divider] : [pattern]);\n    this._pattern = this.children[0];\n    this._divider = this.children[1];\n    this._assertArguments();\n  }\n\n  _assertArguments() {\n    if (this._pattern instanceof OptionalComposite) {\n      throw new Error(\n        \"Invalid Arguments: The pattern cannot be a optional pattern.\"\n      );\n    }\n  }\n\n  _reset(cursor) {\n    this.nodes = [];\n    this.cursor = cursor;\n    this.mark = this.cursor.mark();\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _tryPattern() {\n    while (true) {\n      const node = this._pattern.parse(this.cursor);\n\n      if (this.cursor.hasUnresolvedError()) {\n        this._processMatch();\n        break;\n      } else {\n        this.nodes.push(node);\n\n        if (node.endIndex === this.cursor.lastIndex()) {\n          this._processMatch();\n          break;\n        }\n\n        this.cursor.next();\n\n        if (this._divider != null) {\n          const mark = this.cursor.mark();\n          const node = this._divider.parse(this.cursor);\n\n          if (this.cursor.hasUnresolvedError()) {\n            this.cursor.moveToMark(mark);\n            this._processMatch();\n            break;\n          } else {\n            this.nodes.push(node);\n            this.cursor.next();\n          }\n        }\n      }\n    }\n  }\n\n  _processMatch() {\n    this.cursor.resolveError();\n\n    if (this.nodes.length === 0) {\n      this.cursor.throwError(\n        new ParseError(\n          `Did not find a repeating match of ${this.name}.`,\n          this.mark.index,\n          this\n        )\n      );\n      this.node = null;\n    } else {\n      this.node = new CompositeNode(\n        this.name,\n        this.nodes[0].startIndex,\n        this.nodes[this.nodes.length - 1].endIndex\n      );\n\n      this.node.children = this.nodes;\n      this.cursor.setIndex(this.node.endIndex);\n    }\n  }\n\n  clone(name) {\n    if (typeof name !== \"string\") {\n      name = this.name;\n    }\n    return new RepeatComposite(name, this._pattern, this._divider);\n  }\n\n  getCurrentMark() {\n    return this.mark;\n  }\n}\n"],"file":"RepeatComposite.js"}