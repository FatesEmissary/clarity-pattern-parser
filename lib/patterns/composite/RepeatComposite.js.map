{"version":3,"sources":["../../../src/patterns/composite/RepeatComposite.js"],"names":["RepeatComposite","cursor","index","nodes","node","mark","_reset","_tryPattern","push","pattern","parse","error","_processValue","length","ParseError","name","filter","CompositeNode","startIndex","endIndex","children","_children","CompositePattern"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,e;;;;;;;;;;;;;2BACZC,M,EAAQ;AACb,WAAKA,MAAL,GAAc,IAAd;AACA,WAAKC,KAAL,GAAa,CAAb;AACA,WAAKC,KAAL,GAAa,EAAb;AACA,WAAKC,IAAL,GAAY,IAAZ;;AAEA,UAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKI,IAAL,GAAY,KAAKJ,MAAL,CAAYI,IAAZ,EAAZ;AACD;AACF;;;0BAEKJ,M,EAAQ;AACZ,WAAKK,MAAL,CAAYL,MAAZ;;AACA,WAAKM,WAAL;;AAEA,aAAO,KAAKH,IAAZ;AACD;;;kCAEa;AACZ,aAAO,IAAP,EAAa;AACX,YAAI;AACF,eAAKD,KAAL,CAAWK,IAAX,CAAgB,KAAKC,OAAL,CAAaC,KAAb,CAAmB,KAAKT,MAAxB,CAAhB;AACD,SAFD,CAEE,OAAOU,KAAP,EAAc;AACd;AACD;AACF;;AAED,WAAKC,aAAL;AACD;;;oCAEe;AACd,UAAI,KAAKT,KAAL,CAAWU,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIC,UAAJ,6BAAoC,KAAKL,OAAL,CAAaM,IAAjD,gBAAkE,KAAKV,IAAL,CAAUH,KAA5E,EAAmF,IAAnF,CAAN;AACD;;AAED,WAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWa,MAAX,CAAkB,UAAAZ,IAAI;AAAA,eAAIA,IAAI,IAAI,IAAZ;AAAA,OAAtB,CAAb;AACA,WAAKA,IAAL,GAAY,IAAIa,sBAAJ,CACV,KAAKF,IADK,EAEV,KAAKZ,KAAL,CAAW,CAAX,EAAce,UAFJ,EAGV,KAAKf,KAAL,CAAW,KAAKA,KAAL,CAAWU,MAAX,GAAoB,CAA/B,EAAkCM,QAHxB,CAAZ;AAKA,WAAKf,IAAL,CAAUgB,QAAV,GAAqB,KAAKjB,KAA1B;AACD;;;4BAEO;AACN,aAAO,IAAIH,eAAJ,CAAoB,KAAKe,IAAzB,EAA+B,KAAKM,SAApC,CAAP;AACD;;;;EAhD0CC,0B","sourcesContent":["import CompositePattern from \"./CompositePattern.js\";\nimport CompositeNode from \"../../ast/CompositeNode.js\";\nimport OptionalComposite from \"./OptionalComposite.js\";\n\nexport default class RepeatComposite extends CompositePattern {\n  _reset(cursor) {\n    this.cursor = null;\n    this.index = 0;\n    this.nodes = [];\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _tryPattern() {\n    while (true) {\n      try {\n        this.nodes.push(this.pattern.parse(this.cursor));\n      } catch (error) {\n        break;\n      }\n    }\n\n    this._processValue();\n  }\n\n  _processValue() {\n    if (this.nodes.length === 0) {\n      throw new ParseError(`Couldn't find the ${this.pattern.name} pattern.`, this.mark.index, this);\n    }\n\n    this.nodes = this.nodes.filter(node => node != null);\n    this.node = new CompositeNode(\n      this.name,\n      this.nodes[0].startIndex,\n      this.nodes[this.nodes.length - 1].endIndex\n    );\n    this.node.children = this.nodes;\n  }\n\n  clone() {\n    return new RepeatComposite(this.name, this._children);\n  }\n}\n"],"file":"RepeatComposite.js"}