{"version":3,"sources":["../../../src/patterns/composite/RepeatComposite.js"],"names":["RepeatComposite","CompositePattern","constructor","name","pattern","patterns","assertArguments","reset","Pattern","Error","OptionalComposite","cursor","index","nodes","node","mark","parse","tryPattern","push","error","processValue","length","ParseError","getName","filter","CompositeNode","startIndex","endIndex","children","getPatterns","clone"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,MAAMA,eAAN,SAA8BC,yBAA9B,CAA+C;AAC5DC,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACzB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgB,CAACD,OAAD,CAAhB;AAEA,SAAKE,eAAL;AACA,SAAKC,KAAL;AACD;;AAEDD,EAAAA,eAAe,GAAG;AAChB,QAAI,EAAE,KAAKF,OAAL,YAAwBI,OAA1B,CAAJ,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CACJ,mEADI,CAAN;AAGD;;AAED,QAAI,KAAKL,OAAL,YAAwBM,0BAA5B,EAA+C;AAC7C,YAAM,IAAID,KAAJ,CACJ,6EADI,CAAN;AAGD;;AAED,QAAI,OAAO,KAAKN,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,YAAM,IAAIM,KAAJ,CACJ,yEADI,CAAN;AAGD;AACF;;AAEDF,EAAAA,KAAK,CAACI,MAAD,EAAS;AACZ,SAAKA,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAY,IAAZ;;AAEA,QAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKI,IAAL,GAAY,KAAKJ,MAAL,CAAYI,IAAZ,EAAZ;AACD;AACF;;AAEDC,EAAAA,KAAK,CAACL,MAAD,EAAS;AACZ,SAAKJ,KAAL,CAAWI,MAAX;AACA,SAAKM,UAAL;AAEA,WAAO,KAAKH,IAAZ;AACD;;AAEDG,EAAAA,UAAU,GAAG;AACX,WAAO,IAAP,EAAa;AACX,UAAI;AACF,aAAKJ,KAAL,CAAWK,IAAX,CAAgB,KAAKd,OAAL,CAAaY,KAAb,CAAmB,KAAKL,MAAxB,CAAhB;AACD,OAFD,CAEE,OAAOQ,KAAP,EAAc;AACd;AACD;AACF;;AAED,SAAKC,YAAL;AACD;;AAEDA,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKP,KAAL,CAAWQ,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,YAAM,IAAIC,UAAJ,CAAgB,qBAAoB,KAAKlB,OAAL,CAAamB,OAAb,EAAuB,WAA3D,EAAuE,KAAKR,IAAL,CAAUH,KAAjF,EAAwF,IAAxF,CAAN;AACD;;AAED,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWW,MAAX,CAAkBV,IAAI,IAAIA,IAAI,IAAI,IAAlC,CAAb;AACA,SAAKA,IAAL,GAAY,IAAIW,sBAAJ,CACV,KAAKtB,IADK,EAEV,KAAKU,KAAL,CAAW,CAAX,EAAca,UAFJ,EAGV,KAAKb,KAAL,CAAW,KAAKA,KAAL,CAAWQ,MAAX,GAAoB,CAA/B,EAAkCM,QAHxB,CAAZ;AAKA,SAAKb,IAAL,CAAUc,QAAV,GAAqB,KAAKf,KAA1B;AACD;;AAEDgB,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKxB,QAAZ;AACD;;AAEDyB,EAAAA,KAAK,GAAG;AACN,WAAO,IAAI9B,eAAJ,CAAoB,KAAKG,IAAzB,EAA+B,KAAKE,QAApC,CAAP;AACD;;AAjF2D","sourcesContent":["import CompositePattern from \"./CompositePattern.js\";\nimport CompositeNode from \"../../ast/CompositeNode.js\";\nimport OptionalComposite from \"./OptionalComposite.js\";\n\nexport default class RepeatComposite extends CompositePattern {\n  constructor(name, pattern) {\n    this.name = name;\n    this.pattern = pattern;\n    this.patterns = [pattern];\n    \n    this.assertArguments();\n    this.reset();\n  }\n\n  assertArguments() {\n    if (!(this.pattern instanceof Pattern)) {\n      throw new Error(\n        \"Invalid Argument: The pattern needs to be an instance of Pattern.\"\n      );\n    }\n\n    if (this.pattern instanceof OptionalComposite) {\n      throw new Error(\n        \"Invalid Argument: Cannot use an OptionalComposite within a RepeatComposite.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\n        \"Invalid Argument: RepeatComposite needs to have a name that's a string.\"\n      );\n    }\n  }\n\n  reset(cursor) {\n    this.cursor = null;\n    this.index = 0;\n    this.nodes = [];\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  tryPattern() {\n    while (true) {\n      try {\n        this.nodes.push(this.pattern.parse(this.cursor));\n      } catch (error) {\n        break;\n      }\n    }\n\n    this.processValue();\n  }\n\n  processValue() {\n    if (this.nodes.length === 0) {\n      throw new ParseError(`Couldn't find the ${this.pattern.getName()} pattern.`, this.mark.index, this);\n    }\n\n    this.nodes = this.nodes.filter(node => node != null);\n    this.node = new CompositeNode(\n      this.name,\n      this.nodes[0].startIndex,\n      this.nodes[this.nodes.length - 1].endIndex\n    );\n    this.node.children = this.nodes;\n  }\n\n  getPatterns() {\n    return this.patterns;\n  }\n\n  clone() {\n    return new RepeatComposite(this.name, this.patterns);\n  }\n}\n"],"file":"RepeatComposite.js"}