{"version":3,"sources":["../../../src/patterns/composite/CompositePattern.js"],"names":["CompositePattern","type","name","children","_children","_assertArguments","_cloneChildren","_assignAsParent","Array","isArray","Error","areAllPatterns","every","pattern","Pattern","length","map","clone","Object","freeze","forEach","child","parent"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,gB;;;;;AACnB,4BAAYC,IAAZ,EAAkBC,IAAlB,EAAuC;AAAA;;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AAAA;;AACrC,0FAAMF,IAAN,EAAYC,IAAZ;AAEA,UAAKE,SAAL,GAAiBD,QAAjB;;AACA,UAAKE,gBAAL;;AACA,UAAKC,cAAL;;AACA,UAAKC,eAAL;;AANqC;AAOtC;;;;uCAEkB;AACjB,UAAI,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKL,SAAnB,CAAL,EAAoC;AAClC,cAAM,IAAIM,KAAJ,CACJ,2EADI,CAAN;AAGD;;AAED,UAAMC,cAAc,GAAG,KAAKP,SAAL,CAAeQ,KAAf,CACrB,UAAAC,OAAO;AAAA,eAAIA,OAAO,YAAYC,iBAAvB;AAAA,OADc,CAAvB;;AAIA,UAAI,CAACH,cAAL,EAAqB;AACnB,cAAM,IAAID,KAAJ,CACJ,mEADI,CAAN;AAGD;;AAED,UAAI,KAAKN,SAAL,CAAeW,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,cAAM,IAAIL,KAAJ,CACJ,iFADI,CAAN;AAGD;;AAED,UAAI,OAAO,KAAKR,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIQ,KAAJ,CACJ,4EADI,CAAN;AAGD;AACF;;;qCAEgB;AACf;AACA,WAAKN,SAAL,GAAiB,KAAKA,SAAL,CAAeY,GAAf,CAAmB,UAAAH,OAAO;AAAA,eAAIA,OAAO,CAACI,KAAR,EAAJ;AAAA,OAA1B,CAAjB,CAFe,CAIf;;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKf,SAAnB;AACD;;;sCAEgB;AAAA;;AACf,WAAKA,SAAL,CAAegB,OAAf,CAAuB,UAAAC,KAAK;AAAA,eAAKA,KAAK,CAACC,MAAN,GAAe,MAApB;AAAA,OAA5B;AACD;;;4BAEO;AACN,YAAM,IAAIZ,KAAJ,CAAU,qBAAV,CAAN;AACD;;;;EAtD2CI,iB","sourcesContent":["import Pattern from \"../Pattern.js\";\n\nexport default class CompositePattern extends Pattern {\n  constructor(type, name, children = []) {\n    super(type, name);\n\n    this._children = children;\n    this._assertArguments();\n    this._cloneChildren();\n    this._assignAsParent();\n  }\n\n  _assertArguments() {\n    if (!Array.isArray(this._children)) {\n      throw new Error(\n        \"Invalid Arguments: The patterns argument need to be an array of Patterns.\"\n      );\n    }\n\n    const areAllPatterns = this._children.every(\n      pattern => pattern instanceof Pattern\n    );\n\n    if (!areAllPatterns) {\n      throw new Error(\n        \"Invalid Argument: All patterns need to be an instance of Pattern.\"\n      );\n    }\n\n    if (this._children.length < 2) {\n      throw new Error(\n        \"Invalid Argument: Composite Patterns needs to have more than one value pattern.\"\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\n        \"Invalid Argument: Composite Patterns needs to have a name that's a string.\"\n      );\n    }\n  }\n\n  _cloneChildren() {\n    // We need to clone the patterns so nested patterns can be parsed.\n    this._children = this._children.map(pattern => pattern.clone());\n\n    // We need to freeze the childen so they aren't modified.\n    Object.freeze(this._children);\n  }\n\n  _assignAsParent(){\n    this._children.forEach(child => (child.parent = this));\n  }\n\n  clone() {\n    throw new Error(\"Not Yet Implemented\");\n  }\n}\n"],"file":"CompositePattern.js"}