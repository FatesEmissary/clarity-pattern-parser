{"version":3,"sources":["../../../src/patterns/composite/OptionalComposite.js"],"names":["OptionalComposite","pattern","cursor","mark","node","children","parse","hasUnresolvedError","resolveError","moveToMark","addMatch","rootPattern","Pattern","parent","possibilities","getPossibilities","unshift","_children","getTokens","CompositePattern"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,iB;;;;;AACnB,6BAAYC,OAAZ,EAAqB;AAAA;;AAAA,0FACb,oBADa,EACS,oBADT,EAC+B,CAACA,OAAD,CAD/B;AAEpB;;;;0BAEKC,M,EAAQ;AACZ,UAAMC,IAAI,GAAGD,MAAM,CAACC,IAAP,EAAb;AACA,WAAKA,IAAL,GAAYA,IAAZ;AAEA,UAAMC,IAAI,GAAG,KAAKC,QAAL,CAAc,CAAd,EAAiBC,KAAjB,CAAuBJ,MAAvB,CAAb;;AAEA,UAAIA,MAAM,CAACK,kBAAP,EAAJ,EAAiC;AAC/BL,QAAAA,MAAM,CAACM,YAAP;AACAN,QAAAA,MAAM,CAACO,UAAP,CAAkBN,IAAlB;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACLD,QAAAA,MAAM,CAACQ,QAAP,CAAgB,IAAhB,EAAsBN,IAAtB;AACA,eAAOA,IAAP;AACD;AACF;;;4BAEO;AACN,aAAO,IAAIJ,iBAAJ,CAAsB,KAAKK,QAAL,CAAc,CAAd,CAAtB,CAAP;AACD;;;qCAEgBM,W,EAAa;AAC5B,UAAIA,WAAW,IAAI,IAAf,IAAuB,EAAEA,WAAW,YAAYC,gBAAzB,CAA3B,EAA8D;AAC5DD,QAAAA,WAAW,GAAG,IAAd;AACD,OAH2B,CAK5B;;;AACA,UAAI,KAAKE,MAAL,KAAgBF,WAApB,EAAgC;AAC9B,YAAMG,aAAa,GAAG,KAAKT,QAAL,CAAc,CAAd,EAAiBU,gBAAjB,CAAkCJ,WAAlC,CAAtB;AACAG,QAAAA,aAAa,CAACE,OAAd,CAAsB,EAAtB;AAEA,eAAOF,aAAP;AACD,OALD,MAKO;AACL,eAAO,KAAKT,QAAL,CAAc,CAAd,EAAiBU,gBAAjB,CAAkCJ,WAAlC,CAAP;AACD;AACF;;;gCAEW;AACV,aAAO,KAAKM,SAAL,CAAe,CAAf,EAAkBC,SAAlB,EAAP;AACD;;;;EA3C4CC,0B","sourcesContent":["import CompositePattern from \"./CompositePattern.js\";\nimport Pattern from \"../Pattern.js\";\n\nexport default class OptionalComposite extends CompositePattern {\n  constructor(pattern) {\n    super(\"optional-composite\", \"optional-composite\", [pattern]);\n  }\n\n  parse(cursor) {\n    const mark = cursor.mark();\n    this.mark = mark;\n\n    const node = this.children[0].parse(cursor);\n\n    if (cursor.hasUnresolvedError()) {\n      cursor.resolveError();\n      cursor.moveToMark(mark);\n      return null;\n    } else {\n      cursor.addMatch(this, node);\n      return node;\n    }\n  }\n\n  clone() {\n    return new OptionalComposite(this.children[0]);\n  }\n\n  getPossibilities(rootPattern) {\n    if (rootPattern == null || !(rootPattern instanceof Pattern)) {\n      rootPattern = this;\n    }\n\n    // This is to prevent possibilities explosion.\n    if (this.parent === rootPattern){\n      const possibilities = this.children[0].getPossibilities(rootPattern);\n      possibilities.unshift(\"\");\n\n      return possibilities;\n    } else {\n      return this.children[0].getPossibilities(rootPattern);\n    }\n  }\n\n  getTokens() {\n    return this._children[0].getTokens();\n  }\n}\n"],"file":"OptionalComposite.js"}