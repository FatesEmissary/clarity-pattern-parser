{"version":3,"sources":["../../../src/patterns/composite/OptionalComposite.js"],"names":["OptionalComposite","Pattern","constructor","pattern","assertArguments","CompositePattern","Error","getType","getName","getPatterns","parse","cursor","mark","error","moveToMark","clone"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,iBAAN,SAAgCC,gBAAhC,CAAwC;AACrDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,eAAL;AACD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,QAAI,EAAE,KAAKD,OAAL,YAAwBE,yBAA1B,CAAJ,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKJ,OAAL,CAAaI,OAAb,EAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKL,OAAL,CAAaK,OAAb,EAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKN,OAAL,CAAaM,WAAb,EAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,UAAMC,IAAI,GAAGD,MAAM,CAACC,IAAP,EAAb;;AAEA,QAAI;AACF,aAAO,KAAKT,OAAL,CAAaO,KAAb,CAAmBC,MAAnB,CAAP;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AACdF,MAAAA,MAAM,CAACG,UAAP,CAAkBF,IAAlB;AACA,aAAO,IAAP;AACD;AACF;;AAEDG,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIf,iBAAJ,CAAsB,KAAKG,OAA3B,CAAP;AACD;;AAtCoD","sourcesContent":["import CompositePattern from \"./CompositePattern.js\";\nimport Pattern from \"../Pattern.js\";\n\nexport default class OptionalComposite extends Pattern {\n  constructor(pattern) {\n    super();\n    this.pattern = pattern;\n    this.assertArguments();\n  }\n\n  assertArguments() {\n    if (!(this.pattern instanceof CompositePattern)) {\n      throw new Error(\"Invalid Arguments: Expected a CompositePattern.\");\n    }\n  }\n\n  getType() {\n    return this.pattern.getType();\n  }\n\n  getName() {\n    return this.pattern.getName();\n  }\n\n  getPatterns() {\n    return this.pattern.getPatterns();\n  }\n\n  parse(cursor) {\n    const mark = cursor.mark();\n\n    try {\n      return this.pattern.parse(cursor);\n    } catch (error) {\n      cursor.moveToMark(mark);\n      return null;\n    }\n  }\n\n  clone() {\n    return new OptionalComposite(this.pattern);\n  }\n}\n"],"file":"OptionalComposite.js"}