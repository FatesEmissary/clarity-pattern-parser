{"version":3,"sources":["../../../src/patterns/composite/OrComposite.js"],"names":["OrComposite","cursor","index","nodes","node","mark","reset","tryPattern","result","patterns","parse","CompositeNode","name","startIndex","endIndex","children","push","error","length","moveToMark","stack","StackInformation","CompositePatterns"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,W;;;;;;;;;;;;;0BACbC,M,EAAQ;AACZ,WAAKA,MAAL,GAAc,IAAd;AACA,WAAKC,KAAL,GAAa,CAAb;AACA,WAAKC,KAAL,GAAa,EAAb;AACA,WAAKC,IAAL,GAAY,IAAZ;;AAEA,UAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKI,IAAL,GAAY,KAAKJ,MAAL,CAAYI,IAAZ,EAAZ;AACD;AACF;;;0BAEKJ,M,EAAQ;AACZ,WAAKK,KAAL,CAAWL,MAAX;AACA,WAAKM,UAAL;AAEA,aAAO,KAAKH,IAAZ;AACD;;;iCAEY;AACX,aAAO,IAAP,EAAa;AACX,YAAMC,IAAI,GAAG,KAAKJ,MAAL,CAAYI,IAAZ,EAAb;;AAEA,YAAI;AACF,cAAMG,MAAM,GAAG,KAAKC,QAAL,CAAc,KAAKP,KAAnB,EAA0BQ,KAA1B,CAAgC,KAAKT,MAArC,CAAf;AAEA,eAAKG,IAAL,GAAY,IAAIO,sBAAJ,CACV,KAAKC,IADK,EAEVJ,MAAM,CAACK,UAFG,EAGVL,MAAM,CAACM,QAHG,CAAZ;AAKA,eAAKV,IAAL,CAAUW,QAAV,CAAmBC,IAAnB,CAAwBR,MAAxB;AAEA;AACD,SAXD,CAWE,OAAOS,KAAP,EAAc;AACd,cAAI,KAAKf,KAAL,GAAa,CAAb,GAAiB,KAAKO,QAAL,CAAcS,MAAnC,EAA2C;AACzC,iBAAKjB,MAAL,CAAYkB,UAAZ,CAAuBd,IAAvB;AACA,iBAAKH,KAAL;AACD,WAHD,MAGO;AACLe,YAAAA,KAAK,CAACG,KAAN,CAAYJ,IAAZ,CAAiB,IAAIK,yBAAJ,CAAqB,KAAKhB,IAA1B,EAAgC,IAAhC,CAAjB;AACA,kBAAMY,KAAN;AACD;AACF;AACF;AACF;;;4BAEO;AACN,aAAO,IAAIjB,WAAJ,CAAgB,KAAKY,IAArB,EAA2B,KAAKH,QAAhC,CAAP;AACD;;;;EAjDsCa,2B","sourcesContent":["import CompositePatterns from \"./CompositePatterns.js\";\nimport CompositeNode from \"../../ast/CompositeNode.js\";\nimport StackInformation from \"../StackInformation.js\";\n\nexport default class OrComposite extends CompositePatterns {\n  reset(cursor) {\n    this.cursor = null;\n    this.index = 0;\n    this.nodes = [];\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  tryPattern() {\n    while (true) {\n      const mark = this.cursor.mark();\n\n      try {\n        const result = this.patterns[this.index].parse(this.cursor);\n\n        this.node = new CompositeNode(\n          this.name,\n          result.startIndex,\n          result.endIndex\n        );\n        this.node.children.push(result);\n\n        break;\n      } catch (error) {\n        if (this.index + 1 < this.patterns.length) {\n          this.cursor.moveToMark(mark);\n          this.index++;\n        } else {\n          error.stack.push(new StackInformation(this.mark, this));\n          throw error;\n        }\n      }\n    }\n  }\n\n  clone() {\n    return new OrComposite(this.name, this.patterns);\n  }\n}\n"],"file":"OrComposite.js"}