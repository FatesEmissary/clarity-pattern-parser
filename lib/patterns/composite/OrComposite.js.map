{"version":3,"sources":["../../../src/patterns/composite/OrComposite.js"],"names":["OrComposite","CompositePatterns","reset","cursor","index","nodes","node","mark","parse","tryPattern","result","patterns","CompositeNode","name","startIndex","endIndex","children","push","error","length","moveToMark","patternStack","clone"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,WAAN,SAA0BC,0BAA1B,CAA4C;AACzDC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,SAAKA,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAY,IAAZ;;AAEA,QAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKI,IAAL,GAAY,KAAKJ,MAAL,CAAYI,IAAZ,EAAZ;AACD;AACF;;AAEDC,EAAAA,KAAK,CAACL,MAAD,EAAS;AACZ,SAAKD,KAAL,CAAWC,MAAX;AACA,SAAKM,UAAL;AAEA,WAAO,KAAKH,IAAZ;AACD;;AAEDG,EAAAA,UAAU,GAAG;AACX,WAAO,IAAP,EAAa;AACX,YAAMF,IAAI,GAAG,KAAKJ,MAAL,CAAYI,IAAZ,EAAb;;AAEA,UAAI;AACF,cAAMG,MAAM,GAAG,KAAKC,QAAL,CAAc,KAAKP,KAAnB,EAA0BI,KAA1B,CAAgC,KAAKL,MAArC,CAAf;AAEA,aAAKG,IAAL,GAAY,IAAIM,sBAAJ,CAAkB,KAAKC,IAAvB,EAA6BH,MAAM,CAACI,UAApC,EAAgDJ,MAAM,CAACK,QAAvD,CAAZ;AACA,aAAKT,IAAL,CAAUU,QAAV,CAAmBC,IAAnB,CAAwBP,MAAxB;AAEA;AACD,OAPD,CAOE,OAAOQ,KAAP,EAAc;AACd,YAAI,KAAKd,KAAL,GAAa,CAAb,GAAiB,KAAKO,QAAL,CAAcQ,MAAnC,EAA2C;AACzC,eAAKhB,MAAL,CAAYiB,UAAZ,CAAuBb,IAAvB;AACA,eAAKH,KAAL;AACD,SAHD,MAGO;AACLc,UAAAA,KAAK,CAACG,YAAN,CAAmBJ,IAAnB,CAAwB,IAAxB;AACA,gBAAMC,KAAN;AACD;AACF;AACF;AACF;;AAEDI,EAAAA,KAAK,GAAG;AACN,WAAO,IAAItB,WAAJ,CAAgB,KAAKa,IAArB,EAA2B,KAAKF,QAAhC,CAAP;AACD;;AA7CwD","sourcesContent":["import CompositePatterns from \"./CompositePatterns.js\";\nimport CompositeNode from \"../../ast/CompositeNode.js\";\n\nexport default class OrComposite extends CompositePatterns {\n  reset(cursor) {\n    this.cursor = null;\n    this.index = 0;\n    this.nodes = [];\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  tryPattern() {\n    while (true) {\n      const mark = this.cursor.mark();\n\n      try {\n        const result = this.patterns[this.index].parse(this.cursor);\n        \n        this.node = new CompositeNode(this.name, result.startIndex, result.endIndex);\n        this.node.children.push(result);\n\n        break;\n      } catch (error) {\n        if (this.index + 1 < this.patterns.length) {\n          this.cursor.moveToMark(mark);\n          this.index++;\n        } else {\n          error.patternStack.push(this);\n          throw error;\n        }\n      }\n    }\n  }\n\n  clone() {\n    return new OrComposite(this.name, this.patterns);\n  }\n}\n"],"file":"OrComposite.js"}