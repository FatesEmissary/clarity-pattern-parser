{"version":3,"sources":["../../../src/patterns/composite/AndComposite.js"],"names":["AndComposite","cursor","index","nodes","node","mark","_reset","_tryPattern","push","_children","parse","error","stack","StackInformation","length","_processValue","filter","CompositeNode","name","startIndex","endIndex","children","CompositePattern"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,Y;;;;;;;;;;;;;2BACZC,M,EAAQ;AACb,WAAKA,MAAL,GAAc,IAAd;AACA,WAAKC,KAAL,GAAa,CAAb;AACA,WAAKC,KAAL,GAAa,EAAb;AACA,WAAKC,IAAL,GAAY,IAAZ;;AAEA,UAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKI,IAAL,GAAY,KAAKJ,MAAL,CAAYI,IAAZ,EAAZ;AACD;AACF;;;0BAEKJ,M,EAAQ;AACZ,WAAKK,MAAL,CAAYL,MAAZ;;AACA,WAAKM,WAAL;;AAEA,aAAO,KAAKH,IAAZ;AACD;;;kCAEa;AACZ,aAAO,IAAP,EAAa;AAEX,YAAI;AACF,eAAKD,KAAL,CAAWK,IAAX,CAAgB,KAAKC,SAAL,CAAe,KAAKP,KAApB,EAA2BQ,KAA3B,CAAiC,KAAKT,MAAtC,CAAhB;AACD,SAFD,CAEE,OAAOU,KAAP,EAAc;AACdA,UAAAA,KAAK,CAACC,KAAN,CAAYJ,IAAZ,CAAiB,IAAIK,yBAAJ,CAAqB,KAAKR,IAA1B,EAAgC,IAAhC,CAAjB;AACA,gBAAMM,KAAN;AACD;;AAED,YAAI,KAAKT,KAAL,GAAa,CAAb,GAAiB,KAAKO,SAAL,CAAeK,MAApC,EAA4C;AAC1C,eAAKZ,KAAL;AACD,SAFD,MAEO;AACL;AACD;AACF;;AAED,WAAKa,aAAL;AACD;;;oCAEe;AACd,WAAKZ,KAAL,GAAa,KAAKA,KAAL,CAAWa,MAAX,CAAkB,UAAAZ,IAAI;AAAA,eAAIA,IAAI,IAAI,IAAZ;AAAA,OAAtB,CAAb;AACA,WAAKA,IAAL,GAAY,IAAIa,sBAAJ,CACV,KAAKC,IADK,EAEV,KAAKf,KAAL,CAAW,CAAX,EAAcgB,UAFJ,EAGV,KAAKhB,KAAL,CAAW,KAAKA,KAAL,CAAWW,MAAX,GAAoB,CAA/B,EAAkCM,QAHxB,CAAZ;AAKA,WAAKhB,IAAL,CAAUiB,QAAV,GAAqB,KAAKlB,KAA1B;AACD;;;4BAEO;AACN,aAAO,IAAIH,YAAJ,CAAiB,KAAKkB,IAAtB,EAA4B,KAAKT,SAAjC,CAAP;AACD;;;;EApDuCa,0B","sourcesContent":["import CompositePattern from \"./CompositePattern.js\";\nimport CompositeNode from \"../../ast/CompositeNode.js\";\nimport StackInformation from \"../StackInformation.js\";\n\nexport default class AndComposite extends CompositePattern {\n  _reset(cursor) {\n    this.cursor = null;\n    this.index = 0;\n    this.nodes = [];\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this._reset(cursor);\n    this._tryPattern();\n\n    return this.node;\n  }\n\n  _tryPattern() {\n    while (true) {\n\n      try {\n        this.nodes.push(this._children[this.index].parse(this.cursor));\n      } catch (error) {\n        error.stack.push(new StackInformation(this.mark, this));\n        throw error;\n      }\n\n      if (this.index + 1 < this._children.length) {\n        this.index++;\n      } else {\n        break;\n      }\n    }\n\n    this._processValue();\n  }\n\n  _processValue() {\n    this.nodes = this.nodes.filter(node => node != null);\n    this.node = new CompositeNode(\n      this.name,\n      this.nodes[0].startIndex,\n      this.nodes[this.nodes.length - 1].endIndex\n    );\n    this.node.children = this.nodes;\n  }\n\n  clone() {\n    return new AndComposite(this.name, this._children);\n  }\n}\n"],"file":"AndComposite.js"}