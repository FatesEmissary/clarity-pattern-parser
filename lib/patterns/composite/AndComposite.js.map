{"version":3,"sources":["../../../src/patterns/composite/AndComposite.js"],"names":["AndComposite","CompositePatterns","reset","cursor","index","nodes","node","mark","parse","tryPattern","push","patterns","error","stack","StackInformation","length","processValue","filter","CompositeNode","name","startIndex","endIndex","children","clone"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,MAAMA,YAAN,SAA2BC,0BAA3B,CAA6C;AAC1DC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,SAAKA,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAY,IAAZ;;AAEA,QAAIH,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKI,IAAL,GAAY,KAAKJ,MAAL,CAAYI,IAAZ,EAAZ;AACD;AACF;;AAEDC,EAAAA,KAAK,CAACL,MAAD,EAAS;AACZ,SAAKD,KAAL,CAAWC,MAAX;AACA,SAAKM,UAAL;AAEA,WAAO,KAAKH,IAAZ;AACD;;AAEDG,EAAAA,UAAU,GAAG;AACX,WAAO,IAAP,EAAa;AAEX,UAAI;AACF,aAAKJ,KAAL,CAAWK,IAAX,CAAgB,KAAKC,QAAL,CAAc,KAAKP,KAAnB,EAA0BI,KAA1B,CAAgC,KAAKL,MAArC,CAAhB;AACD,OAFD,CAEE,OAAOS,KAAP,EAAc;AACdA,QAAAA,KAAK,CAACC,KAAN,CAAYH,IAAZ,CAAiB,IAAII,yBAAJ,CAAqB,KAAKP,IAA1B,EAAgC,IAAhC,CAAjB;AACA,cAAMK,KAAN;AACD;;AAED,UAAI,KAAKR,KAAL,GAAa,CAAb,GAAiB,KAAKO,QAAL,CAAcI,MAAnC,EAA2C;AACzC,aAAKX,KAAL;AACD,OAFD,MAEO;AACL;AACD;AACF;;AAED,SAAKY,YAAL;AACD;;AAEDA,EAAAA,YAAY,GAAG;AACb,SAAKX,KAAL,GAAa,KAAKA,KAAL,CAAWY,MAAX,CAAkBX,IAAI,IAAIA,IAAI,IAAI,IAAlC,CAAb;AACA,SAAKA,IAAL,GAAY,IAAIY,sBAAJ,CACV,KAAKC,IADK,EAEV,KAAKd,KAAL,CAAW,CAAX,EAAce,UAFJ,EAGV,KAAKf,KAAL,CAAW,KAAKA,KAAL,CAAWU,MAAX,GAAoB,CAA/B,EAAkCM,QAHxB,CAAZ;AAKA,SAAKf,IAAL,CAAUgB,QAAV,GAAqB,KAAKjB,KAA1B;AACD;;AAEDkB,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIvB,YAAJ,CAAiB,KAAKmB,IAAtB,EAA4B,KAAKR,QAAjC,CAAP;AACD;;AApDyD","sourcesContent":["import CompositePatterns from \"./CompositePatterns.js\";\nimport CompositeNode from \"../../ast/CompositeNode.js\";\nimport StackInformation from \"../StackInformation.js\";\n\nexport default class AndComposite extends CompositePatterns {\n  reset(cursor) {\n    this.cursor = null;\n    this.index = 0;\n    this.nodes = [];\n    this.node = null;\n\n    if (cursor != null) {\n      this.cursor = cursor;\n      this.mark = this.cursor.mark();\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryPattern();\n\n    return this.node;\n  }\n\n  tryPattern() {\n    while (true) {\n\n      try {\n        this.nodes.push(this.patterns[this.index].parse(this.cursor));\n      } catch (error) {\n        error.stack.push(new StackInformation(this.mark, this));\n        throw error;\n      }\n\n      if (this.index + 1 < this.patterns.length) {\n        this.index++;\n      } else {\n        break;\n      }\n    }\n\n    this.processValue();\n  }\n\n  processValue() {\n    this.nodes = this.nodes.filter(node => node != null);\n    this.node = new CompositeNode(\n      this.name,\n      this.nodes[0].startIndex,\n      this.nodes[this.nodes.length - 1].endIndex\n    );\n    this.node.children = this.nodes;\n  }\n\n  clone() {\n    return new AndComposite(this.name, this.patterns);\n  }\n}\n"],"file":"AndComposite.js"}