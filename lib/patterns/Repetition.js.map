{"version":3,"sources":["../../src/patterns/Repetition.js"],"names":["Repetition","constructor","name","parser","clone","cursor","nodes","compositeNode","assertParser","parse","Error","reset","tryParser","createCompositeNode","mark","node","push","isAtEnd","error","length","ParseError","moveToMark","CompositeNode","children"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAM,CAACC,KAAP,EAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,aAAL,GAAqB,IAArB;AAEA,SAAKC,YAAL;AACD;;AAEDA,EAAAA,YAAY,GAAG;AACb,QAAI,OAAO,KAAKL,MAAL,CAAYM,KAAnB,KAA6B,UAAjC,EAA6C;AAC3C,YAAM,IAAIC,KAAJ,CACJ,0DADI,CAAN;AAGD;AACF;;AAEDD,EAAAA,KAAK,CAACJ,MAAD,EAAS;AACZ,SAAKM,KAAL,CAAWN,MAAX;AACA,SAAKO,SAAL;AACA,SAAKC,mBAAL;AAEA,WAAO,KAAKN,aAAZ;AACD;;AAEDI,EAAAA,KAAK,CAACN,MAAD,EAAS;AACZ,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,aAAL,GAAqB,IAArB;AACD;;AAEDK,EAAAA,SAAS,GAAG;AACV,UAAME,IAAI,GAAG,KAAKT,MAAL,CAAYS,IAAZ,EAAb;;AAEA,QAAI;AACF,YAAMC,IAAI,GAAG,KAAKZ,MAAL,CAAYM,KAAZ,CAAkB,KAAKJ,MAAvB,CAAb;AACA,WAAKC,KAAL,CAAWU,IAAX,CAAgBD,IAAhB;;AAEA,UAAI,CAAC,KAAKV,MAAL,CAAYY,OAAZ,EAAL,EAA2B;AACzB,aAAKL,SAAL;AACD;AAEF,KARD,CAQE,OAAOM,KAAP,EAAc;AACd,UAAI,KAAKZ,KAAL,CAAWa,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIC,mBAAJ,CAAgB,cAAa,KAAKlB,IAAK,GAAvC,CAAN;AACD;;AAED,WAAKG,MAAL,CAAYgB,UAAZ,CAAuBP,IAAvB;AACD;AACF;;AAEDD,EAAAA,mBAAmB,GAAG;AACpB,SAAKN,aAAL,GAAqB,IAAIe,sBAAJ,CAAkB,KAAKpB,IAAvB,CAArB;AACA,SAAKK,aAAL,CAAmBgB,QAAnB,GAA8B,KAAKjB,KAAnC;AACD;;AAEDF,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIJ,UAAJ,CAAe,KAAKE,IAApB,EAA0B,KAAKC,MAA/B,CAAP;AACD;;AA5D6B","sourcesContent":["import CompositeNode from \"../ast/CompositeNode.js\";\nimport ParseError from \"../ParseError.js\";\n\nexport default class Repetition {\n  constructor(name, parser) {\n    this.name = name;\n    this.parser = parser.clone();\n    this.cursor = null;\n    this.nodes = [];\n    this.compositeNode = null;\n\n    this.assertParser();\n  }\n\n  assertParser() {\n    if (typeof this.parser.parse !== \"function\") {\n      throw new Error(\n        \"Invalid Argument: A Repetition can only accept a parser.\"\n      );\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryParser();\n    this.createCompositeNode();\n\n    return this.compositeNode;\n  }\n\n  reset(cursor) {\n    this.cursor = cursor;\n    this.nodes = [];\n    this.compositeNode = null;\n  }\n\n  tryParser() {\n    const mark = this.cursor.mark();\n\n    try {\n      const node = this.parser.parse(this.cursor);\n      this.nodes.push(node);\n\n      if (!this.cursor.isAtEnd()){\n        this.tryParser();\n      }\n      \n    } catch (error) {\n      if (this.nodes.length === 0) {\n        throw new ParseError(`Expected a ${this.name}.`);\n      }\n\n      this.cursor.moveToMark(mark);\n    }\n  }\n\n  createCompositeNode() {\n    this.compositeNode = new CompositeNode(this.name);\n    this.compositeNode.children = this.nodes;\n  }\n\n  clone() {\n    return new Repetition(this.name, this.parser);\n  }\n}\n"],"file":"Repetition.js"}