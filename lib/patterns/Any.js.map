{"version":3,"sources":["../../src/patterns/Any.js"],"names":["Any","constructor","name","parsers","options","map","parser","clone","cursor","index","mark","errors","nodes","filteredNodes","value","assertParsers","recoverFromBadOptions","forEach","parse","Error","length","isValue","isOptional","reset","tryParser","reduceValue","node","ValueNode","push","endIndex","lastIndex","next","error","moveToMark","throwError","furthestError","reduce","filter","ParseError","join","startIndex","CompositeNode"],"mappings":"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","sourcesContent":["import ValueNode from \"../ast/ValueNode.js\";\nimport ParseError from \"../ParseError.js\";\nimport CompositeNode from \"../ast/CompositeNode.js\";\n\nexport default class Any {\n  constructor(name, parsers, options) {\n    this.name = name;\n    this.parsers = parsers.map(parser => parser.clone());\n    this.options = options;\n    this.cursor = null;\n    this.index = 0;\n    this.mark = null;\n    this.errors = [];\n    this.nodes = [];\n    this.filteredNodes = [];\n    this.value = null;\n    this.options = options;\n\n    this.assertParsers();\n    this.recoverFromBadOptions();\n  }\n\n  assertParsers() {\n    this.parsers.forEach(parser => {\n      if (typeof parser.parse !== \"function\") {\n        throw new Error(\n          \"Invalid Argument: An Alternation can only accept parsers.\"\n        );\n      }\n    });\n\n    if (this.parsers.length < 2) {\n      throw new Error(\n        \"Invalid Arguments: An Alternation needs at least two options.\"\n      );\n    }\n  }\n\n  recoverFromBadOptions() {\n    if (typeof this.options !== \"object\" || this.options == null) {\n      this.options = {};\n      this.options.isValue = false;\n      this.options.isOptional = false;\n    } else {\n      if (typeof this.options.isValue !== \"boolean\") {\n        this.options.isValue = false;\n      }\n\n      if (typeof this.options.isOptional !== \"boolean\") {\n        this.options.isOptional = false;\n      }\n    }\n  }\n\n  parse(cursor) {\n    this.reset(cursor);\n    this.tryParser();\n    this.reduceValue();\n\n    return this.value;\n  }\n\n  reset(cursor) {\n    this.cursor = cursor;\n    this.index = 0;\n    this.mark = this.cursor.mark();\n    this.errors = [];\n    this.nodes = [];\n    this.filteredNodes = [];\n    this.value = null;\n  }\n\n  tryParser() {\n    const parser = this.parsers[this.index];\n\n    try {\n      const node = parser.parse(this.cursor);\n\n      if (!(node instanceof ValueNode)) {\n        throw new Error(\n          `Invalid Arguments: 'Any Parser' expects all parsers to return a Value node, but received something else on a ${parser.name} parser.`\n        );\n      }\n\n      this.nodes.push(node);\n\n      this.index = 0;\n      this.errors = [];\n\n      if (node.endIndex !== this.cursor.lastIndex()) {\n        this.mark = this.cursor.mark();\n        this.cursor.next();\n        this.tryParser();\n      }\n    } catch (error) {\n      this.errors.push(error);\n\n      if (this.index + 1 < this.parsers.length) {\n        this.index++;\n        this.cursor.moveToMark(this.mark);\n        return this.tryParser();\n      }\n\n      this.throwError();\n    }\n  }\n\n  throwError() {\n    const furthestError = this.errors.reduce((furthestError, error) => {\n      return furthestError.index > error.index ? furthestError : error;\n    });\n\n    if (furthestError != null) {\n      throw furthestError;\n    }\n  }\n\n  reduceValue() {\n    this.filteredNodes = this.nodes.filter(node => node != null);\n\n    if (this.filteredNodes.length === 0) {\n      if (this.options.isOptional) {\n        this.cursor.moveToMark(this.mark);\n        this.value = null;\n        return;\n      } else {\n        throw new ParseError(`Couldn't find a match for ${this.name}.`);\n      }\n    }\n\n    if (this.options.isValue) {\n      this.value = this.filteredNodes.map(node => node.value).join(\"\");\n\n      this.value = new ValueNode(\n        this.name,\n        this.value,\n        this.filteredNodes[0].startIndex,\n        this.filteredNodes[this.filteredNodes.length - 1].endIndex\n      );\n    } else {\n      this.value = new CompositeNode(\n        this.name,\n        this.filteredNodes[0].startIndex,\n        this.filteredNodes[this.filteredNodes.length - 1].endIndex\n      );\n\n      this.value.nodes = this.filteredNodes;\n    }\n  }\n\n  clone() {\n    return new Any(this.name, this.parsers, this.options);\n  }\n}\n"],"file":"Any.js"}