{"version":3,"sources":["../../src/queryPatterns/attribute.js"],"names":["openSquareBracket","Literal","closeSquareBracket","equal","spaces","RegexValue","optionalSpaces","OptionalValue","singleQuote","twoSingleQuotes","allowedValueCharacters","name","valueCharacter","OrValue","valueCharacters","RepeatValue","value","AndComposite","attribute"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,iBAAiB,GAAG,IAAIC,gBAAJ,CAAY,qBAAZ,EAAmC,GAAnC,CAA1B;AACA,IAAMC,kBAAkB,GAAG,IAAID,gBAAJ,CAAY,sBAAZ,EAAoC,GAApC,CAA3B;AACA,IAAME,KAAK,GAAG,IAAIF,gBAAJ,CAAY,OAAZ,EAAqB,GAArB,CAAd;AACA,IAAMG,MAAM,GAAG,IAAIC,mBAAJ,CAAe,QAAf,EAAyB,MAAzB,CAAf;AACA,IAAMC,cAAc,GAAG,IAAIC,sBAAJ,CAAkBH,MAAlB,CAAvB;AACA,IAAMI,WAAW,GAAG,IAAIP,gBAAJ,CAAY,cAAZ,EAA4B,GAA5B,CAApB;AACA,IAAMQ,eAAe,GAAG,IAAIR,gBAAJ,CAAY,mBAAZ,EAAiC,IAAjC,CAAxB;AACA,IAAMS,sBAAsB,GAAG,IAAIL,mBAAJ,CAC7B,0BAD6B,EAE7B,OAF6B,CAA/B;AAIA,IAAMM,IAAI,GAAG,IAAIN,mBAAJ,CAAe,MAAf,EAAuB,aAAvB,CAAb;AACA,IAAMO,cAAc,GAAG,IAAIC,gBAAJ,CAAY,WAAZ,EAAyB,CAC9CH,sBAD8C,EAE9CD,eAF8C,CAAzB,CAAvB;AAIA,IAAMK,eAAe,GAAG,IAAIC,oBAAJ,CAAgB,YAAhB,EAA8BH,cAA9B,CAAxB;AAEA,IAAMI,KAAK,GAAG,IAAIC,mBAAJ,CAAiB,OAAjB,EAA0B,CACtCT,WADsC,EAEtCM,eAFsC,EAGtCN,WAHsC,CAA1B,CAAd;AAMA,IAAMU,SAAS,GAAG,IAAID,mBAAJ,CAAiB,WAAjB,EAA8B,CAC9CjB,iBAD8C,EAE9CM,cAF8C,EAG9CK,IAH8C,EAI9CL,cAJ8C,EAK9CH,KAL8C,EAM9CG,cAN8C,EAO9CU,KAP8C,EAQ9CV,cAR8C,EAS9CJ,kBAT8C,CAA9B,CAAlB;eAYegB,S","sourcesContent":["import Literal from \"../patterns/value/Literal.js\";\nimport RegexValue from \"../patterns/value/RegexValue.js\";\nimport RepeatValue from \"../patterns/value/RepeatValue.js\";\nimport OptionalValue from \"../patterns/value/OptionalValue.js\";\nimport OrValue from \"../patterns/value/OrValue.js\";\nimport { AndComposite } from \"../index.js\";\n\nconst openSquareBracket = new Literal(\"open-square-bracket\", \"[\");\nconst closeSquareBracket = new Literal(\"close-square-bracket\", \"]\");\nconst equal = new Literal(\"equal\", \"=\");\nconst spaces = new RegexValue(\"spaces\", \"\\\\s+\");\nconst optionalSpaces = new OptionalValue(spaces);\nconst singleQuote = new Literal(\"single-quote\", \"'\");\nconst twoSingleQuotes = new Literal(\"two-single-quotes\", \"''\");\nconst allowedValueCharacters = new RegexValue(\n  \"allowed-value-characters\",\n  \"[^']+\"\n);\nconst name = new RegexValue(\"name\", \"[^\\\\]\\\\[=]+\");\nconst valueCharacter = new OrValue(\"character\", [\n  allowedValueCharacters,\n  twoSingleQuotes\n]);\nconst valueCharacters = new RepeatValue(\"characters\", valueCharacter);\n\nconst value = new AndComposite(\"value\", [\n  singleQuote,\n  valueCharacters,\n  singleQuote\n]);\n\nconst attribute = new AndComposite(\"attribute\", [\n  openSquareBracket,\n  optionalSpaces,\n  name,\n  optionalSpaces,\n  equal,\n  optionalSpaces,\n  value,\n  optionalSpaces,\n  closeSquareBracket\n]);\n\nexport default attribute;\n"],"file":"attribute.js"}