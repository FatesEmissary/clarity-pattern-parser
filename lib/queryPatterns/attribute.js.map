{"version":3,"sources":["../../src/queryPatterns/attribute.js"],"names":["openSquareBracket","Literal","closeSquareBracket","equal","space","spaces","RepeatValue","optionalSpaces","OptionalValue","singleQuote","twoSingleQuotes","allowedValueCharacters","RegexValue","allowedNameCharacters","valueCharacter","OrValue","valueCharacters","name","AndComposite","value","attribute"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,iBAAiB,GAAG,IAAIC,gBAAJ,CAAY,qBAAZ,EAAmC,GAAnC,CAA1B;AACA,IAAMC,kBAAkB,GAAG,IAAID,gBAAJ,CAAY,sBAAZ,EAAoC,GAApC,CAA3B;AACA,IAAME,KAAK,GAAG,IAAIF,gBAAJ,CAAY,OAAZ,EAAqB,GAArB,CAAd;AACA,IAAMG,KAAK,GAAG,IAAIH,gBAAJ,CAAY,OAAZ,EAAqB,GAArB,CAAd;AACA,IAAMI,MAAM,GAAG,IAAIC,oBAAJ,CAAgB,QAAhB,EAA0BF,KAA1B,CAAf;AACA,IAAMG,cAAc,GAAG,IAAIC,sBAAJ,CAAkBH,MAAlB,CAAvB;AACA,IAAMI,WAAW,GAAG,IAAIR,gBAAJ,CAAY,cAAZ,EAA4B,GAA5B,CAApB;AACA,IAAMS,eAAe,GAAG,IAAIT,gBAAJ,CAAY,mBAAZ,EAAiC,IAAjC,CAAxB;AACA,IAAMU,sBAAsB,GAAG,IAAIC,mBAAJ,CAAe,0BAAf,EAA2C,OAA3C,CAA/B;AACA,IAAMC,qBAAqB,GAAG,IAAID,mBAAJ,CAAe,YAAf,EAA6B,SAA7B,CAA9B;AACA,IAAME,cAAc,GAAG,IAAIC,gBAAJ,CAAY,WAAZ,EAAyB,CAACJ,sBAAD,EAAyBD,eAAzB,CAAzB,CAAvB;AACA,IAAMM,eAAe,GAAG,IAAIV,oBAAJ,CAAgB,YAAhB,EAA8BQ,cAA9B,CAAxB;AAEA,IAAMG,IAAI,GAAG,IAAIC,mBAAJ,CAAiB,MAAjB,EAAyB,CAAClB,iBAAD,EAAoBa,qBAApB,EAA2CX,kBAA3C,CAAzB,CAAb;AACA,IAAMiB,KAAK,GAAG,IAAID,mBAAJ,CAAiB,OAAjB,EAA0B,CAACT,WAAD,EAAcO,eAAd,EAA+BP,WAA/B,CAA1B,CAAd;AAEA,IAAMW,SAAS,GAAG,IAAIF,mBAAJ,CAAiB,WAAjB,EAA8B,CAACD,IAAD,EAAOV,cAAP,EAAuBJ,KAAvB,EAA8BI,cAA9B,EAA8CY,KAA9C,CAA9B,CAAlB;eAEeC,S","sourcesContent":["import Literal from \"../patterns/value/Literal.js\";\nimport RegexValue from \"../patterns/value/RegexValue.js\";\nimport RepeatValue  from \"../patterns/value/RepeatValue.js\";\nimport OptionalValue from \"../patterns/value/OptionalValue.js\";\nimport NotValue from \"../patterns/value/NotValue.js\";\nimport OrValue  from \"../patterns/value/OrValue.js\";\nimport { AndComposite } from \"../index.js\";\n\nconst openSquareBracket = new Literal(\"open-square-bracket\", \"[\");\nconst closeSquareBracket = new Literal(\"close-square-bracket\", \"]\");\nconst equal = new Literal(\"equal\", \"=\");\nconst space = new Literal(\"space\", \" \");\nconst spaces = new RepeatValue(\"spaces\", space);\nconst optionalSpaces = new OptionalValue(spaces);\nconst singleQuote = new Literal(\"single-quote\", \"'\");\nconst twoSingleQuotes = new Literal(\"two-single-quotes\", \"''\");\nconst allowedValueCharacters = new RegexValue(\"allowed-value-characters\", \"[^']+\");\nconst allowedNameCharacters = new RegexValue(\"characters\", \"[^\\\\]]+\");\nconst valueCharacter = new OrValue(\"character\", [allowedValueCharacters, twoSingleQuotes]);\nconst valueCharacters = new RepeatValue(\"characters\", valueCharacter);\n\nconst name = new AndComposite(\"name\", [openSquareBracket, allowedNameCharacters, closeSquareBracket]);\nconst value = new AndComposite(\"value\", [singleQuote, valueCharacters, singleQuote]);\n\nconst attribute = new AndComposite(\"attribute\", [name, optionalSpaces, equal, optionalSpaces, value]);\n\nexport default attribute;\n\n"],"file":"attribute.js"}