{"version":3,"sources":["../src/ParseInspector.js"],"names":["ParseInspector","cursor","result","text","match","error","patternMatch","matchedText","rootPattern","possibilities","pattern","reset","length","astNode","startIndex","options","getPossibilities","isComplete","parse","saveMatchedText","saveMatch","saveError","savePossibilities","didSuccessfullyParse","Cursor","lastMatch","substring","endIndex","node","difference","parts","split","filter","part","option","some","indexOf","parentPattern","parent","index","children","parentClone","clone","slice","leftOver","partialMatchOptions","map","ResultGenerator","inspectParse"],"mappings":"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","sourcesContent":["import { Cursor } from \"./index.js\";\n\nexport default class ParseInspector {\n  constructor() {\n    this.cursor = null;\n    this.result = null;\n    this.text = null;\n    this.match = null;\n    this.error = null;\n    this.patternMatch = null;\n    this.matchedText = \"\";\n    this.rootPattern = null;\n    this.possibilities = null;\n  }\n\n  inspectParse(text, pattern) {\n    this.reset();\n\n    this.text = text;\n    this.rootPattern = pattern;\n\n    // If no text all options are available.\n    if (text.length === 0) {\n      return {\n        pattern: null,\n        astNode: null,\n        match: null,\n        error: null,\n        possibilities: {\n          startIndex: 0,\n          options: pattern.getPossibilities()\n        },\n        isComplete: false\n      };\n    }\n\n    this.parse();\n    this.saveMatchedText();\n    this.saveMatch();\n    this.saveError();\n    this.savePossibilities();\n\n    return {\n      pattern: this.patternMatch.pattern,\n      astNode: this.patternMatch.astNode,\n      match: this.match,\n      error: this.error,\n      possibilities: this.possibilities,\n      isComplete: this.cursor.didSuccessfullyParse()\n    };\n  }\n\n  reset() {\n    this.cursor = null;\n    this.result = null;\n    this.text = null;\n    this.match = null;\n    this.error = null;\n    this.patternMatch = null;\n    this.matchedText = \"\";\n    this.rootPattern = null;\n    this.possibilities = null;\n  }\n\n  parse() {\n    this.rootPattern = this.rootPattern;\n    this.cursor = new Cursor(this.text);\n    this.result = this.rootPattern.parse(this.cursor);\n    this.patternMatch = this.cursor.lastMatch;\n  }\n\n  saveMatchedText() {\n    if (this.patternMatch.astNode != null) {\n      this.matchedText = this.text.substring(\n        0,\n        this.patternMatch.astNode.endIndex + 1\n      );\n    }\n  }\n\n  saveMatch() {\n    const node = this.patternMatch.astNode;\n\n    if (node == null) {\n      this.match = null;\n      return;\n    }\n\n    let endIndex = this.matchedText.length - 1;\n\n    this.match = {\n      text: this.matchedText,\n      startIndex: 0,\n      endIndex: endIndex\n    };\n  }\n\n  saveError() {\n    if (this.patternMatch.astNode == null) {\n      this.error = {\n        startIndex: 0,\n        endIndex: this.text.length - 1,\n        text: this.text\n      };\n      return this;\n    }\n\n    if (this.text.length > this.matchedText.length) {\n      const difference = this.text.length - this.matchedText.length;\n      const startIndex = this.patternMatch.astNode.endIndex + 1;\n      const endIndex = startIndex + difference - 1;\n\n      this.error = {\n        startIndex: startIndex,\n        endIndex: endIndex,\n        text: this.text.substring(startIndex, endIndex + 1)\n      };\n\n      return;\n    } else {\n      this.error = null;\n      return;\n    }\n  }\n\n  savePossibilities() {\n    if (\n      this.patternMatch.pattern === this.rootPattern &&\n      this.cursor.didSuccessfullyParse()\n    ) {\n      this.possibilities = null;\n      return;\n    }\n\n    if (this.patternMatch.astNode == null) {\n      let options = this.rootPattern.getPossibilities();\n      const parts = this.text.split(\" \").filter(part => {\n        return part.length > 0;\n      });\n\n      options = options.filter(option => {\n        return parts.some(part => {\n          return option.indexOf(part) > -1;\n        });\n      });\n\n      if (options.length === 0) {\n        this.possibilities = null;\n        return;\n      }\n\n      this.possibilities = {\n        startIndex: 0,\n        options\n      };\n\n      return;\n    }\n\n    const pattern = this.patternMatch.pattern || this.rootPattern;\n    const parentPattern = pattern.parent || pattern;\n    const index = parentPattern.children.indexOf(pattern);\n    const parentClone = parentPattern.clone();\n\n    parentClone.children = parentClone.children.slice(index + 1);\n\n    const options = parentClone.getPossibilities();\n    let startIndex = this.matchedText.length;\n    startIndex = startIndex >= 0 ? startIndex : 0;\n\n    if (this.matchedText.length < this.text.length) {\n      const leftOver = this.text.substring(this.matchedText.length);\n      const partialMatchOptions = options\n        .filter(option => {\n          return option.indexOf(leftOver) === 0;\n        })\n        .map(option => {\n          return option.substring(leftOver.length);\n        });\n\n      if (partialMatchOptions.length === 0) {\n        this.possibilities = null;\n        return;\n      } else {\n        this.match = {\n          ...this.match,\n          text: this.match.text + leftOver,\n          endIndex: this.match.endIndex + leftOver.length\n        };\n\n        this.error = null;\n\n        this.possibilities = {\n          startIndex: this.match.endIndex + 1,\n          options: partialMatchOptions\n        };\n\n        return;\n      }\n    }\n\n    this.possibilities = {\n      startIndex,\n      options\n    };\n  }\n\n  static inspectParse(text, pattern) {\n    return new ResultGenerator().inspectParse(text, pattern);\n  }\n}\n"],"file":"ParseInspector.js"}