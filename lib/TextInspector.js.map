{"version":3,"sources":["../src/TextInspector.js"],"names":["TextInspector","cursor","result","text","match","error","patternMatch","matchedText","rootPattern","tokens","options","parseStack","pattern","reset","length","astNode","startIndex","getTokens","isComplete","parse","saveParseStack","saveMatchedText","saveMatch","saveError","saveOptions","saveNextToken","didSuccessfullyParse","Cursor","startRecording","lastMatch","history","getLastParseStack","substring","endIndex","node","difference","parts","split","filter","part","option","some","indexOf","leftOver","partialMatchOptions","map","furthestMatches","astNodes","reduce","acc","index","furthestTextIndex","nodeIndexes","push","matches","patterns","getNextTokens","forEach","token","Object","keys","inspect"],"mappings":"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","sourcesContent":["import { Cursor } from \"./index.js\";\n\nexport default class TextInspector {\n  constructor() {\n    this.cursor = null;\n    this.result = null;\n    this.text = null;\n    this.match = null;\n    this.error = null;\n    this.patternMatch = null;\n    this.matchedText = \"\";\n    this.rootPattern = null;\n    this.tokens = null;\n    this.options = [];\n    this.parseStack = [];\n  }\n\n  inspect(text, pattern) {\n    this.reset();\n\n    this.text = text;\n    this.rootPattern = pattern;\n\n    // If no text all options are available.\n    if (text.length === 0) {\n      return {\n        pattern: null,\n        astNode: null,\n        match: null,\n        error: null,\n        tokens: {\n          startIndex: 0,\n          options: pattern.getTokens(),\n        },\n        isComplete: false,\n        parseStack: []\n      };\n    }\n\n    this.parse();\n    this.saveParseStack();\n    this.saveMatchedText();\n    this.saveMatch();\n    this.saveError();\n    this.saveOptions();\n    this.saveNextToken();\n\n    return {\n      pattern: this.patternMatch.pattern,\n      astNode: this.patternMatch.astNode,\n      match: this.match,\n      error: this.error,\n      tokens: this.tokens,\n      isComplete: this.cursor.didSuccessfullyParse(),\n      parseStack: this.parseStack\n    };\n  }\n\n  reset() {\n    this.cursor = null;\n    this.result = null;\n    this.text = null;\n    this.match = null;\n    this.error = null;\n    this.patternMatch = null;\n    this.matchedText = \"\";\n    this.rootPattern = null;\n    this.tokens = null;\n    this.options = [];\n    this.parseStack = [];\n  }\n\n  parse() {\n    this.rootPattern = this.rootPattern;\n    this.cursor = new Cursor(this.text);\n    this.cursor.startRecording();\n    this.result = this.rootPattern.parse(this.cursor);\n    this.patternMatch = this.cursor.lastMatch;\n  }\n\n  saveParseStack() {\n    this.parseStack = this.cursor.history.getLastParseStack();\n  }\n\n  saveMatchedText() {\n    if (this.patternMatch.astNode != null) {\n      this.matchedText = this.text.substring(\n        0,\n        this.patternMatch.astNode.endIndex + 1\n      );\n    }\n  }\n\n  saveMatch() {\n    const node = this.patternMatch.astNode;\n\n    if (node == null) {\n      this.match = null;\n      return;\n    }\n\n    let endIndex = this.matchedText.length - 1;\n\n    this.match = {\n      text: this.matchedText,\n      startIndex: 0,\n      endIndex: endIndex,\n    };\n  }\n\n  saveError() {\n    if (this.patternMatch.astNode == null) {\n      this.error = {\n        startIndex: 0,\n        endIndex: this.text.length - 1,\n        text: this.text,\n      };\n      return this;\n    }\n\n    if (this.text.length > this.matchedText.length) {\n      const difference = this.text.length - this.matchedText.length;\n      const startIndex = this.patternMatch.astNode.endIndex + 1;\n      const endIndex = startIndex + difference - 1;\n\n      this.error = {\n        startIndex: startIndex,\n        endIndex: endIndex,\n        text: this.text.substring(startIndex, endIndex + 1),\n      };\n\n      return;\n    } else {\n      this.error = null;\n      return;\n    }\n  }\n\n  saveNextToken() {\n    if (\n      this.patternMatch.pattern === this.rootPattern &&\n      this.cursor.didSuccessfullyParse()\n    ) {\n      this.tokens = null;\n      return;\n    }\n\n    if (this.patternMatch.astNode == null) {\n      let options = this.rootPattern.getTokens();\n      const parts = this.text.split(\" \").filter((part) => {\n        return part.length > 0;\n      });\n\n      options = options.filter((option) => {\n        return parts.some((part) => {\n          return option.indexOf(part) > -1;\n        });\n      });\n\n      if (options.length === 0) {\n        this.tokens = null;\n        return;\n      }\n\n      this.tokens = {\n        startIndex: 0,\n        options,\n      };\n\n      return;\n    }\n\n    const options = this.options;\n    let startIndex = this.matchedText.length;\n\n    if (this.matchedText.length < this.text.length) {\n      const leftOver = this.text.substring(this.matchedText.length);\n      const partialMatchOptions = options\n        .filter((option) => {\n          return option.indexOf(leftOver) === 0;\n        })\n        .map((option) => {\n          return option.substring(leftOver.length);\n        });\n\n      if (partialMatchOptions.length === 0) {\n        this.tokens = null;\n        return;\n      } else {\n        this.match = {\n          ...this.match,\n          text: this.match.text + leftOver,\n          endIndex: this.match.endIndex + leftOver.length,\n        };\n\n        this.error = null;\n\n        this.tokens = {\n          startIndex: this.match.endIndex + 1,\n          options: partialMatchOptions,\n        };\n\n        return;\n      }\n    }\n\n    this.tokens = {\n      startIndex,\n      options,\n    };\n  }\n\n  saveOptions() {\n    const furthestMatches = this.cursor.history.astNodes.reduce(\n      (acc, node, index) => {\n        if (node.endIndex === acc.furthestTextIndex) {\n          acc.nodeIndexes.push(index);\n        } else if (node.endIndex > acc.furthestTextIndex) {\n          acc.furthestTextIndex = node.endIndex;\n          acc.nodeIndexes = [index];\n        }\n\n        return acc;\n      },\n      { furthestTextIndex: -1, nodeIndexes: [] }\n    );\n\n    const matches = furthestMatches.nodeIndexes.reduce((acc, index) => {\n      const pattern = this.cursor.history.patterns[index];\n      const tokens = pattern.getNextTokens();\n\n      tokens.forEach((token) => {\n        acc[token] = true;\n      });\n\n      return acc;\n    }, {});\n\n    this.options = Object.keys(matches);\n  }\n\n  static inspect(text, pattern) {\n    return new TextInspector().inspect(text, pattern);\n  }\n}\n"],"file":"TextInspector.js"}