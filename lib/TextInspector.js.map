{"version":3,"sources":["../src/TextInspector.js"],"names":["TextInspector","cursor","result","text","match","error","patternMatch","matchedText","rootPattern","tokens","options","pattern","reset","length","astNode","startIndex","getTokens","isComplete","parse","saveMatchedText","saveMatch","saveError","saveOptions","saveNextToken","didSuccessfullyParse","Cursor","startRecording","lastMatch","substring","endIndex","node","difference","parts","split","filter","part","option","some","indexOf","leftOver","partialMatchOptions","map","furthestMatches","history","astNodes","reduce","acc","index","furthestTextIndex","nodeIndexes","push","matches","patterns","getNextTokens","forEach","token","Object","keys","inspect"],"mappings":"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","sourcesContent":["import { Cursor } from \"./index.js\";\n\nexport default class TextInspector {\n  constructor() {\n    this.cursor = null;\n    this.result = null;\n    this.text = null;\n    this.match = null;\n    this.error = null;\n    this.patternMatch = null;\n    this.matchedText = \"\";\n    this.rootPattern = null;\n    this.tokens = null;\n    this.options = [];\n  }\n\n  inspect(text, pattern) {\n    this.reset();\n\n    this.text = text;\n    this.rootPattern = pattern;\n\n    // If no text all options are available.\n    if (text.length === 0) {\n      return {\n        pattern: null,\n        astNode: null,\n        match: null,\n        error: null,\n        tokens: {\n          startIndex: 0,\n          options: pattern.getTokens(),\n        },\n        isComplete: false,\n      };\n    }\n\n    this.parse();\n    this.saveMatchedText();\n    this.saveMatch();\n    this.saveError();\n    this.saveOptions();\n    this.saveNextToken();\n\n    return {\n      pattern: this.patternMatch.pattern,\n      astNode: this.patternMatch.astNode,\n      match: this.match,\n      error: this.error,\n      tokens: this.tokens,\n      isComplete: this.cursor.didSuccessfullyParse(),\n    };\n  }\n\n  reset() {\n    this.cursor = null;\n    this.result = null;\n    this.text = null;\n    this.match = null;\n    this.error = null;\n    this.patternMatch = null;\n    this.matchedText = \"\";\n    this.rootPattern = null;\n    this.tokens = null;\n  }\n\n  parse() {\n    this.rootPattern = this.rootPattern;\n    this.cursor = new Cursor(this.text);\n    this.cursor.startRecording();\n    this.result = this.rootPattern.parse(this.cursor);\n    this.patternMatch = this.cursor.lastMatch;\n  }\n\n  saveMatchedText() {\n    if (this.patternMatch.astNode != null) {\n      this.matchedText = this.text.substring(\n        0,\n        this.patternMatch.astNode.endIndex + 1\n      );\n    }\n  }\n\n  saveMatch() {\n    const node = this.patternMatch.astNode;\n\n    if (node == null) {\n      this.match = null;\n      return;\n    }\n\n    let endIndex = this.matchedText.length - 1;\n\n    this.match = {\n      text: this.matchedText,\n      startIndex: 0,\n      endIndex: endIndex,\n    };\n  }\n\n  saveError() {\n    if (this.patternMatch.astNode == null) {\n      this.error = {\n        startIndex: 0,\n        endIndex: this.text.length - 1,\n        text: this.text,\n      };\n      return this;\n    }\n\n    if (this.text.length > this.matchedText.length) {\n      const difference = this.text.length - this.matchedText.length;\n      const startIndex = this.patternMatch.astNode.endIndex + 1;\n      const endIndex = startIndex + difference - 1;\n\n      this.error = {\n        startIndex: startIndex,\n        endIndex: endIndex,\n        text: this.text.substring(startIndex, endIndex + 1),\n      };\n\n      return;\n    } else {\n      this.error = null;\n      return;\n    }\n  }\n\n  saveNextToken() {\n    if (\n      this.patternMatch.pattern === this.rootPattern &&\n      this.cursor.didSuccessfullyParse()\n    ) {\n      this.tokens = null;\n      return;\n    }\n\n    if (this.patternMatch.astNode == null) {\n      let options = this.rootPattern.getTokens();\n      const parts = this.text.split(\" \").filter((part) => {\n        return part.length > 0;\n      });\n\n      options = options.filter((option) => {\n        return parts.some((part) => {\n          return option.indexOf(part) > -1;\n        });\n      });\n\n      if (options.length === 0) {\n        this.tokens = null;\n        return;\n      }\n\n      this.tokens = {\n        startIndex: 0,\n        options,\n      };\n\n      return;\n    }\n\n    const options = this.options;\n    let startIndex = this.matchedText.length;\n\n    if (this.matchedText.length < this.text.length) {\n      const leftOver = this.text.substring(this.matchedText.length);\n      const partialMatchOptions = options\n        .filter((option) => {\n          return option.indexOf(leftOver) === 0;\n        })\n        .map((option) => {\n          return option.substring(leftOver.length);\n        });\n\n      if (partialMatchOptions.length === 0) {\n        this.tokens = null;\n        return;\n      } else {\n        this.match = {\n          ...this.match,\n          text: this.match.text + leftOver,\n          endIndex: this.match.endIndex + leftOver.length,\n        };\n\n        this.error = null;\n\n        this.tokens = {\n          startIndex: this.match.endIndex + 1,\n          options: partialMatchOptions,\n        };\n\n        return;\n      }\n    }\n\n    this.tokens = {\n      startIndex,\n      options,\n    };\n  }\n\n  saveOptions() {\n    const furthestMatches = this.cursor.history.astNodes.reduce(\n      (acc, node, index) => {\n        if (node.endIndex === acc.furthestTextIndex) {\n          acc.nodeIndexes.push(index);\n        } else if (node.endIndex > acc.furthestTextIndex) {\n          acc.furthestTextIndex = node.endIndex;\n          acc.nodeIndexes = [index];\n        }\n\n        return acc;\n      },\n      { furthestTextIndex: -1, nodeIndexes: [] }\n    );\n\n    const matches = furthestMatches.nodeIndexes.reduce((acc, index) => {\n      const pattern = this.cursor.history.patterns[index];\n      const tokens = pattern.getNextTokens();\n\n      tokens.forEach((token) => {\n        acc[token] = true;\n      });\n\n      return acc;\n    }, {});\n\n    this.options = Object.keys(matches);\n  }\n\n  static inspect(text, pattern) {\n    return new TextInspector().inspect(text, pattern);\n  }\n}\n"],"file":"TextInspector.js"}