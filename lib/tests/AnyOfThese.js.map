{"version":3,"sources":["../../src/tests/AnyOfThese.js"],"names":["exports","assert","throws","AnyOfThese","lowerCaseA","cursor","Cursor","node","parse","equal","name","value","startIndex","endIndex","isAtEnd","getChar","letterA","lowerCaseCursor","upperCaseCursor","lowerCaseNode","upperCaseNode","getIndex","children","length"],"mappings":"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","sourcesContent":["import AnyOfThese from \"../patterns/value/AnyOfThese.js\";\nimport Cursor from \"../Cursor.js\";\nimport assert from \"assert\";\n\nexports[\"AnyOfThese: Empty constructor.\"] = () => {\n  assert.throws(() => {\n    new AnyOfThese();\n  });\n};\n\nexports[\"AnyOfThese: No characters provided.\"] = () => {\n  assert.throws(() => {\n    new AnyOfThese(\"no-characters\");\n  });\n};\n\nexports[\"AnyOfThese: Empty string provided as characters.\"] = () => {\n  assert.throws(() => {\n    new AnyOfThese(\"no-characters\", \"\");\n  });\n};\n\nexports[\"AnyOfThese: Single character.\"] = () => {\n  const lowerCaseA = new AnyOfThese(\"lower-case-a\", \"a\");\n  const cursor = new Cursor(\"a\");\n  const node = lowerCaseA.parse(cursor);\n\n  assert.equal(node.name, \"lower-case-a\");\n  assert.equal(node.value, \"a\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 0);\n  assert.equal(cursor.isAtEnd(), true);\n  assert.equal(cursor.getChar(), \"a\");\n};\n\nexports[\"AnyOfThese: Uppercase A and lowercase A.\"] = () => {\n  const letterA = new AnyOfThese(\"letter-a\", \"Aa\");\n  const lowerCaseCursor = new Cursor(\"a\");\n  const upperCaseCursor = new Cursor(\"A\");\n  const lowerCaseNode = letterA.parse(lowerCaseCursor);\n  const upperCaseNode = letterA.parse(upperCaseCursor);\n\n  assert.equal(lowerCaseNode.name, \"letter-a\");\n  assert.equal(lowerCaseNode.value, \"a\");\n  assert.equal(lowerCaseNode.startIndex, 0);\n  assert.equal(lowerCaseNode.endIndex, 0);\n\n  assert.equal(upperCaseNode.name, \"letter-a\");\n  assert.equal(upperCaseNode.value, \"A\");\n  assert.equal(upperCaseNode.startIndex, 0);\n  assert.equal(upperCaseNode.endIndex, 0);\n\n  assert.equal(upperCaseCursor.getChar(), \"A\");\n  assert.equal(upperCaseCursor.isAtEnd(), true);\n\n  assert.equal(lowerCaseCursor.getChar(), \"a\");\n  assert.equal(lowerCaseCursor.isAtEnd(), true);\n};\n\nexports[\"AnyOfThese: Match with long cursor.\"] = () => {\n  const letterA = new AnyOfThese(\"letter-a\", \"Aa\");\n  const cursor = new Cursor(\"a12345\");\n  const node = letterA.parse(cursor);\n\n  assert.equal(node.name, \"letter-a\");\n  assert.equal(node.value, \"a\");\n  assert.equal(cursor.getChar(), \"a\");\n  assert.equal(cursor.getIndex(), 0);\n};\n\nexports[\"AnyOfThese: No match.\"] = () => {\n  const letterA = new AnyOfThese(\"letter-a\", \"Aa\");\n  const cursor = new Cursor(\"12345\");\n\n  assert.throws(() => {\n    const node = letterA.parse(cursor);\n  });\n};\n\nexports[\"AnyOfThese: Bad cursor.\"] = () => {\n  const letterA = new AnyOfThese(\"letter-a\", \"Aa\");\n\n  assert.throws(() => {\n    const node = letterA.parse();\n  });\n};\n\nexports[\"AnyOfThese: Pattern Methods.\"] = () => {\n  const letterA = new AnyOfThese(\"letter-a\", \"Aa\");\n  \n  assert.equal(letterA.name, \"letter-a\");\n  assert.equal(letterA.children.length, 0);\n\n};\n"],"file":"AnyOfThese.js"}