{"version":3,"sources":["../../src/tests/NotValue.js"],"names":["exports","assert","throws","NotValue","Literal","john","notJohn","cursor","Cursor","parse","node","equal","name","value","startIndex","endIndex","getIndex","clone"],"mappings":"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","sourcesContent":["import NotValue from \"../patterns/value/NotValue.js\";\nimport OrValue from \"../patterns/value/OrValue.js\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport assert from \"assert\";\nimport Cursor from \"../Cursor.js\";\n\nexports[\"NotValue: Empty Constructor.\"] = () => {\n  assert.throws(() => {\n    new NotValue();\n  });\n};\n\nexports[\"NotValue: Invalid name.\"] = () => {\n  assert.throws(() => {\n    new NotValue([], new Literal(\"blah\", \"Blah\"));\n  });\n};\n\nexports[\"NotValue: No patterns\"] = () => {\n  assert.throws(() => {\n    new NotValue(\"and-value\");\n  });\n};\n\nexports[\"NotValue: Empty patterns\"] = () => {\n  assert.throws(() => {\n    new NotValue(\"and-value\", null);\n  });\n};\n\nexports[\"NotValue: Invalid patterns\"] = () => {\n  assert.throws(() => {\n    new NotValue(\"and-value\", {});\n  });\n};\n\nexports[\"NotValue: No Match\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n  const cursor = new Cursor(\"John\");\n\n  assert.throws(() => {\n    notJohn.parse(cursor);\n  });\n};\n\n\nexports[\"NotValue: Success\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n  const cursor = new Cursor(\"Jane\");\n  const node = notJohn.parse(cursor);\n\n  assert.equal(node.name, \"not-john\");\n  assert.equal(node.value, \"J\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 0);\n  assert.equal(cursor.getIndex(), 0);\n};\n\nexports[\"NotValue: Bad cursor.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n\n  assert.throws(() => {\n    notJohn.parse(cursor);\n  });\n};\n\nexports[\"NotValue: Clone.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n  const clone = notJohn.clone();\n\n  assert.equal(notJohn.name, clone.name);\n};\n"],"file":"NotValue.js"}