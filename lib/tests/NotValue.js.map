{"version":3,"sources":["../../src/tests/NotValue.js"],"names":["exports","assert","throws","NotValue","Literal","john","notJohn","cursor","Cursor","parse","equal","getValue","node","type","value","startIndex","endIndex","getIndex","clone","getType","getName"],"mappings":"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","sourcesContent":["import NotValue from \"../patterns/value/NotValue.js\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport assert from \"assert\";\nimport Cursor from \"../Cursor.js\";\n\nexports[\"NotValue: Empty Constructor.\"] = () => {\n  assert.throws(() => {\n    new NotValue();\n  });\n};\n\nexports[\"NotValue: Invalid name.\"] = () => {\n  assert.throws(() => {\n    new NotValue([], new Literal(\"blah\", \"Blah\"));\n  });\n};\n\nexports[\"NotValue: No patterns\"] = () => {\n  assert.throws(() => {\n    new NotValue(\"and-value\");\n  });\n};\n\nexports[\"NotValue: Empty patterns\"] = () => {\n  assert.throws(() => {\n    new NotValue(\"and-value\", null);\n  });\n};\n\nexports[\"NotValue: Invalid patterns\"] = () => {\n  assert.throws(() => {\n    new NotValue(\"and-value\", {});\n  });\n};\n\nexports[\"NotValue: No Match\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n  const cursor = new Cursor(\"John\");\n\n  assert.throws(() => {\n    notJohn.parse(cursor);\n  });\n};\n\nexports[\"NotValue: GetValue\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n\n  assert.equal(notJohn.getValue(), null);\n};\n\nexports[\"NotValue: Success\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n  const cursor = new Cursor(\"Jane\");\n  const node = notJohn.parse(cursor);\n\n  assert.equal(node.type, \"not-john\");\n  assert.equal(node.value, \"Jane\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 3);\n};\n\nexports[\"NotValue: Success with a terminating match.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n  const cursor = new Cursor(\"JaneJohn\");\n  const node = notJohn.parse(cursor);\n\n  assert.equal(node.type, \"not-john\");\n  assert.equal(node.value, \"Jane\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 3);\n  assert.equal(cursor.getIndex(), 4);\n};\n\nexports[\"NotValue: Success with an almost terminating match.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n  const cursor = new Cursor(\"JaneJoh\");\n  const node = notJohn.parse(cursor);\n\n  assert.equal(node.type, \"not-john\");\n  assert.equal(node.value, \"JaneJoh\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 6);\n  assert.equal(cursor.getIndex(), 6);\n};\n\nexports[\"NotValue: Bad cursor.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n\n  assert.throws(() => {\n    notJohn.parse(cursor);\n  });\n};\n\nexports[\"NotValue: Clone.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const notJohn = new NotValue(\"not-john\", john);\n  const clone = notJohn.clone();\n\n  assert.equal(notJohn.getType(), clone.getType());\n  assert.equal(notJohn.getName(), clone.getName());\n};\n"],"file":"NotValue.js"}