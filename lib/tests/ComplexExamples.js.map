{"version":3,"sources":["../../src/tests/ComplexExamples.js"],"names":["exports","cursor","Cursor","node","whitespace","parse","validName","invalidName","validNode","name","assert","equal","value","hasUnresolvedError","validNumber","invalidNumber","validFraction","validExponent","singleNumber","validNumberNode","number","validFractionNode","validExponentNode","singleNumberNode","didSuccessfullyParse","testString","validString","validStringNode","string","validCursor","invalidCursor","filter","error","result","cssValue","exec"],"mappings":"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","sourcesContent":["import whitespace from \"./javascriptPatterns/whitespace.js\";\nimport name from \"./javascriptPatterns/name.js\";\nimport number from \"./javascriptPatterns/number.js\";\nimport Cursor from \"../Cursor.js\";\nimport filter from \"./naturalLanguage/filter.js\";\nimport assert from \"assert\";\nimport string from \"./javascriptPatterns/string.js\";\nimport cssValue from \"./cssPatterns/cssValue.js\"\n\nexports[\"Complex Examples: A Comment\"] = () => {\n  const cursor = new Cursor(`/*\n          This is the comment!\n      */`);\n\n  const node = whitespace.parse(cursor);\n};\n\nexports[\"Complex Examples: name\"] = () => {\n  const validName = new Cursor(\"firstName1_2\");\n  const invalidName = new Cursor(\"1_firstName\");\n  const validNode = name.parse(validName);\n\n  assert.equal(validNode.name, \"name\");\n  assert.equal(validNode.value, \"firstName1_2\");\n\n  name.parse(invalidName);\n  assert.equal(invalidName.hasUnresolvedError(), true);\n};\n\nexports[\"Complex Examples: number\"] = () => {\n  const validNumber = new Cursor(\"1234\");\n  const invalidNumber = new Cursor(\"01234\");\n  const validFraction = new Cursor(\"0.1\");\n  const validExponent = new Cursor(\"1.23e+5\");\n  const singleNumber = new Cursor(\"1\");\n\n  const validNumberNode = number.parse(validNumber);\n  const validFractionNode = number.parse(validFraction);\n  const validExponentNode = number.parse(validExponent);\n  const singleNumberNode = number.parse(singleNumber);\n\n  assert.equal(validNumberNode.name, \"number\");\n  assert.equal(validNumberNode.value, \"1234\");\n\n  assert.equal(validFractionNode.name, \"number\");\n  assert.equal(validFractionNode.value, \"0.1\");\n\n  assert.equal(validExponentNode.name, \"number\");\n  assert.equal(validExponentNode.value, \"1.23e+5\");\n  assert.equal(validExponent.didSuccessfullyParse(), true);\n\n  assert.equal(singleNumberNode.name, \"number\");\n  assert.equal(singleNumberNode.value, \"1\");\n\n  name.parse(invalidNumber);\n  assert.equal(invalidNumber.hasUnresolvedError(), true);\n};\n\nexports[\"Complex Examples: string\"] = () => {\n  const testString = `\"This is a string!.\"`;\n  const validString = new Cursor(testString);\n  const validStringNode = string.parse(validString);\n\n  assert.equal(validStringNode.name, \"string\");\n  assert.equal(validStringNode.value, testString);\n};\n\nexports[\"Complex Examples: Natural Language.\"] = () => {\n  const validCursor = new Cursor(\n    \"Match records where firstName is 'John' and lastName is 'Barnes'.\"\n  );\n  const invalidCursor = new Cursor(\"Match records where firstName \");\n  const node = filter.parse(validCursor);\n\n  try {\n    filter.parse(invalidCursor);\n  } catch (error) {}\n};\n\nexports[\"Complex Examples: cssMethod\"] = () => {\n  const result = cssValue.exec(\"linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%)\");\n};\n"],"file":"ComplexExamples.js"}