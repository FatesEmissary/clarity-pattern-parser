{"version":3,"sources":["../../src/tests/ComplexExamples.js"],"names":["exports","cursor","Cursor","node","whitespace","parse","validName","invalidName","validNode","name","assert","equal","type","value","throws","validNumber","invalidNumber","validFraction","validExponent","validNumberNode","number","validFractionNode","validExponentNode","filter"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,6BAAD,CAAP,GAAyC,MAAM;AAC7C,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAY;;SAAZ,CAAf;;AAIA,QAAMC,IAAI,GAAGC,oBAAWC,KAAX,CAAiBJ,MAAjB,CAAb;AACD,CAND;;AAQAD,OAAO,CAAC,wBAAD,CAAP,GAAoC,MAAM;AACxC,QAAMM,SAAS,GAAG,IAAIJ,eAAJ,CAAW,cAAX,CAAlB;AACA,QAAMK,WAAW,GAAG,IAAIL,eAAJ,CAAW,aAAX,CAApB;;AACA,QAAMM,SAAS,GAAGC,cAAKJ,KAAL,CAAWC,SAAX,CAAlB;;AAEAI,kBAAOC,KAAP,CAAaH,SAAS,CAACI,IAAvB,EAA6B,MAA7B;;AACAF,kBAAOC,KAAP,CAAaH,SAAS,CAACK,KAAvB,EAA8B,cAA9B;;AAEAH,kBAAOI,MAAP,CAAc,MAAM;AAClBL,kBAAKJ,KAAL,CAAWE,WAAX;AACD,GAFD;AAGD,CAXD;;AAaAP,OAAO,CAAC,0BAAD,CAAP,GAAsC,MAAM;AAC1C,QAAMe,WAAW,GAAG,IAAIb,eAAJ,CAAW,MAAX,CAApB;AACA,QAAMc,aAAa,GAAG,IAAId,eAAJ,CAAW,OAAX,CAAtB;AACA,QAAMe,aAAa,GAAG,IAAIf,eAAJ,CAAW,KAAX,CAAtB;AACA,QAAMgB,aAAa,GAAG,IAAIhB,eAAJ,CAAW,SAAX,CAAtB;;AAEA,QAAMiB,eAAe,GAAGC,gBAAOf,KAAP,CAAaU,WAAb,CAAxB;;AACA,QAAMM,iBAAiB,GAAGD,gBAAOf,KAAP,CAAaY,aAAb,CAA1B;;AACA,QAAMK,iBAAiB,GAAGF,gBAAOf,KAAP,CAAaa,aAAb,CAA1B;;AAEAR,kBAAOC,KAAP,CAAaQ,eAAe,CAACP,IAA7B,EAAmC,QAAnC;;AACAF,kBAAOC,KAAP,CAAaQ,eAAe,CAACN,KAA7B,EAAoC,MAApC;;AAEAH,kBAAOC,KAAP,CAAaU,iBAAiB,CAACT,IAA/B,EAAqC,QAArC;;AACAF,kBAAOC,KAAP,CAAaU,iBAAiB,CAACR,KAA/B,EAAsC,KAAtC;;AAEAH,kBAAOC,KAAP,CAAaW,iBAAiB,CAACV,IAA/B,EAAqC,QAArC;;AACAF,kBAAOC,KAAP,CAAaW,iBAAiB,CAACT,KAA/B,EAAsC,SAAtC;;AAEAH,kBAAOI,MAAP,CAAc,MAAM;AAClBL,kBAAKJ,KAAL,CAAWW,aAAX;AACD,GAFD;AAGD,CAtBD;;AAwBAhB,OAAO,CAAC,qCAAD,CAAP,GAAiD,MAAM;AACnD,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAW,kEAAX,CAAf;;AACA,QAAMC,IAAI,GAAGoB,gBAAOlB,KAAP,CAAaJ,MAAb,CAAb;AACH,CAHD","sourcesContent":["import whitespace from \"./javascriptPatterns/whitespace.js\";\nimport name from \"./javascriptPatterns/name.js\";\nimport number from \"./javascriptPatterns/number.js\";\nimport Cursor from \"../Cursor.js\";\nimport filter from \"./naturalLanguage/filter.js\";\nimport assert from \"assert\";\n\nexports[\"Complex Examples: A Comment\"] = () => {\n  const cursor = new Cursor(`/*\n          This is the comment!\n      */`);\n\n  const node = whitespace.parse(cursor);\n};\n\nexports[\"Complex Examples: name\"] = () => {\n  const validName = new Cursor(\"firstName1_2\");\n  const invalidName = new Cursor(\"1_firstName\");\n  const validNode = name.parse(validName);\n\n  assert.equal(validNode.type, \"name\");\n  assert.equal(validNode.value, \"firstName1_2\");\n\n  assert.throws(() => {\n    name.parse(invalidName);\n  });\n};\n\nexports[\"Complex Examples: number\"] = () => {\n  const validNumber = new Cursor(\"1234\");\n  const invalidNumber = new Cursor(\"01234\");\n  const validFraction = new Cursor(\"0.1\");\n  const validExponent = new Cursor(\"1.23e+5\");\n\n  const validNumberNode = number.parse(validNumber);\n  const validFractionNode = number.parse(validFraction);\n  const validExponentNode = number.parse(validExponent);\n\n  assert.equal(validNumberNode.type, \"number\");\n  assert.equal(validNumberNode.value, \"1234\");\n\n  assert.equal(validFractionNode.type, \"number\");\n  assert.equal(validFractionNode.value, \"0.1\");\n\n  assert.equal(validExponentNode.type, \"number\");\n  assert.equal(validExponentNode.value, \"1.23e+5\");\n\n  assert.throws(() => {\n    name.parse(invalidNumber);\n  });\n};\n\nexports[\"Complex Examples: Natural Language.\"] = () => {\n    const cursor = new Cursor(\"Match records when firstName is 'John' and lastName is 'Barnes'.\");\n    const node = filter.parse(cursor);\n};\n"],"file":"ComplexExamples.js"}