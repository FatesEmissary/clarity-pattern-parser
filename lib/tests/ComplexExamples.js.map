{"version":3,"sources":["../../src/tests/ComplexExamples.js"],"names":["exports","cursor","Cursor","node","whitespace","parse","validName","invalidName","validNode","name","assert","equal","value","throws","validNumber","invalidNumber","validFraction","validExponent","singleNumber","validNumberNode","number","validFractionNode","validExponentNode","singleNumberNode","testString","validString","validStringNode","string","validCursor","invalidCursor","filter","error"],"mappings":"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","sourcesContent":["import whitespace from \"./javascriptPatterns/whitespace.js\";\nimport name from \"./javascriptPatterns/name.js\";\nimport number from \"./javascriptPatterns/number.js\";\nimport Cursor from \"../Cursor.js\";\nimport filter from \"./naturalLanguage/filter.js\";\nimport assert from \"assert\";\nimport string from \"./javascriptPatterns/string.js\";\n\nexports[\"Complex Examples: A Comment\"] = () => {\n  const cursor = new Cursor(`/*\n          This is the comment!\n      */`);\n\n  const node = whitespace.parse(cursor);\n};\n\nexports[\"Complex Examples: name\"] = () => {\n  const validName = new Cursor(\"firstName1_2\");\n  const invalidName = new Cursor(\"1_firstName\");\n  const validNode = name.parse(validName);\n\n  assert.equal(validNode.name, \"name\");\n  assert.equal(validNode.value, \"firstName1_2\");\n\n  assert.throws(() => {\n    name.parse(invalidName);\n  });\n};\n\nexports[\"Complex Examples: number\"] = () => {\n  const validNumber = new Cursor(\"1234\");\n  const invalidNumber = new Cursor(\"01234\");\n  const validFraction = new Cursor(\"0.1\");\n  const validExponent = new Cursor(\"1.23e+5\");\n  const singleNumber = new Cursor(\"1\");\n\n  const validNumberNode = number.parse(validNumber);\n  const validFractionNode = number.parse(validFraction);\n  const validExponentNode = number.parse(validExponent);\n  const singleNumberNode = number.parse(singleNumber);\n\n  assert.equal(validNumberNode.name, \"number\");\n  assert.equal(validNumberNode.value, \"1234\");\n\n  assert.equal(validFractionNode.name, \"number\");\n  assert.equal(validFractionNode.value, \"0.1\");\n\n  assert.equal(validExponentNode.name, \"number\");\n  assert.equal(validExponentNode.value, \"1.23e+5\");\n\n  assert.equal(singleNumberNode.name, \"number\");\n  assert.equal(singleNumberNode.value, \"1\");\n\n  assert.throws(() => {\n    name.parse(invalidNumber);\n  });\n};\n\nexports[\"Complex Examples: string\"] = () => {\n  const testString = `\"This is a string!.\"`;\n  const validString = new Cursor(testString);\n  const validStringNode = string.parse(validString);\n\n  assert.equal(validStringNode.name, \"string\");\n  assert.equal(validStringNode.value, testString);\n};\n\nexports[\"Complex Examples: Natural Language.\"] = () => {\n  const validCursor = new Cursor(\n    \"Match records where firstName is 'John' and lastName is 'Barnes'.\"\n  );\n  const invalidCursor = new Cursor(\"Match records where firstName \");\n  const node = filter.parse(validCursor);\n\n  try {\n    filter.parse(invalidCursor);\n  } catch (error) {}\n};\n\nexports[\"Complex Examples: cssMethod\"] = () => {\n  const cursor = new Cursor(\n    \"linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%);\"\n  );\n};\n"],"file":"ComplexExamples.js"}