{"version":3,"sources":["../../src/tests/CssPatterns.js"],"names":["exports","cursor","Cursor","result","cssValue","parse","assert","equal","endIndex","string","length"],"mappings":"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","sourcesContent":["import cssValue from \"./cssPatterns/cssValue.js\";\nimport values from \"./cssPatterns/values.js\";\nimport { Cursor } from \"../index.js\";\nimport assert from \"assert\";\n\nexports[\"Css: unit\"] = () => {\n  const cursor = new Cursor(\"10% 10%\");\n  const result = cssValue.parse(cursor);\n};\n\nexports[\"Css: All known unit values spaced\"] = () => {\n  const cursor = new Cursor(\"10 linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%) rgba(0,0,0,1) #333 #555555 0px 0% 0deg 1em radial-gradient(at 40% 40%, rgba(187,202,218,1) 0%, rgba(187,202,218,1) 20%, rgba(187,202,218,1) 100%)\");\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: radial-gradient\"] = () => {\n  const cursor = new Cursor(\n    \"radial-gradient(at 40% 40%, rgba(187,202,218,1) 0%, rgba(187,202,218,1) 20%, rgba(187,202,218,1) 100%)\"\n  );\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: rgba\"] = () => {\n  const cursor = new Cursor(\"rgba(0,0,0,0)\");\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: method mutliple values\"] = () => {\n  const cursor = new Cursor(\"method-one(first 0px third, arg2)\");\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: nested methods\"] = () => {\n  const cursor = new Cursor(\"outer-method(inner-method(0), 0)\");\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: nested methods with trailing value\"] = () => {\n  const cursor = new Cursor(\"outer-method(inner-method(0,0), 0)\");\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: spaced values\"] = () => {\n  const cursor = new Cursor(\"method(arg1 0%, arg2, 10%) 0%\");\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: spaced values within method\"] = () => {\n  const cursor = new Cursor(\"method(inner-method(0,0,0,0) 0%, arg2, 10%)\");\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: spaced values\"] = () => {\n  const cursor = new Cursor(\n    \"inner-method(0,0,0,0) inner-method(0,0,0,0) 0px 10px 0%\"\n  );\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: complex spaced values\"] = () => {\n  const cursor = new Cursor(\n    \"#222 linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%) linear-gradient(to bottom, #555, #555 50%, #eee 75%, #555 75%)\"\n  );\n  const result = cssValue.parse(cursor);\n  assert.equal(result.endIndex, cursor.string.length - 1);\n};\n\nexports[\"Css: multiple linear gradients\"] = () => {\n    const cursor = new Cursor(\n      \"linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%), linear-gradient(to bottom, #555, #555 50%, #eee 75%, #555 75%)\"\n    );\n    const result = cssValue.parse(cursor);\n    assert.equal(result.endIndex, cursor.string.length - 1);\n  };\n"],"file":"CssPatterns.js"}