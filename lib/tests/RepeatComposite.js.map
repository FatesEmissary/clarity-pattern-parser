{"version":3,"sources":["../../src/tests/RepeatComposite.js"],"names":["exports","firstName","Literal","lastName","andComposite","AndComposite","assert","throws","RepeatComposite","OptionalComposite","fullnames","clone","equal","name"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,gDAAD,CAAP,GAA4D,YAAM;AAChE,MAAMC,SAAS,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAlB;AACA,MAAMC,QAAQ,GAAG,IAAID,gBAAJ,CAAY,KAAZ,EAAmB,KAAnB,CAAjB;AACA,MAAME,YAAY,GAAG,IAAIC,qBAAJ,CAAiB,WAAjB,EAA8B,CAACJ,SAAD,EAAYE,QAAZ,CAA9B,CAArB;;AAEAG,kBAAOC,MAAP,CAAc,YAAM;AAClB,QAAIC,wBAAJ,CAAoB,YAApB,EAAkC,IAAIC,0BAAJ,CAAsBL,YAAtB,CAAlC;AACD,GAFD;AAGD,CARD;;AAUAJ,OAAO,CAAC,0CAAD,CAAP,GAAsD,YAAM;AAC1D,MAAMC,SAAS,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAlB;AACA,MAAMC,QAAQ,GAAG,IAAID,gBAAJ,CAAY,KAAZ,EAAmB,KAAnB,CAAjB;AACA,MAAME,YAAY,GAAG,IAAIC,qBAAJ,CAAiB,WAAjB,EAA8B,CAACJ,SAAD,EAAYE,QAAZ,CAA9B,CAArB;AACA,MAAMO,SAAS,GAAG,IAAIF,wBAAJ,CAAoB,YAApB,EAAkCJ,YAAlC,CAAlB;AACA,MAAMO,KAAK,GAAGD,SAAS,CAACC,KAAV,CAAgB,cAAhB,CAAd;;AAEAL,kBAAOM,KAAP,CAAaD,KAAK,CAACE,IAAnB,EAAyB,cAAzB;AACD,CARD","sourcesContent":["import RepeatComposite from \"../patterns/composite/RepeatComposite.js\";\nimport AndComposite from \"../patterns/composite/AndComposite.js\";\nimport OptionalComposite from \"../patterns/composite/OptionalComposite.js\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport assert from \"assert\";\n\nexports[\"RepeatComposite: Cannot use optional patterns.\"] = () => {\n  const firstName = new Literal(\"John\", \"John\");\n  const lastName = new Literal(\"Doe\", \"Doe\");\n  const andComposite = new AndComposite(\"full-name\", [firstName, lastName]);\n\n  assert.throws(() => {\n    new RepeatComposite(\"full-names\", new OptionalComposite(andComposite));\n  });\n};\n\nexports[\"RepeatComposite: clone with custom name.\"] = () => {\n  const firstName = new Literal(\"John\", \"John\");\n  const lastName = new Literal(\"Doe\", \"Doe\");\n  const andComposite = new AndComposite(\"full-name\", [firstName, lastName]);\n  const fullnames = new RepeatComposite(\"full-names\", andComposite);\n  const clone = fullnames.clone(\"full-names-2\");\n\n  assert.equal(clone.name, \"full-names-2\");\n};\n"],"file":"RepeatComposite.js"}