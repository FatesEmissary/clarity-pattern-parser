{"version":3,"sources":["../../../src/tests/naturalLanguage/filter.js"],"names":["space","Literal","equalTo","notEqualTo","isGreaterThan","isLessThan","isGreaterThanOrEqualTo","isLessThanOrEqualTo","startsWith","endsWith","contains","value","OrComposite","number","string","name","operator","predicate","AndComposite","match","filter"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAGA,IAAMA,KAAK,GAAG,IAAIC,gBAAJ,CAAY,OAAZ,EAAqB,GAArB,CAAd;AACA,IAAMC,OAAO,GAAG,IAAID,gBAAJ,CAAY,GAAZ,EAAiB,IAAjB,CAAhB;AACA,IAAME,UAAU,GAAG,IAAIF,gBAAJ,CAAY,IAAZ,EAAkB,QAAlB,CAAnB;AACA,IAAMG,aAAa,GAAG,IAAIH,gBAAJ,CAAY,GAAZ,EAAiB,iBAAjB,CAAtB;AACA,IAAMI,UAAU,GAAG,IAAIJ,gBAAJ,CAAY,GAAZ,EAAiB,cAAjB,CAAnB;AACA,IAAMK,sBAAsB,GAAG,IAAIL,gBAAJ,CAAY,IAAZ,EAAkB,2BAAlB,CAA/B;AACA,IAAMM,mBAAmB,GAAG,IAAIN,gBAAJ,CAAY,IAAZ,EAAkB,6BAAlB,CAA5B;AACA,IAAMO,UAAU,GAAG,IAAIP,gBAAJ,CAAY,aAAZ,EAA2B,aAA3B,CAAnB;AACA,IAAMQ,QAAQ,GAAG,IAAIR,gBAAJ,CAAY,WAAZ,EAAyB,WAAzB,CAAjB;AACA,IAAMS,QAAQ,GAAG,IAAIT,gBAAJ,CAAY,UAAZ,EAAwB,KAAxB,CAAjB;AAEA,IAAMU,KAAK,GAAG,IAAIC,oBAAJ,CAAgB,OAAhB,EAAyB,CACnCC,eADmC,EAEnCC,eAFmC,EAGnCC,aAHmC,CAAzB,CAAd;AAMA,IAAMC,QAAQ,GAAG,IAAIJ,oBAAJ,CAAgB,UAAhB,EAA4B,CACzCV,OADyC,EAEzCC,UAFyC,EAGzCC,aAHyC,EAIzCC,UAJyC,EAKzCC,sBALyC,EAMzCC,mBANyC,EAOzCC,UAPyC,EAQzCC,QARyC,EASzCC,QATyC,CAA5B,CAAjB;AAYA,IAAMO,SAAS,GAAG,IAAIC,qBAAJ,CAAiB,WAAjB,EAA8B,CAC5CH,aAD4C,EAE5Cf,KAF4C,EAG5CgB,QAH4C,EAI5ChB,KAJ4C,EAK5CW,KAL4C,CAA9B,CAAlB;AAQA,IAAMQ,KAAK,GAAG,IAAIlB,gBAAJ,CAAY,OAAZ,EAAqB,qBAArB,CAAd;AAEA,IAAMmB,MAAM,GAAG,IAAIF,qBAAJ,CAAiB,QAAjB,EAA2B,CACtCC,KADsC,EAEtCnB,KAFsC,EAGtCiB,SAHsC,CAA3B,CAAf;eAMeG,M","sourcesContent":["import Literal from \"../../patterns/value/Literal.js\";\nimport name from \"../javascriptPatterns/name.js\";\nimport number from \"../javascriptPatterns/number.js\";\nimport string from \"../javascriptPatterns/string.js\";\nimport OrComposite from \"../../patterns/composite/OrComposite.js\";\nimport AndComposite from \"../../patterns/composite/AndComposite.js\";\n\n\nconst space = new Literal(\"space\", \" \");\nconst equalTo = new Literal(\"=\", \"is\");\nconst notEqualTo = new Literal(\"!=\", \"is not\");\nconst isGreaterThan = new Literal(\">\", \"is greater than\");\nconst isLessThan = new Literal(\"<\", \"is less than\");\nconst isGreaterThanOrEqualTo = new Literal(\">=\", \"is greater or the same as\");\nconst isLessThanOrEqualTo = new Literal(\"<=\", \"is less than or the same as\");\nconst startsWith = new Literal(\"starts-with\", \"starts with\");\nconst endsWith = new Literal(\"ends-with\", \"ends with\");\nconst contains = new Literal(\"contains\", \"has\");\n\nconst value = new OrComposite(\"value\", [\n    number,\n    string,\n    name\n]);\n\nconst operator = new OrComposite(\"operator\", [\n    equalTo,\n    notEqualTo,\n    isGreaterThan,\n    isLessThan,\n    isGreaterThanOrEqualTo,\n    isLessThanOrEqualTo,\n    startsWith,\n    endsWith,\n    contains\n]);\n\nconst predicate = new AndComposite(\"predicate\", [\n    name,\n    space,\n    operator,\n    space,\n    value\n]);\n\nconst match = new Literal(\"match\", \"Match records where\");\n\nconst filter = new AndComposite(\"filter\", [\n    match,\n    space,\n    predicate\n]);\n\nexport default filter;"],"file":"filter.js"}