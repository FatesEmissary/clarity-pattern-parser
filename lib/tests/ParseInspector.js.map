{"version":3,"sources":["../../src/tests/ParseInspector.js"],"names":["exports","text","parseStatusGenerator","ParseInspector","inspection","inspectParse","sentence","assert","equal","match","isComplete","startIndex","endIndex","error","possibilities","options","length","astNode","name","pattern"],"mappings":"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","sourcesContent":["import ParseInspector from \"../ParseInspector.js\";\nimport sentence from \"./patterns/sentence.js\";\nimport assert from \"assert\";\n\nexports[\"ParseInspector: Partial Match\"] = () => {\n  const text = \"Pat \";\n  const parseStatusGenerator = new ParseInspector();\n\n  const inspection = parseStatusGenerator.inspectParse(text, sentence);\n\n  assert.equal(inspection.match.text, \"Pat \");\n  assert.equal(inspection.isComplete, false);\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 3);\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.possibilities.startIndex, 4);\n  assert.equal(inspection.possibilities.options.length, 16);\n};\n\nexports[\"ParseInspector: Partial Match, with error.\"] = () => {\n  const text = \"Pat wzoo\";\n  const parseStatusGenerator = new ParseInspector();\n\n  const inspection = parseStatusGenerator.inspectParse(text, sentence);\n  assert.equal(inspection.possibilities, null);\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 3);\n  assert.equal(inspection.error.startIndex, 4);\n  assert.equal(inspection.error.endIndex, 7);\n  assert.equal(inspection.astNode.name, \"space\");\n  assert.equal(inspection.pattern.name, \"space\");\n};\n\nexports[\"ParseInspector: No auto complete so fallback to search.\"] = () => {\n  const text = \"bank\";\n  const parseStatusGenerator = new ParseInspector();\n\n  const inspection = parseStatusGenerator.inspectParse(text, sentence);\n\n  assert.equal(inspection.possibilities.options.length, 16);\n  assert.equal(inspection.match, null);\n  assert.equal(inspection.pattern, null);\n  assert.equal(inspection.error.startIndex, 0);\n  assert.equal(inspection.error.endIndex, 3);\n};\n\nexports[\n  \"ParseInspector: No auto complete so fallback to search with two token.\"\n] = () => {\n  const text = \"store bank\";\n  const parseStatusGenerator = new ParseInspector();\n\n  const inspection = parseStatusGenerator.inspectParse(text, sentence);\n\n  assert.equal(inspection.possibilities.options.length, 32);\n  assert.equal(inspection.match, null);\n  assert.equal(inspection.pattern, null);\n  assert.equal(inspection.error.startIndex, 0);\n  assert.equal(inspection.error.endIndex, 9);\n};\n\nexports[\"ParseInspector: Partial Half Match\"] = () => {\n  const text = \"Pat wen\";\n  const parseStatusGenerator = new ParseInspector();\n\n  const inspection = parseStatusGenerator.inspectParse(text, sentence);\n\n  assert.equal(inspection.match.text, \"Pat wen\");\n  assert.equal(inspection.isComplete, false);\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 6);\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.possibilities.startIndex, 7);\n  assert.equal(inspection.possibilities.options.length, 8);\n};\n\nexports[\"ParseInspector: Empty String\"] = () => {\n  const text = \"\";\n  const parseStatusGenerator = new ParseInspector();\n\n  const inspection = parseStatusGenerator.inspectParse(text, sentence);\n\n  assert.equal(inspection.match, null);\n  assert.equal(inspection.isComplete, false);\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.possibilities.startIndex, 0);\n  assert.equal(inspection.possibilities.options.length, 32);\n};\n\nexports[\"ParseInspector: No match with error.\"] = () => {\n  const text = \"Jared left \";\n  const parseStatusGenerator = new ParseInspector();\n\n  const inspection = parseStatusGenerator.inspectParse(text, sentence);\n  assert.equal(inspection.match, null);\n  assert.equal(inspection.isComplete, false);\n  assert.equal(inspection.error.startIndex, 0);\n  assert.equal(inspection.error.endIndex, 10);\n  assert.equal(inspection.possibilities, null);\n};\n\nexports[\"ParseInspector: Complete Match.\"] = () => {\n  const text = \"Pat went to a big store\";\n  const parseStatusGenerator = new ParseInspector();\n\n  const inspection = parseStatusGenerator.inspectParse(text, sentence);\n\n  assert.equal(inspection.match.text, \"Pat went to a big store\");\n  assert.equal(inspection.isComplete, true);\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 22);\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.possibilities, null);\n};\n"],"file":"ParseInspector.js"}