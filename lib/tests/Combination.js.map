{"version":3,"sources":["../../src/tests/Combination.js"],"names":["exports","space","Literal","carriageReturn","newLine","tab","doubleSlash","slashStar","starSlash","lineEnd","Or","anyCharacterButLineEnd","Not","anyCharacterButStarSlash","singleLineComment","And","multilineComment","whitespaceOptions","whitespace","Repeat","cursor","Cursor","node","parse"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,aAAD,CAAP,GAAyB,MAAM;AAC7B,QAAMC,KAAK,GAAG,IAAIC,gBAAJ,CAAY,OAAZ,EAAqB,GAArB,CAAd;AACA,QAAMC,cAAc,GAAG,IAAID,gBAAJ,CAAY,iBAAZ,EAA+B,IAA/B,CAAvB;AACA,QAAME,OAAO,GAAG,IAAIF,gBAAJ,CAAY,UAAZ,EAAwB,IAAxB,CAAhB;AACA,QAAMG,GAAG,GAAG,IAAIH,gBAAJ,CAAY,KAAZ,EAAmB,IAAnB,CAAZ;AACA,QAAMI,WAAW,GAAG,IAAIJ,gBAAJ,CAAY,cAAZ,EAA4B,IAA5B,CAApB;AACA,QAAMK,SAAS,GAAG,IAAIL,gBAAJ,CAAY,YAAZ,EAA0B,IAA1B,CAAlB;AACA,QAAMM,SAAS,GAAG,IAAIN,gBAAJ,CAAY,YAAZ,EAA0B,IAA1B,CAAlB;AAEA,QAAMO,OAAO,GAAG,IAAIC,WAAJ,CAAO,CAACP,cAAD,EAAiBC,OAAjB,CAAP,CAAhB;AACA,QAAMO,sBAAsB,GAAG,IAAIC,YAAJ,CAAQ,SAAR,EAAmBH,OAAnB,CAA/B;AACA,QAAMI,wBAAwB,GAAG,IAAID,YAAJ,CAAQ,SAAR,EAAmBJ,SAAnB,CAAjC;AAEA,QAAMM,iBAAiB,GAAG,IAAIC,YAAJ,CAAQ,qBAAR,EAA+B,CACvDT,WADuD,EAEvDK,sBAFuD,EAGvDF,OAHuD,CAA/B,CAA1B;AAMA,QAAMO,gBAAgB,GAAG,IAAID,YAAJ,CAAQ,mBAAR,EAA6B,CACpDR,SADoD,EAEpDM,wBAFoD,EAGpDL,SAHoD,CAA7B,CAAzB;AAMA,QAAMS,iBAAiB,GAAG,IAAIP,WAAJ,CAAO,CAC/BT,KAD+B,EAE/BQ,OAF+B,EAG/BJ,GAH+B,EAI/BS,iBAJ+B,EAK/BE,gBAL+B,CAAP,CAA1B;AAQA,QAAME,UAAU,GAAG,IAAIC,eAAJ,CAAW,YAAX,EAAyBF,iBAAzB,CAAnB;AAEA,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAY;;;;;;;SAAZ,CAAf;AASA,QAAMC,IAAI,GAAGJ,UAAU,CAACK,KAAX,CAAiBH,MAAjB,CAAb;AACD,CA7CD;;AA+CApB,OAAO,CAAC,WAAD,CAAP,GAAuB,MAAM,CAE5B,CAFD","sourcesContent":["import Literal from \"../patterns/Literal.js\";\nimport Or from \"../patterns/Or.js\";\nimport And from \"../patterns/And.js\";\nimport Not from \"../patterns/Not.js\";\nimport Cursor from \"../Cursor.js\";\nimport Repeat from \"../patterns/Repeat.js\";\nimport OneOf from \"../patterns/OneOf.js\";\nimport Any from \"../patterns/Any.js\";\nimport assert from \"assert\";\n\nexports[\"Whitespace.\"] = () => {\n  const space = new Literal(\"space\", \" \");\n  const carriageReturn = new Literal(\"carriage-return\", \"\\r\");\n  const newLine = new Literal(\"new-line\", \"\\n\");\n  const tab = new Literal(\"tab\", \"\\t\");\n  const doubleSlash = new Literal(\"double-slash\", \"//\");\n  const slashStar = new Literal(\"slash-star\", \"/*\");\n  const starSlash = new Literal(\"star-slash\", \"*/\");\n\n  const lineEnd = new Or([carriageReturn, newLine]);\n  const anyCharacterButLineEnd = new Not(\"comment\", lineEnd);\n  const anyCharacterButStarSlash = new Not(\"comment\", starSlash);\n\n  const singleLineComment = new And(\"single-line-comment\", [\n    doubleSlash,\n    anyCharacterButLineEnd,\n    lineEnd\n  ]);\n\n  const multilineComment = new And(\"multiline-comment\", [\n    slashStar,\n    anyCharacterButStarSlash,\n    starSlash\n  ]);\n\n  const whitespaceOptions = new Or([\n    space,\n    lineEnd,\n    tab,\n    singleLineComment,\n    multilineComment\n  ]);\n\n  const whitespace = new Repeat(\"whitespace\", whitespaceOptions);\n\n  const cursor = new Cursor(`\n            //This is a single line comment!\n\n            /*\n                First line!\n                Second line!\n            */\n        `);\n\n  const node = whitespace.parse(cursor);\n};\n\nexports[\"Optional.\"] = () => {\n \n};\n\n"],"file":"Combination.js"}