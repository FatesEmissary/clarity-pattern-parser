{"version":3,"sources":["../../src/tests/Combination.js"],"names":["exports","space","Literal","carriageReturn","newLine","tab","doubleSlash","slashStar","starSlash","lineEnd","Or","anyCharacterButLineEnd","Not","anyCharacterButStarSlash","singleLineComment","And","multilineComment","whitespaceOptions","whitespace","Repeat","cursor","Cursor","node","parse","number","OneOf","openParen","closeParen","letter","dash","underscore","acceptableCharacters","Any","identifier","comma","spaces","surroundWithSpace","beginWithSpace","endWithSpace","divider","notADivider","args","methodSignature"],"mappings":"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","sourcesContent":["import Literal from \"../patterns/Literal.js\";\nimport Or from \"../patterns/Or.js\";\nimport And from \"../patterns/And.js\";\nimport Not from \"../patterns/Not.js\";\nimport Cursor from \"../Cursor.js\";\nimport Repeat from \"../patterns/Repeat.js\";\nimport OneOf from \"../patterns/OneOf.js\";\nimport Any from \"../patterns/Any.js\";\nimport assert from \"assert\";\n\nexports[\"Whitespace.\"] = () => {\n  const space = new Literal(\"space\", \" \");\n  const carriageReturn = new Literal(\"carriage-return\", \"\\r\");\n  const newLine = new Literal(\"new-line\", \"\\n\");\n  const tab = new Literal(\"tab\", \"\\t\");\n  const doubleSlash = new Literal(\"double-slash\", \"//\");\n  const slashStar = new Literal(\"slash-star\", \"/*\");\n  const starSlash = new Literal(\"star-slash\", \"*/\");\n\n  const lineEnd = new Or([carriageReturn, newLine]);\n  const anyCharacterButLineEnd = new Not(\"comment\", lineEnd);\n  const anyCharacterButStarSlash = new Not(\"comment\", starSlash);\n\n  const singleLineComment = new And(\"single-line-comment\", [\n    doubleSlash,\n    anyCharacterButLineEnd,\n    lineEnd\n  ]);\n\n  const multilineComment = new And(\"multiline-comment\", [\n    slashStar,\n    anyCharacterButStarSlash,\n    starSlash\n  ]);\n\n  const whitespaceOptions = new Or([\n    space,\n    lineEnd,\n    tab,\n    singleLineComment,\n    multilineComment\n  ]);\n\n  const whitespace = new Repeat(\"whitespace\", whitespaceOptions);\n\n  const cursor = new Cursor(`\n            //This is a single line comment!\n\n            /*\n                First line!\n                Second line!\n            */\n        `);\n\n  const node = whitespace.parse(cursor);\n};\n\nexports[\"Method Invocation.\"] = () => {\n  const number = new OneOf(\"number\", \"0123456789\");\n  const openParen = new Literal(\"openParen\", \"(\");\n  const closeParen = new Literal(\"closeParen\", \")\");\n  const letter = new OneOf(\n    \"letter\",\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n  );\n  const dash = new Literal(\"dash\", \"-\");\n  const underscore = new Literal(\"underscore\", \"_\");\n  const acceptableCharacters = new Any(\"letter-number-dash-underscore\", [\n    letter,\n    number,\n    dash,\n    underscore\n  ]);\n\n  const identifier = new And(\n    \"identifier\",\n    [letter, acceptableCharacters],\n    true\n  );\n\n  const comma = new Literal(\"comma\", \",\");\n  const space = new Literal(\"space\", \" \");\n  const spaces = new Repeat(\"spaces\", space);\n  const surroundWithSpace = new And(\" , \", [spaces, comma, spaces]);\n  const beginWithSpace = new And(\" ,\", [spaces, comma]);\n  const endWithSpace = new And(\", \", [comma, spaces]);\n\n  const divider = new Any(\"comma\", [\n    comma,\n    surroundWithSpace,\n    beginWithSpace,\n    endWithSpace\n  ]);\n\n  const notADivider = new Not(\"argument\", divider);\n  const args = new Repeat(\"arguments\", notADivider, divider);\n  const methodSignature = new And(\"method-signature\", [\n    identifier,\n    openParen,\n    closeParen\n  ]);\n\n  const cursor = new Cursor(\"methodName()\");\n  const node = methodSignature.parse(cursor);\n};\n"],"file":"Combination.js"}