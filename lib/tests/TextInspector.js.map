{"version":3,"sources":["../../src/tests/TextInspector.js"],"names":["exports","text","textInspector","TextInspector","inspection","inspect","sentence","assert","equal","tokens","options"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,8BAAD,CAAP,GAA0C,YAAM;AAC9C,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AAEA,MAAMC,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;;AACAC,kBAAOC,KAAP,CAAaJ,UAAU,CAACK,MAAX,CAAkBC,OAA/B;AACD,CAND;;AAQAV,OAAO,CAAC,2CAAD,CAAP,GAAuD,YAAM;AAC3D,MAAMC,IAAI,GAAG,UAAb;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AAEA,MAAMC,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;AACD,CALD;;AAOAN,OAAO,CAAC,wDAAD,CAAP,GAAoE,YAAM;AACxE,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AAEA,MAAMC,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;AACD,CALD;;AAOAN,OAAO,CACL,uEADK,CAAP,GAEI,YAAM;AACR,MAAMC,IAAI,GAAG,YAAb;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AAEA,MAAMC,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;AACD,CAPD;;AASAN,OAAO,CAAC,mCAAD,CAAP,GAA+C,YAAM;AACnD,MAAMC,IAAI,GAAG,SAAb;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AAEA,MAAMC,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;AACD,CALD;;AAOAN,OAAO,CAAC,6BAAD,CAAP,GAAyC,YAAM;AAC7C,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AAEA,MAAMC,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;AACD,CALD;;AAOAN,OAAO,CAAC,qCAAD,CAAP,GAAiD,YAAM;AACrD,MAAMC,IAAI,GAAG,aAAb;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AAEA,MAAMC,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;AACD,CALD;;AAOAN,OAAO,CAAC,gCAAD,CAAP,GAA4C,YAAM;AAChD,MAAMC,IAAI,GAAG,yBAAb;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AAEA,MAAMC,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;AACD,CALD;;AAOAN,OAAO,CAAC,gCAAD,CAAP,GAA4C,YAAM;AAChD,MAAMC,IAAI,GAAG,yBAAb;;AACA,MAAMG,UAAU,GAAGD,uBAAcE,OAAd,CAAsBJ,IAAtB,EAA4BK,iBAA5B,CAAnB;AACD,CAHD","sourcesContent":["import TextInspector from \"../TextInspector.js\";\nimport sentence from \"./patterns/sentence.js\";\nimport assert from \"assert\";\n\nexports[\"TextInspector: Partial Match\"] = () => {\n  const text = \"Pat \";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n  assert.equal(inspection.tokens.options);\n};\n\nexports[\"TextInspector: Partial Match, with error.\"] = () => {\n  const text = \"Pat wzoo\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n};\n\nexports[\"TextInspector: No auto complete so fallback to search.\"] = () => {\n  const text = \"bank\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n};\n\nexports[\n  \"TextInspector: No auto complete so fallback to search with two token.\"\n] = () => {\n  const text = \"store bank\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n};\n\nexports[\"TextInspector: Partial Half Match\"] = () => {\n  const text = \"Pat wen\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n};\n\nexports[\"TextInspector: Empty String\"] = () => {\n  const text = \"\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n};\n\nexports[\"TextInspector: No match with error.\"] = () => {\n  const text = \"Jared left \";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n};\n\nexports[\"TextInspector: Complete Match.\"] = () => {\n  const text = \"Pat went to a big store\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n};\n\nexports[\"TextInspector: static inspect.\"] = () => {\n  const text = \"Pat went to a big store\";\n  const inspection = TextInspector.inspect(text, sentence);\n};\n"],"file":"TextInspector.js"}