{"version":3,"sources":["../../src/tests/TextInspector.js"],"names":["exports","text","textInspector","TextInspector","inspection","inspect","sentence","assert","equal","tokens","options","length","startIndex","match","error","isComplete","endIndex","pattern","show","Literal","me","theMoney","yourLicense","space","first","AndValue","second","either","OrValue","json"],"mappings":"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","sourcesContent":["import TextInspector from \"../TextInspector.js\";\nimport sentence from \"./patterns/sentence.js\";\nimport assert from \"assert\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport AndValue from \"../patterns/value/AndValue.js\";\nimport OrValue from \"../patterns/value/OrValue.js\";\nimport json from \"./javascriptPatterns/json.js\";\n\nexports[\"TextInspector: Partial Match\"] = () => {\n  const text = \"Pat \";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n  assert.equal(inspection.tokens.options.length, 2);\n  assert.equal(inspection.tokens.startIndex, 4);\n  assert.equal(inspection.match.text, \"Pat \");\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.isComplete, false);\n};\n\nexports[\"TextInspector: Partial Match, with error.\"] = () => {\n  const text = \"Pat wzoo\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n\n  assert.equal(inspection.error.startIndex, 4);\n  assert.equal(inspection.error.endIndex, 7);\n  assert.equal(inspection.error.text, \"wzoo\");\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 3);\n  assert.equal(inspection.match.text, \"Pat \");\n  assert.equal(inspection.tokens, null);\n  assert.equal(inspection.isComplete, false);\n};\n\nexports[\"TextInspector: No auto complete so fallback to search.\"] = () => {\n  const text = \"bank\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n\n  assert.equal(inspection.error.startIndex, 0);\n  assert.equal(inspection.error.endIndex, 3);\n  assert.equal(inspection.error.text, \"bank\");\n  assert.equal(inspection.tokens, null);\n  assert.equal(inspection.pattern, null);\n  assert.equal(inspection.match, null);\n  assert.equal(inspection.isComplete, false);\n};\n\nexports[\n  \"TextInspector: No auto complete so fallback to search with two token.\"\n] = () => {\n  const text = \"store bank\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n\n  assert.equal(inspection.error.startIndex, 0);\n  assert.equal(inspection.error.endIndex, 9);\n  assert.equal(inspection.error.text, \"store bank\");\n  assert.equal(inspection.tokens, null);\n  assert.equal(inspection.pattern, null);\n  assert.equal(inspection.match, null);\n  assert.equal(inspection.isComplete, false);\n};\n\nexports[\"TextInspector: Partial Half Match\"] = () => {\n  const text = \"Pat wen\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 6);\n  assert.equal(inspection.match.text, \"Pat wen\");\n  assert.equal(inspection.tokens.options.length, 1);\n  assert.equal(inspection.tokens.options[0], \"t to\");\n  assert.equal(inspection.isComplete, false);\n  assert.equal(inspection.error, null);\n};\n\nexports[\"TextInspector: Empty String\"] = () => {\n  const text = \"\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.tokens.options.length, 2);\n  assert.equal(inspection.tokens.options[0], \"Pat\");\n  assert.equal(inspection.tokens.options[1], \"Dan\");\n  assert.equal(inspection.pattern, null);\n  assert.equal(inspection.match, null);\n  assert.equal(inspection.isComplete, false);\n};\n\nexports[\"TextInspector: Complete Match.\"] = () => {\n  const text = \"Pat went to a big store\";\n  const textInspector = new TextInspector();\n\n  const inspection = textInspector.inspect(text, sentence);\n\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.tokens, null);\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 22);\n  assert.equal(inspection.match.text, \"Pat went to a big store\");\n  assert.equal(inspection.isComplete, true);\n};\n\nexports[\"TextInspector: static inspect.\"] = () => {\n  const text = \"Pat went to a big store\";\n  const inspection = TextInspector.inspect(text, sentence);\n\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.tokens, null);\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 22);\n  assert.equal(inspection.match.text, \"Pat went to a big store\");\n  assert.equal(inspection.isComplete, true);\n};\n\nexports[\"TextInspector: static inspect.\"] = () => {\n  const show = new Literal(\"show\", \"Show\");\n  const me = new Literal(\"me\", \"me\");\n  const theMoney = new Literal(\"the-money\", \"the money\");\n  const yourLicense = new Literal(\"your-license\", \"your license\");\n  const space = new Literal(\"space\", \" \");\n  const first = new AndValue(\"first\", [show, space, me, space, theMoney]);\n  const second = new AndValue(\"second\", [show, space, me, space, yourLicense]);\n  const either = new OrValue(\"either\", [first, second]);\n\n  const inspection = TextInspector.inspect(\"Show me \", either);\n\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.tokens.startIndex, 8);\n  assert.equal(inspection.tokens.options.length, 2);\n  assert.equal(inspection.tokens.options[0], \"the money\");\n  assert.equal(inspection.tokens.options[1], \"your license\");\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 7);\n  assert.equal(inspection.match.text, \"Show me \");\n  assert.equal(inspection.isComplete, false);\n};\n\nexports[\"TextInspector: json inspect.\"] = () => {\n  let inspection = TextInspector.inspect(\"{\", json);\n\n  inspection = TextInspector.inspect(`{\"blah\":`, json);\n\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.tokens.startIndex, 8);\n  assert.equal(inspection.tokens.options.length, 9);\n  assert.equal(inspection.tokens.options[0], \" \");\n  assert.equal(inspection.tokens.options[1], \"number\");\n  assert.equal(inspection.tokens.options[2], \"'\");\n  assert.equal(inspection.tokens.options[3], \"\\\"\");\n  assert.equal(inspection.tokens.options[4], \"true\");\n  assert.equal(inspection.tokens.options[5], \"false\");\n  assert.equal(inspection.tokens.options[6], \"null\");\n  assert.equal(inspection.tokens.options[7], \"{\");\n  assert.equal(inspection.tokens.options[8], \"[\");\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 7);\n  assert.equal(inspection.match.text, `{\"blah\":`);\n  assert.equal(inspection.isComplete, false);\n\n  inspection = TextInspector.inspect(`{\"blah\":{`, json);\n\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.tokens.startIndex, 9);\n  assert.equal(inspection.tokens.options.length, 4);\n  assert.equal(inspection.tokens.options[0], \" \");\n  assert.equal(inspection.tokens.options[1], \"'\");\n  assert.equal(inspection.tokens.options[2], \"\\\"\");\n  assert.equal(inspection.tokens.options[3], \"}\");\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 8);\n  assert.equal(inspection.match.text, `{\"blah\":{`);\n  assert.equal(inspection.isComplete, false);\n\n\n  inspection = TextInspector.inspect(`{\"blah\":0.9`, json);\n\n  assert.equal(inspection.error, null);\n  assert.equal(inspection.tokens.startIndex, 11);\n  assert.equal(inspection.tokens.options.length, 3);\n  assert.equal(inspection.tokens.options[0], \" \");\n  assert.equal(inspection.tokens.options[1], \",\");\n  assert.equal(inspection.tokens.options[2], \"}\");\n  assert.equal(inspection.match.startIndex, 0);\n  assert.equal(inspection.match.endIndex, 10);\n  assert.equal(inspection.match.text, `{\"blah\":0.9`);\n  assert.equal(inspection.isComplete, false);\n};\n"],"file":"TextInspector.js"}