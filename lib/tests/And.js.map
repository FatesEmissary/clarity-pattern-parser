{"version":3,"sources":["../../src/tests/And.js"],"names":["exports","cursor","Cursor","firstName","Literal","lastName","fullName","And","node","parse","assert","equal","type","children","value","isAtEnd","startIndex","lastIndex","endIndex"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,gBAAD,CAAP,GAA4B,MAAM;AAChC,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAW,SAAX,CAAf;AACA,QAAMC,SAAS,GAAG,IAAIC,gBAAJ,CAAY,YAAZ,EAA0B,MAA1B,CAAlB;AACA,QAAMC,QAAQ,GAAG,IAAID,gBAAJ,CAAY,WAAZ,EAAyB,KAAzB,CAAjB;AACA,QAAME,QAAQ,GAAG,IAAIC,YAAJ,CAAQ,WAAR,EAAqB,CAACJ,SAAD,EAAYE,QAAZ,CAArB,CAAjB;AACA,QAAMG,IAAI,GAAGF,QAAQ,CAACG,KAAT,CAAeR,MAAf,CAAb;;AAEAS,kBAAOC,KAAP,CAAaH,IAAI,CAACI,IAAlB,EAAwB,WAAxB;;AACAF,kBAAOC,KAAP,CAAaH,IAAI,CAACK,QAAL,CAAc,CAAd,EAAiBD,IAA9B,EAAoC,YAApC;;AACAF,kBAAOC,KAAP,CAAaH,IAAI,CAACK,QAAL,CAAc,CAAd,EAAiBC,KAA9B,EAAqC,MAArC;;AACAJ,kBAAOC,KAAP,CAAaH,IAAI,CAACK,QAAL,CAAc,CAAd,EAAiBD,IAA9B,EAAoC,WAApC;;AAEAF,kBAAOC,KAAP,CAAaH,IAAI,CAACK,QAAL,CAAc,CAAd,EAAiBC,KAA9B,EAAqC,KAArC;;AACAJ,kBAAOC,KAAP,CAAaV,MAAM,CAACc,OAAP,EAAb,EAA+B,IAA/B;;AACAL,kBAAOC,KAAP,CAAaH,IAAI,CAACQ,UAAlB,EAA8B,CAA9B;;AACAN,kBAAOC,KAAP,CAAaV,MAAM,CAACgB,SAAP,EAAb,EAAiCT,IAAI,CAACU,QAAtC;AACD,CAhBD;;AAkBAlB,OAAO,CAAC,qBAAD,CAAP,GAAiC,MAAM;AACrC,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAW,SAAX,CAAf;AACA,QAAMC,SAAS,GAAG,IAAIC,gBAAJ,CAAY,YAAZ,EAA0B,MAA1B,CAAlB;AACA,QAAMC,QAAQ,GAAG,IAAID,gBAAJ,CAAY,WAAZ,EAAyB,KAAzB,CAAjB;AACA,QAAME,QAAQ,GAAG,IAAIC,YAAJ,CAAQ,WAAR,EAAqB,CAACJ,SAAD,EAAYE,QAAZ,CAArB,EAA4C,IAA5C,CAAjB;AACA,QAAMG,IAAI,GAAGF,QAAQ,CAACG,KAAT,CAAeR,MAAf,CAAb;;AAEAS,kBAAOC,KAAP,CAAaH,IAAI,CAACI,IAAlB,EAAwB,WAAxB;;AACAF,kBAAOC,KAAP,CAAaH,IAAI,CAACM,KAAlB,EAAyB,SAAzB;;AACAJ,kBAAOC,KAAP,CAAaV,MAAM,CAACgB,SAAP,EAAb,EAAiCT,IAAI,CAACU,QAAtC;AACD,CAVD","sourcesContent":["import Literal from \"../patterns/Literal.js\";\nimport Cursor from \"../Cursor.js\";\nimport And from \"../patterns/And.js\";\nimport assert from \"assert\";\n\nexports[\"And: And twice\"] = () => {\n  const cursor = new Cursor(\"JohnDoe\");\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new And(\"full-name\", [firstName, lastName]);\n  const node = fullName.parse(cursor);\n\n  assert.equal(node.type, \"full-name\");\n  assert.equal(node.children[0].type, \"first-name\");\n  assert.equal(node.children[0].value, \"John\");\n  assert.equal(node.children[1].type, \"last-name\");\n\n  assert.equal(node.children[1].value, \"Doe\");\n  assert.equal(cursor.isAtEnd(), true);\n  assert.equal(node.startIndex, 0);\n  assert.equal(cursor.lastIndex(), node.endIndex);\n};\n\nexports[\"And: Twice as Value\"] = () => {\n  const cursor = new Cursor(\"JohnDoe\");\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new And(\"full-name\", [firstName, lastName], true);\n  const node = fullName.parse(cursor);\n\n  assert.equal(node.type, \"full-name\");\n  assert.equal(node.value, \"JohnDoe\");\n  assert.equal(cursor.lastIndex(), node.endIndex);\n};\n"],"file":"And.js"}