{"version":3,"sources":["../../src/tests/Pattern.js"],"names":["exports","valuePattern","Pattern","assert","throws","parse","clone","getPossibilities","undefined","parent","child","equal","firstName","Literal","lastName","fullName","AndValue","tokens","getTokens","length","children","getNextTokens","otherLastName","lastNames","OrValue","middleName","otherMiddleName","middleNames","moses","joshua","moreLastNames","edward","RepeatValue","stewart","OptionalValue"],"mappings":"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","sourcesContent":["import Pattern from \"../patterns/Pattern.js\";\nimport AndValue from \"../patterns/value/AndValue.js\";\nimport OrValue from \"../patterns/value/OrValue.js\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport RepeatValue from \"../patterns/value/RepeatValue.js\";\nimport OptionalValue from \"../patterns/value/OptionalValue.js\";\nimport assert from \"assert\";\n\nexports[\"Pattern: parse.\"] = () => {\n  const valuePattern = new Pattern(\"pattern-type\", \"pattern\");\n  assert.throws(() => {\n    valuePattern.parse();\n  });\n};\n\nexports[\"Pattern: clone.\"] = () => {\n  const valuePattern = new Pattern(\"pattern-type\", \"pattern\");\n  assert.throws(() => {\n    valuePattern.clone();\n  });\n};\n\nexports[\"Pattern: getPossibilities.\"] = () => {\n  const valuePattern = new Pattern(\"pattern-type\", \"pattern\");\n  assert.throws(() => {\n    valuePattern.getPossibilities();\n  });\n};\n\nexports[\"Pattern: limited arguments.\"] = () => {\n  new Pattern(undefined, \"name\");\n};\n\nexports[\"Pattern: no arguments.\"] = () => {\n  assert.throws(() => {\n    new Pattern();\n  });\n};\n\nexports[\"Pattern: set parent.\"] = () => {\n  const parent = new Pattern(\"pattern-type\", \"pattern\");\n  const child = new Pattern(\"pattern-type\", \"pattern\");\n\n  child.parent = parent;\n};\n\nexports[\"Pattern: set invalid parent.\"] = () => {\n  const child = new Pattern(\"pattern-type\", \"pattern\");\n  child.parent = \"\";\n\n  assert.equal(child.parent, null);\n};\n\nexports[\"Pattern: getTokens\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n\n  let tokens = firstName.getTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"John\");\n\n  tokens = lastName.getTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Doe\");\n\n  tokens = fullName.getTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"John\");\n};\n\nexports[\"Pattern: getNextToken one deep.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n\n  const tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Doe\");\n};\n\nexports[\"Pattern: getNextToken two deep.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const otherLastName = new Literal(\"other-last-name\", \"Smith\");\n  const lastNames = new OrValue(\"last-names\", [lastName, otherLastName]);\n  const fullName = new AndValue(\"full-name\", [firstName, lastNames]);\n\n  const tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Doe\");\n  assert.equal(tokens[1], \"Smith\");\n};\n\nexports[\"Pattern: getNextToken three deep.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const middleName = new Literal(\"middle-name\", \"Moses\");\n  const otherMiddleName = new Literal(\"other-middle-name\", \"Joshua\");\n  const middleNames = new OrValue(\"middle-names\", [\n    middleName,\n    otherMiddleName,\n  ]);\n  const otherLastName = new Literal(\"other-last-name\", \"Smith\");\n  const lastNames = new OrValue(\"last-names\", [lastName, otherLastName]);\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    middleNames,\n    lastNames,\n  ]);\n\n  const tokens = fullName.children[1].children[1].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Doe\");\n  assert.equal(tokens[1], \"Smith\");\n};\n\nexports[\"Pattern: getNextToken end of patterns.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const middleName = new Literal(\"middle-name\", \"Moses\");\n  const otherMiddleName = new Literal(\"other-middle-name\", \"Joshua\");\n  const middleNames = new OrValue(\"middle-names\", [\n    middleName,\n    otherMiddleName,\n  ]);\n  const otherLastName = new Literal(\"other-last-name\", \"Smith\");\n  const lastNames = new OrValue(\"last-names\", [lastName, otherLastName]);\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    middleNames,\n    lastNames,\n  ]);\n\n  const tokens = fullName.children[2].children[1].getNextTokens();\n  assert.equal(tokens.length, 0);\n};\n\nexports[\"Pattern: getNextToken end of patterns.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const moses = new Literal(\"moses\", \"Moses\");\n  const joshua = new Literal(\"other-middle-name\", \"Joshua\");\n  const moreLastNames = new OrValue(\"more-last-names\", [moses, joshua]);\n  const otherLastName = new Literal(\"other-last-name\", \"Smith\");\n  const lastNames = new OrValue(\"last-names\", [\n    moreLastNames,\n    lastName,\n    otherLastName,\n  ]);\n  const fullName = new AndValue(\"full-name\", [firstName, lastNames]);\n\n  const tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 4);\n  assert.equal(tokens[0], \"Moses\");\n  assert.equal(tokens[1], \"Joshua\");\n  assert.equal(tokens[2], \"Doe\");\n  assert.equal(tokens[3], \"Smith\");\n};\n\nexports[\"Pattern: getNextTokens, with repeat.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const edward = new Literal(\"edward\", \"Edward\");\n  const middleName = new RepeatValue(\"middle-names\", edward);\n  const lastName = new Literal(\"lastName\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, middleName, lastName]);\n\n  let tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Edward\");\n\n  tokens = fullName.children[1].children[0].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Edward\");\n  assert.equal(tokens[1], \"Doe\");\n};\n\nexports[\"Pattern: getNextTokens, with repeat and divider.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const edward = new Literal(\"edward\", \"Edward\");\n  const stewart = new Literal(\"stewart\", \"Stewart\");\n  const middleName = new RepeatValue(\"middle-names\", edward, stewart);\n  const lastName = new Literal(\"lastName\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, middleName, lastName]);\n\n  let tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Edward\");\n\n  tokens = fullName.children[1].children[0].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Stewart\");\n  assert.equal(tokens[1], \"Doe\");\n\n  tokens = fullName.children[1].children[1].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Edward\");\n  assert.equal(tokens[1], \"Doe\");\n};\n\nexports[\"Pattern: getNextTokens, has child and at the beginning.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const edward = new Literal(\"edward\", \"Edward\");\n  const stewart = new Literal(\"stewart\", \"Stewart\");\n  const middleName = new RepeatValue(\"middle-names\", edward, stewart);\n  const lastName = new Literal(\"lastName\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, middleName, lastName]);\n\n  let tokens = fullName.getTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"John\");\n};\n\nexports[\n  \"Pattern: getNextTokens, has no child and is at the beginning.\"\n] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n\n  let tokens = firstName.getTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"John\");\n};\n\nexports[\"Pattern: getNextTokens, and with optional start.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middleName = new Literal(\"middle-name\", \"Edward\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [\n    new OptionalValue(firstName),\n    middleName,\n    lastName,\n  ]);\n\n  let tokens = fullName.getTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"John\");\n  assert.equal(tokens[1], \"Edward\");\n};\n\nexports[\"Pattern: getNextTokens, and with optional middle.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middleName = new Literal(\"middle-name\", \"Edward\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    new OptionalValue(middleName),\n    lastName,\n  ]);\n\n  let tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Edward\");\n  assert.equal(tokens[1], \"Doe\");\n\n  tokens = fullName.children[1].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Doe\");\n\n  tokens = fullName.children[2].getNextTokens();\n  assert.equal(tokens.length, 0);\n};\n\nexports[\"Pattern: getNextTokens, and with optional last.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middleName = new Literal(\"middle-name\", \"Edward\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    middleName,\n    new OptionalValue(lastName),\n  ]);\n\n  let tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Edward\");\n\n  tokens = fullName.children[1].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Doe\");\n\n  tokens = fullName.children[2].getNextTokens();\n  assert.equal(tokens.length, 0);\n};\n\nexports[\"Pattern: getNextTokens, first two optional.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middleName = new Literal(\"middle-name\", \"Edward\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [\n    new OptionalValue(firstName),\n    new OptionalValue(middleName),\n    lastName,\n  ]);\n\n  let tokens = fullName.getTokens();\n  assert.equal(tokens.length, 3);\n  assert.equal(tokens[0], \"John\");\n  assert.equal(tokens[1], \"Edward\");\n  assert.equal(tokens[2], \"Doe\");\n\n  tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Edward\");\n  assert.equal(tokens[1], \"Doe\");\n\n  tokens = fullName.children[1].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Doe\");\n\n  tokens = fullName.children[2].getNextTokens();\n  assert.equal(tokens.length, 0);\n};\n\nexports[\"Pattern: getNextTokens, last two optional.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middleName = new Literal(\"middle-name\", \"Edward\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    new OptionalValue(middleName),\n    new OptionalValue(lastName),\n  ]);\n\n  let tokens = fullName.getTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"John\");\n\n  tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Edward\");\n  assert.equal(tokens[1], \"Doe\");\n\n  tokens = fullName.children[1].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Doe\");\n\n  tokens = fullName.children[2].getNextTokens();\n  assert.equal(tokens.length, 0);\n};\n\nexports[\"Pattern: getNextTokens, all three optional.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middleName = new Literal(\"middle-name\", \"Edward\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  \n  const fullName = new AndValue(\"full-name\", [\n    new OptionalValue(firstName),\n    new OptionalValue(middleName),\n    new OptionalValue(lastName),\n  ]);\n\n  let tokens = fullName.getTokens();\n  assert.equal(tokens.length, 3);\n  assert.equal(tokens[0], \"John\");\n  assert.equal(tokens[1], \"Edward\");\n  assert.equal(tokens[2], \"Doe\");\n  \n  tokens = fullName.children[0].getNextTokens();\n  assert.equal(tokens.length, 2);\n  assert.equal(tokens[0], \"Edward\");\n  assert.equal(tokens[1], \"Doe\");\n\n  tokens = fullName.children[1].getNextTokens();\n  assert.equal(tokens.length, 1);\n  assert.equal(tokens[0], \"Doe\");\n\n  tokens = fullName.children[2].getNextTokens();\n  assert.equal(tokens.length, 0);\n};\n"],"file":"Pattern.js"}