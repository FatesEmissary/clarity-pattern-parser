{"version":3,"sources":["../../src/tests/FilterNodes.js"],"names":["exports","cursor","Cursor","node","element","parse","matches","filter","value","name","assert","equal","length","every","n","children"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,kCAAD,CAAP,GAA8C,YAAM;AAClD,MAAMC,MAAM,GAAG,IAAIC,aAAJ,uCAAf;;AACA,MAAMC,IAAI,GAAGC,iBAAQC,KAAR,CAAcJ,MAAd,CAAb;;AACA,MAAMK,OAAO,GAAGH,IAAI,CAACI,MAAL,CAAY,UAAAJ,IAAI,EAAI;AAClC,WAAOA,IAAI,CAACK,KAAL,KAAe,KAAf,IAAwBL,IAAI,CAACM,IAAL,KAAc,mBAA7C;AACD,GAFe,CAAhB;;AAIAC,kBAAOC,KAAP,CAAaL,OAAO,CAACM,MAArB,EAA6B,CAA7B;;AACAF,kBAAOC,KAAP,CAAaL,OAAO,CAACO,KAAR,CAAc,UAAAC,CAAC;AAAA,WAAEA,CAAC,CAACL,IAAF,KAAW,mBAAb;AAAA,GAAf,CAAb,EAA+D,IAA/D;;AACAC,kBAAOC,KAAP,CAAaL,OAAO,CAACO,KAAR,CAAc,UAAAC,CAAC;AAAA,WAAEA,CAAC,CAACN,KAAF,KAAY,KAAd;AAAA,GAAf,CAAb,EAAkD,IAAlD;AACD,CAVD;;AAYAR,OAAO,CAAC,iCAAD,CAAP,GAA6C,YAAM;AACjD,MAAMC,MAAM,GAAG,IAAIC,aAAJ,uCAAf;;AACA,MAAMC,IAAI,GAAGC,iBAAQC,KAAR,CAAcJ,MAAd,CAAb;;AACA,MAAMK,OAAO,GAAGH,IAAI,CAACI,MAAL,CAAY,UAAAJ,IAAI,EAAI;AAClC,WACEA,IAAI,CAACM,IAAL,KAAc,SAAd,IACAN,IAAI,CAACY,QAAL,CAAc,CAAd,EAAiBN,IAAjB,KAA0B,mBAD1B,IAEAN,IAAI,CAACY,QAAL,CAAc,CAAd,EAAiBP,KAAjB,KAA2B,KAH7B;AAKD,GANe,CAAhB;;AAQAE,kBAAOC,KAAP,CAAaL,OAAO,CAACM,MAArB,EAA6B,CAA7B;;AACAF,kBAAOC,KAAP,CAAaL,OAAO,CAACO,KAAR,CAAc,UAAAC,CAAC;AAAA,WAAEA,CAAC,CAACL,IAAF,KAAW,SAAb;AAAA,GAAf,CAAb,EAAqD,IAArD;AACD,CAbD","sourcesContent":["import assert from \"assert\";\nimport element from \"./htmlPatterns/element.js\";\nimport { Cursor } from \"../index.js\";\n\nexports[\"Filter Nodes: Get open div node.\"] = () => {\n  const cursor = new Cursor(`<div><div><span></span></div></div>`);\n  const node = element.parse(cursor);\n  const matches = node.filter(node => {\n    return node.value === \"div\" && node.name === \"open-element-name\";\n  });\n\n  assert.equal(matches.length, 2);\n  assert.equal(matches.every(n=>n.name === \"open-element-name\"), true);\n  assert.equal(matches.every(n=>n.value === \"div\"), true);\n};\n\nexports[\"Filter Nodes: Get div elements.\"] = () => {\n  const cursor = new Cursor(`<div><div><span></span></div></div>`);\n  const node = element.parse(cursor);\n  const matches = node.filter(node => {\n    return (\n      node.name === \"element\" &&\n      node.children[1].name === \"open-element-name\" &&\n      node.children[1].value === \"div\"\n    );\n  });\n\n  assert.equal(matches.length, 2);\n  assert.equal(matches.every(n=>n.name === \"element\"), true);\n};\n"],"file":"FilterNodes.js"}