{"version":3,"sources":["../../src/tests/OrComposite.js"],"names":["exports","john","Literal","jane","cursor","Cursor","name","OrComposite","node","parse","assert","equal","value","getIndex","hasUnresolvedError"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,qBAAD,CAAP,GAAiC,YAAM;AACrC,MAAMC,IAAI,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,MAAMC,IAAI,GAAG,IAAID,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,MAAME,MAAM,GAAG,IAAIC,aAAJ,CAAW,MAAX,CAAf;AACA,MAAMC,IAAI,GAAG,IAAIC,oBAAJ,CAAgB,MAAhB,EAAwB,CAACN,IAAD,EAAOE,IAAP,CAAxB,CAAb;AAEA,MAAMK,IAAI,GAAGF,IAAI,CAACG,KAAL,CAAWL,MAAX,CAAb;;AAEAM,kBAAOC,KAAP,CAAaH,IAAI,CAACF,IAAlB,EAAwB,MAAxB;;AACAI,kBAAOC,KAAP,CAAaH,IAAI,CAACI,KAAlB,EAAyB,MAAzB;AACD,CAVD;;AAYAZ,OAAO,CAAC,uBAAD,CAAP,GAAmC,YAAM;AACvC,MAAMC,IAAI,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,MAAMC,IAAI,GAAG,IAAID,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,MAAME,MAAM,GAAG,IAAIC,aAAJ,CAAW,SAAX,CAAf;AACA,MAAMC,IAAI,GAAG,IAAIC,oBAAJ,CAAgB,MAAhB,EAAwB,CAACN,IAAD,EAAOE,IAAP,CAAxB,CAAb;AAEA,MAAMK,IAAI,GAAGF,IAAI,CAACG,KAAL,CAAWL,MAAX,CAAb;;AAEAM,kBAAOC,KAAP,CAAaH,IAAb,EAAmB,IAAnB;;AACAE,kBAAOC,KAAP,CAAaP,MAAM,CAACS,QAAP,EAAb,EAAgC,CAAhC;;AACAH,kBAAOC,KAAP,CAAaP,MAAM,CAACU,kBAAP,EAAb,EAA0C,IAA1C;AACD,CAXD","sourcesContent":["import OrComposite from \"../patterns/composite/OrComposite.js\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport assert from \"assert\";\nimport { Cursor } from \"../index.js\";\n\nexports[\"OrComposite: Match.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const jane = new Literal(\"jane\", \"Jane\");\n  const cursor = new Cursor(\"John\");\n  const name = new OrComposite(\"name\", [john, jane]);\n\n  const node = name.parse(cursor);\n\n  assert.equal(node.name, \"john\");\n  assert.equal(node.value, \"John\");\n};\n\nexports[\"OrComposite: No Match\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const jane = new Literal(\"jane\", \"Jane\");\n  const cursor = new Cursor(\"Jeffrey\");\n  const name = new OrComposite(\"name\", [john, jane]);\n\n  const node = name.parse(cursor);\n\n  assert.equal(node, null);\n  assert.equal(cursor.getIndex(), 0);\n  assert.equal(cursor.hasUnresolvedError(), true);\n};\n"],"file":"OrComposite.js"}