{"version":3,"sources":["../../src/tests/AndValue.js"],"names":["exports","assert","throws","AndValue","Literal","firstName","lastName","fullName","cursor","Cursor","node","parse","equal","type","value","startIndex","endIndex","clone","fullNamePatterns","getPatterns","clonePatterns","notEqual","getName","getValue"],"mappings":"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","sourcesContent":["import AndValue from \"../patterns/value/AndValue.js\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport assert from \"assert\";\nimport Cursor from \"../Cursor.js\";\n\nexports[\"AndValue: Empty Constructor.\"] = () => {\n  assert.throws(() => {\n    new AndValue();\n  });\n};\n\nexports[\"AndValue: No patterns\"] = () => {\n  assert.throws(() => {\n    new AndValue(\"and-value\");\n  });\n};\n\nexports[\"AndValue: Empty patterns\"] = () => {\n  assert.throws(() => {\n    new AndValue(\"and-value\", []);\n  });\n};\n\nexports[\"AndValue: Invalid patterns\"] = () => {\n  assert.throws(() => {\n    new AndValue(\"and-value\", [{}, []]);\n  });\n};\n\nexports[\"AndValue: One Pattern\"] = () => {\n  assert.throws(() => {\n    new AndValue(\"and-value\", [new Literal(\"literal\")]);\n  });\n};\n\nexports[\"AndValue: Success\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const cursor = new Cursor(\"JohnDoe\");\n  const node = fullName.parse(cursor);\n\n  assert.equal(node.type, \"full-name\");\n  assert.equal(node.value, \"JohnDoe\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 6);\n};\n\nexports[\"AndValue: Success with more to parse\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const cursor = new Cursor(\"JohnDoe JaneDoe\");\n  const node = fullName.parse(cursor);\n\n  assert.equal(node.type, \"full-name\");\n  assert.equal(node.value, \"JohnDoe\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 6);\n};\n\nexports[\"AndValue: Bad cursor.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n\n  assert.throws(() => {\n    fullName.parse();\n  });\n};\n\nexports[\"AndValue: Clone.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const clone = fullName.clone();\n\n  const fullNamePatterns = fullName.getPatterns();\n  const clonePatterns = clone.getPatterns();\n\n  assert.notEqual(fullNamePatterns[0], clonePatterns[0]);\n  assert.notEqual(fullNamePatterns[1], clonePatterns[1]);\n  assert.equal(fullName.getName(), clone.getName());\n  assert.equal(fullName.getValue(), clone.getValue());\n};\n"],"file":"AndValue.js"}