{"version":3,"sources":["../../src/tests/AndValue.js"],"names":["exports","assert","throws","AndValue","Literal","firstName","lastName","fullName","cursor","Cursor","node","parse","equal","name","value","startIndex","endIndex","OptionalValue","clone","fullNamePatterns","children","_cloneChildren","notEqual","possibilities","getPossibilities","length","result","type","middle"],"mappings":"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","sourcesContent":["import AndValue from \"../patterns/value/AndValue.js\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport OptionalValue from \"../patterns/value/OptionalValue.js\";\nimport Cursor from \"../Cursor.js\";\nimport assert from \"assert\";\n\nexports[\"AndValue: Empty Constructor.\"] = () => {\n  assert.throws(() => {\n    new AndValue();\n  });\n};\n\nexports[\"AndValue: No patterns\"] = () => {\n  assert.throws(() => {\n    new AndValue(\"and-value\");\n  });\n};\n\nexports[\"AndValue: Empty patterns\"] = () => {\n  assert.throws(() => {\n    new AndValue(\"and-value\", []);\n  });\n};\n\nexports[\"AndValue: Invalid patterns\"] = () => {\n  assert.throws(() => {\n    new AndValue(\"and-value\", [{}, []]);\n  });\n};\n\nexports[\"AndValue: One Pattern\"] = () => {\n  assert.throws(() => {\n    new AndValue(\"and-value\", [new Literal(\"literal\")]);\n  });\n};\n\nexports[\"AndValue: Success\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const cursor = new Cursor(\"JohnDoe\");\n  const node = fullName.parse(cursor);\n\n  assert.equal(node.name, \"full-name\");\n  assert.equal(node.value, \"JohnDoe\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 6);\n};\n\nexports[\"AndValue: First Part Match with optional Second part.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    new OptionalValue(lastName),\n  ]);\n  const cursor = new Cursor(\"John\");\n  const node = fullName.parse(cursor);\n\n  assert.equal(node.name, \"full-name\");\n  assert.equal(node.value, \"John\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 3);\n};\n\nexports[\"AndValue: First Part Match, but run out for second part.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const cursor = new Cursor(\"John\");\n  const node = fullName.parse(cursor);\n\n  assert.equal(node, null);\n};\n\nexports[\"AndValue: No Match\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const cursor = new Cursor(\"JaneDoe\");\n  const node = fullName.parse(cursor);\n\n  assert.equal(node, null);\n};\n\nexports[\"AndValue: Partial Match without optional siblings.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const cursor = new Cursor(\"JohnSmith\");\n  const node = fullName.parse(cursor);\n\n  assert.equal(node, null);\n};\n\nexports[\"AndValue: Success with more to parse\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const cursor = new Cursor(\"JohnDoe JaneDoe\");\n  const node = fullName.parse(cursor);\n\n  assert.equal(node.name, \"full-name\");\n  assert.equal(node.value, \"JohnDoe\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 6);\n};\n\nexports[\"AndValue: Bad cursor.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n\n  assert.throws(() => {\n    fullName.parse();\n  });\n};\n\nexports[\"AndValue: Clone.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const clone = fullName.clone();\n\n  const fullNamePatterns = fullName.children;\n  const _cloneChildren = clone.children;\n\n  assert.notEqual(fullNamePatterns[0], _cloneChildren[0]);\n  assert.notEqual(fullNamePatterns[1], _cloneChildren[1]);\n  assert.equal(fullName.name, clone.name);\n};\n\nexports[\"AndValue: Clone with custom name.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n  const clone = fullName.clone(\"full-name-2\");\n\n  const fullNamePatterns = fullName.children;\n  const _cloneChildren = clone.children;\n\n  assert.notEqual(fullNamePatterns[0], _cloneChildren[0]);\n  assert.notEqual(fullNamePatterns[1], _cloneChildren[1]);\n  assert.equal(clone.name, \"full-name-2\");\n};\n\nexports[\"AndValue: getPossibilities.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n\n  const possibilities = fullName.getPossibilities();\n\n  assert.equal(possibilities.length, 1);\n  assert.equal(possibilities[0], \"JohnDoe\");\n};\n\nexports[\n  \"AndValue: getPossibilities with itself being the root pattern.\"\n] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n\n  const possibilities = fullName.getPossibilities(fullName);\n\n  assert.equal(possibilities.length, 1);\n  assert.equal(possibilities[0], \"JohnDoe\");\n};\n\nexports[\"AndValue: getPossibilities with a invalid root.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [firstName, lastName]);\n\n  const possibilities = fullName.getPossibilities(\"\");\n\n  assert.equal(possibilities.length, 1);\n  assert.equal(possibilities[0], \"JohnDoe\");\n};\n\nexports[\"AndValue: Partial Match.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    new OptionalValue(lastName),\n  ]);\n  const result = fullName.parse(new Cursor(\"JohnBo\"));\n\n  assert.equal(result.type, \"and-value\");\n  assert.equal(result.name, \"full-name\");\n  assert.equal(result.value, \"John\");\n};\n\nexports[\n  \"AndValue: Partial Match with string running out, and optional last name.\"\n] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    new OptionalValue(lastName),\n  ]);\n  const result = fullName.parse(new Cursor(\"JohnDo\"));\n\n  assert.equal(result.type, \"and-value\");\n  assert.equal(result.name, \"full-name\");\n  assert.equal(result.value, \"John\");\n};\n\nexports[\"AndValue: Three parts first optional.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middle = new Literal(\"middle\", \"Smith\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n\n  const fullName = new AndValue(\"full-name\", [\n    new OptionalValue(firstName),\n    middle,\n    lastName,\n  ]);\n  const result = fullName.parse(new Cursor(\"SmithDoe\"));\n\n  assert.equal(result.value, \"SmithDoe\");\n  assert.equal(result.type, \"and-value\");\n  assert.equal(result.name, \"full-name\");\n};\n\nexports[\"AndValue: Three parts middle optional.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middle = new Literal(\"middle\", \"Smith\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    new OptionalValue(middle),\n    lastName,\n  ]);\n  const result = fullName.parse(new Cursor(\"JohnDo\"));\n\n  assert.equal(result, null);\n};\n\nexports[\"AndValue: Three parts third optional.\"] = () => {\n  const firstName = new Literal(\"first-name\", \"John\");\n  const middle = new Literal(\"middle\", \"Smith\");\n  const lastName = new Literal(\"last-name\", \"Doe\");\n\n  const fullName = new AndValue(\"full-name\", [\n    firstName,\n    middle,\n    new OptionalValue(lastName),\n  ]);\n  const result = fullName.parse(new Cursor(\"JohnSmith\"));\n\n  assert.equal(result.value, \"JohnSmith\");\n  assert.equal(result.type, \"and-value\");\n  assert.equal(result.name, \"full-name\");\n};\n"],"file":"AndValue.js"}