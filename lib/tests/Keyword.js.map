{"version":3,"sources":["../../src/tests/Keyword.js"],"names":["exports","assert","throws","Keyword","message","cursor","Cursor","keyword","value","parse","equal","getChar","next"],"mappings":";;AAAA;;AACA;;AACA;;;;;;AAEAA,OAAO,CAAC,2BAAD,CAAP,GAAuC,YAAY;AAC/CC,EAAAA,MAAM,CAACC,MAAP,CACI,MAAM;AACF,QAAIC,gBAAJ;AACH,GAHL,EAGO;AACCC,IAAAA,OAAO,EAAE;AADV,GAHP;AAOH,CARD;;AAUAJ,OAAO,CAAC,uBAAD,CAAP,GAAmC,YAAY;AAC3C,MAAIG,gBAAJ,CAAY,SAAZ;AACH,CAFD;;AAIAH,OAAO,CAAC,8BAAD,CAAP,GAA0C,YAAY;AAClD,QAAMK,MAAM,GAAG,IAAIC,eAAJ,CAAW,SAAX,CAAf;AACA,QAAMC,OAAO,GAAG,IAAIJ,gBAAJ,CAAY,SAAZ,CAAhB;AAEA,QAAMK,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAcJ,MAAd,CAAd;AAEAJ,EAAAA,MAAM,CAACS,KAAP,CAAaF,KAAb,EAAoB,SAApB;AACH,CAPD;;AASAR,OAAO,CAAC,mCAAD,CAAP,GAA+C,YAAY;AACvD,QAAMK,MAAM,GAAG,IAAIC,eAAJ,CAAW,6BAAX,CAAf;AACA,QAAMC,OAAO,GAAG,IAAIJ,gBAAJ,CAAY,SAAZ,CAAhB;AAEA,QAAMK,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAcJ,MAAd,CAAd;AAEAJ,EAAAA,MAAM,CAACS,KAAP,CAAaF,KAAb,EAAoB,SAApB;AACAP,EAAAA,MAAM,CAACS,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,GAA/B;AACH,CARD;;AAUAX,OAAO,CAAC,6BAAD,CAAP,GAAyC,YAAY;AACjD,QAAMK,MAAM,GAAG,IAAIC,eAAJ,CAAW,UAAX,CAAf;AACA,QAAMC,OAAO,GAAG,IAAIJ,gBAAJ,CAAY,SAAZ,CAAhB;AAEAE,EAAAA,MAAM,CAACO,IAAP;AACA,QAAMJ,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAcJ,MAAd,CAAd;AAEAJ,EAAAA,MAAM,CAACS,KAAP,CAAaF,KAAb,EAAoB,SAApB;AACAP,EAAAA,MAAM,CAACS,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,GAA/B;AACH,CATD;;AAWAX,OAAO,CAAC,4BAAD,CAAP,GAAwC,YAAY;AAChD,QAAMK,MAAM,GAAG,IAAIC,eAAJ,CAAW,MAAX,CAAf;AACA,QAAMC,OAAO,GAAG,IAAIJ,gBAAJ,CAAY,SAAZ,CAAhB;AAEA,QAAMK,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAcJ,MAAd,CAAd;AAEAJ,EAAAA,MAAM,CAACS,KAAP,CAAaF,KAAb,EAAoB,IAApB;AACAP,EAAAA,MAAM,CAACS,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,GAA/B;AACH,CARD;;AAUAX,OAAO,CAAC,iDAAD,CAAP,GAA6D,YAAY;AACrE,QAAMK,MAAM,GAAG,IAAIC,eAAJ,CAAW,QAAX,CAAf;AACA,QAAMC,OAAO,GAAG,IAAIJ,gBAAJ,CAAY,SAAZ,CAAhB;AAEA,QAAMK,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAcJ,MAAd,CAAd;AAEAJ,EAAAA,MAAM,CAACS,KAAP,CAAaF,KAAb,EAAoB,IAApB;AACAP,EAAAA,MAAM,CAACS,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,GAA/B;AACH,CARD","sourcesContent":["import * as assert from \"assert\";\nimport Keyword from \"../Keyword\";\nimport Cursor from \"../Cursor\";\n\nexports[\"Keyword: Bad constructor.\"] = function () {\n    assert.throws(\n        () => {\n            new Keyword();\n        }, {\n            message: \"Illegal Argument: Keyword needs to have a value that has a length greater than 0.\"\n        }\n    );\n};\n\nexports[\"Keyword: Constructor.\"] = function () {\n    new Keyword(\"Keyword\");\n};\n\nexports[\"Keyword: full match parse().\"] = function () {\n    const cursor = new Cursor(\"Keyword\");\n    const keyword = new Keyword(\"Keyword\");\n\n    const value = keyword.parse(cursor);\n\n    assert.equal(value, \"Keyword\");\n};\n\nexports[\"Keyword: beginning match parse().\"] = function () {\n    const cursor = new Cursor(\"Keyword is in the beginning\");\n    const keyword = new Keyword(\"Keyword\");\n\n    const value = keyword.parse(cursor);\n\n    assert.equal(value, \"Keyword\");\n    assert.equal(cursor.getChar(), \" \");\n};\n\nexports[\"Keyword: end match parse().\"] = function () {\n    const cursor = new Cursor(\" keyword\");\n    const keyword = new Keyword(\"keyword\");\n    \n    cursor.next();\n    const value = keyword.parse(cursor);\n\n    assert.equal(value, \"keyword\");\n    assert.equal(cursor.getChar(), \"d\");\n};\n\nexports[\"Keyword: no match parse().\"] = function () {\n    const cursor = new Cursor(\"keyw\");\n    const keyword = new Keyword(\"keyword\");\n    \n    const value = keyword.parse(cursor);\n\n    assert.equal(value, null);\n    assert.equal(cursor.getChar(), \"w\");\n};\n\nexports[\"Keyword: no match with more characters parse().\"] = function () {\n    const cursor = new Cursor(\"key wo\");\n    const keyword = new Keyword(\"keyword\");\n    \n    const value = keyword.parse(cursor);\n\n    assert.equal(value, null);\n    assert.equal(cursor.getChar(), \" \");\n};"],"file":"Keyword.js"}