{"version":3,"sources":["../../src/tests/Token.js"],"names":["exports","token","Token","cursor","Cursor","value","parse","assert","equal","getChar"],"mappings":";;AAAA;;AACA;;AACA;;;;;;AAEAA,OAAO,CAAC,qBAAD,CAAP,GAAiC,YAAY;AACzC,QAAMC,KAAK,GAAG,IAAIC,cAAJ,EAAd;AACH,CAFD;;AAIAF,OAAO,CAAC,0BAAD,CAAP,GAAsC,YAAY;AAC9C,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,GAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,GAApB;AACH,CAPD;;AASAL,OAAO,CAAC,gCAAD,CAAP,GAA4C,YAAY;AACpD,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,GAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,IAApB;AACH,CAPD;;AASAL,OAAO,CAAC,uBAAD,CAAP,GAAmC,YAAY;AAC3C,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,IAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,IAApB;AACH,CAPD;;AASAL,OAAO,CAAC,0BAAD,CAAP,GAAsC,YAAY;AAC9C,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,IAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,IAApB;AACH,CAPD;;AASAL,OAAO,CAAC,2BAAD,CAAP,GAAuC,YAAY;AAC/C,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,IAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,IAApB;AACH,CAPD;;AASAL,OAAO,CAAC,4CAAD,CAAP,GAAwD,YAAY;AAChE,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,QAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,OAApB;AACAE,EAAAA,MAAM,CAACC,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,GAA/B;AACH,CARD;;AAUAT,OAAO,CAAC,mCAAD,CAAP,GAA+C,YAAY;AACvD,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,SAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,OAApB;AACAE,EAAAA,MAAM,CAACC,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,IAA/B;AACH,CARD;;AAUAT,OAAO,CAAC,sCAAD,CAAP,GAAkD,YAAY;AAC1D,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,SAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,OAApB;AACAE,EAAAA,MAAM,CAACC,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,IAA/B;AACH,CARD;;AAUAT,OAAO,CAAC,uCAAD,CAAP,GAAmD,YAAY;AAC3D,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,SAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,OAApB;AACAE,EAAAA,MAAM,CAACC,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,IAA/B;AACH,CARD;;AAUAT,OAAO,CAAC,uBAAD,CAAP,GAAmC,YAAY;AAC3C,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,WAAX,CAAf;AACA,QAAMH,KAAK,GAAG,IAAIC,cAAJ,EAAd;AAEA,QAAMG,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYH,MAAZ,CAAd;AAEAI,EAAAA,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB,SAApB;AACAE,EAAAA,MAAM,CAACC,KAAP,CAAaL,MAAM,CAACM,OAAP,EAAb,EAA+B,IAA/B;AACH,CARD","sourcesContent":["import * as assert from \"assert\";\nimport Token from \"../Token\";\nimport Cursor from \"../Cursor\";\n\nexports[\"Token: Constructor.\"] = function () {\n    const token = new Token();\n};\n\nexports[\"Token: Single character.\"] = function () {\n    const cursor = new Cursor(\"k\");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, \"k\");\n};\n\nexports[\"Token: Single space character.\"] = function () {\n    const cursor = new Cursor(\" \");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, null);\n};\n\nexports[\"Token: Tab character.\"] = function () {\n    const cursor = new Cursor(\"\\t\");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, null);\n};\n\nexports[\"Token: Return character.\"] = function () {\n    const cursor = new Cursor(\"\\r\");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, null);\n};\n\nexports[\"Token: Newline character.\"] = function () {\n    const cursor = new Cursor(\"\\n\");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, null);\n};\n\nexports[\"Token: Single space character after token.\"] = function () {\n    const cursor = new Cursor(\"token \");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, \"token\");\n    assert.equal(cursor.getChar(), \" \");\n};\n\nexports[\"Token: Tab character after token.\"] = function () {\n    const cursor = new Cursor(\"token\\t\");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, \"token\");\n    assert.equal(cursor.getChar(), \"\\t\");\n};\n\nexports[\"Token: Return character after token.\"] = function () {\n    const cursor = new Cursor(\"token\\r\");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, \"token\");\n    assert.equal(cursor.getChar(), \"\\r\");\n};\n\nexports[\"Token: Newline character after token.\"] = function () {\n    const cursor = new Cursor(\"token\\n\");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, \"token\");\n    assert.equal(cursor.getChar(), \"\\n\");\n};\n\nexports[\"Token: Strange Token.\"] = function () {\n    const cursor = new Cursor(\"*`!@#%$\\n\");\n    const token = new Token();\n\n    const value = token.parse(cursor);\n\n    assert.equal(value, \"*`!@#%$\");\n    assert.equal(cursor.getChar(), \"\\n\");\n};\n"],"file":"Token.js"}