{"version":3,"sources":["../../src/tests/OptionalValue.js"],"names":["exports","assert","throws","OptionalValue","john","Literal","optionalValue","cursor","Cursor","node","parse","equal","type","value","getName","getType"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,mCAAD,CAAP,GAA+C,MAAM;AACnDC,kBAAOC,MAAP,CAAc,MAAM;AAClB,QAAIC,sBAAJ;AACD,GAFD;AAGD,CAJD;;AAMAH,OAAO,CAAC,+BAAD,CAAP,GAA2C,MAAM;AAC/CC,kBAAOC,MAAP,CAAc,MAAM;AAClB,QAAIC,sBAAJ;AACD,GAFD;AAGD,CAJD;;AAMAH,OAAO,CAAC,iCAAD,CAAP,GAA6C,MAAM;AACjDC,kBAAOC,MAAP,CAAc,MAAM;AAClB,QAAIC,sBAAJ,CAAkB,EAAlB;AACD,GAFD;AAGD,CAJD;;AAMAH,OAAO,CAAC,+BAAD,CAAP,GAA2C,MAAM;AAC/C,QAAMI,IAAI,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,QAAMC,aAAa,GAAG,IAAIH,sBAAJ,CAAkBC,IAAlB,CAAtB;AACA,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,MAAX,CAAf;AACA,QAAMC,IAAI,GAAGH,aAAa,CAACI,KAAd,CAAoBH,MAApB,CAAb;;AAEAN,kBAAOU,KAAP,CAAaF,IAAI,CAACG,IAAlB,EAAwB,MAAxB;;AACAX,kBAAOU,KAAP,CAAaF,IAAI,CAACI,KAAlB,EAAyB,MAAzB;AACD,CARD;;AAUAb,OAAO,CAAC,kCAAD,CAAP,GAA8C,MAAM;AAChD,QAAMI,IAAI,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,QAAMC,aAAa,GAAG,IAAIH,sBAAJ,CAAkBC,IAAlB,CAAtB;AACA,QAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,MAAX,CAAf;AACA,QAAMC,IAAI,GAAGH,aAAa,CAACI,KAAd,CAAoBH,MAApB,CAAb;;AAEAN,kBAAOU,KAAP,CAAaF,IAAb,EAAmB,IAAnB;AACD,CAPH;;AASET,OAAO,CAAC,iCAAD,CAAP,GAA6C,MAAM;AACjD,QAAMI,IAAI,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,QAAMC,aAAa,GAAG,IAAIH,sBAAJ,CAAkBC,IAAlB,CAAtB;;AAEAH,kBAAOU,KAAP,CAAaL,aAAa,CAACQ,OAAd,EAAb,EAAsCV,IAAI,CAACU,OAAL,EAAtC;;AACAb,kBAAOU,KAAP,CAAaL,aAAa,CAACS,OAAd,EAAb,EAAsCX,IAAI,CAACW,OAAL,EAAtC;AACD,CAND","sourcesContent":["import Literal from \"../patterns/value/Literal.js\";\nimport OptionalValue from \"../patterns/value/OptionalValue.js\";\nimport assert from \"assert\";\nimport Cursor from \"../Cursor.js\";\n\nexports[\"OptionalValue: Empty constructor.\"] = () => {\n  assert.throws(() => {\n    new OptionalValue();\n  });\n};\n\nexports[\"OptionalValue: Empty pattern.\"] = () => {\n  assert.throws(() => {\n    new OptionalValue();\n  });\n};\n\nexports[\"OptionalValue: Invalid pattern.\"] = () => {\n  assert.throws(() => {\n    new OptionalValue({});\n  });\n};\n\nexports[\"OptionalValue: Match pattern.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const optionalValue = new OptionalValue(john);\n  const cursor = new Cursor(\"John\");\n  const node = optionalValue.parse(cursor);\n\n  assert.equal(node.type, \"john\");\n  assert.equal(node.value, \"John\");\n};\n\nexports[\"OptionalValue: No Match pattern.\"] = () => {\n    const john = new Literal(\"john\", \"John\");\n    const optionalValue = new OptionalValue(john);\n    const cursor = new Cursor(\"Jane\");\n    const node = optionalValue.parse(cursor);\n  \n    assert.equal(node, null);\n  };\n\n  exports[\"OptionalValue: getName, getType\"] = () => {\n    const john = new Literal(\"john\", \"John\");\n    const optionalValue = new OptionalValue(john);\n  \n    assert.equal(optionalValue.getName(), john.getName());\n    assert.equal(optionalValue.getType(), john.getType());\n  };\n"],"file":"OptionalValue.js"}