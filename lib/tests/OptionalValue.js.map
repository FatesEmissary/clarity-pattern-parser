{"version":3,"sources":["../../src/tests/OptionalValue.js"],"names":["exports","assert","throws","OptionalValue","john","Literal","optionalValue","cursor","Cursor","node","parse","equal","name","value"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,mCAAD,CAAP,GAA+C,YAAM;AACnDC,kBAAOC,MAAP,CAAc,YAAM;AAClB,QAAIC,sBAAJ;AACD,GAFD;AAGD,CAJD;;AAMAH,OAAO,CAAC,+BAAD,CAAP,GAA2C,YAAM;AAC/CC,kBAAOC,MAAP,CAAc,YAAM;AAClB,QAAIC,sBAAJ;AACD,GAFD;AAGD,CAJD;;AAMAH,OAAO,CAAC,iCAAD,CAAP,GAA6C,YAAM;AACjDC,kBAAOC,MAAP,CAAc,YAAM;AAClB,QAAIC,sBAAJ,CAAkB,EAAlB;AACD,GAFD;AAGD,CAJD;;AAMAH,OAAO,CAAC,+BAAD,CAAP,GAA2C,YAAM;AAC/C,MAAMI,IAAI,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,MAAMC,aAAa,GAAG,IAAIH,sBAAJ,CAAkBC,IAAlB,CAAtB;AACA,MAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,MAAX,CAAf;AACA,MAAMC,IAAI,GAAGH,aAAa,CAACI,KAAd,CAAoBH,MAApB,CAAb;;AAEAN,kBAAOU,KAAP,CAAaF,IAAI,CAACG,IAAlB,EAAwB,MAAxB;;AACAX,kBAAOU,KAAP,CAAaF,IAAI,CAACI,KAAlB,EAAyB,MAAzB;AACD,CARD;;AAUAb,OAAO,CAAC,kCAAD,CAAP,GAA8C,YAAM;AAClD,MAAMI,IAAI,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,MAAMC,aAAa,GAAG,IAAIH,sBAAJ,CAAkBC,IAAlB,CAAtB;AACA,MAAMG,MAAM,GAAG,IAAIC,eAAJ,CAAW,MAAX,CAAf;AACA,MAAMC,IAAI,GAAGH,aAAa,CAACI,KAAd,CAAoBH,MAApB,CAAb;;AAEAN,kBAAOU,KAAP,CAAaF,IAAb,EAAmB,IAAnB;AACD,CAPD;;AASAT,OAAO,CAAC,qBAAD,CAAP,GAAiC,YAAM;AACrC,MAAMI,IAAI,GAAG,IAAIC,gBAAJ,CAAY,MAAZ,EAAoB,MAApB,CAAb;AACA,MAAMC,aAAa,GAAG,IAAIH,sBAAJ,CAAkBC,IAAlB,CAAtB;;AAEAH,kBAAOU,KAAP,CAAaL,aAAa,CAACM,IAA3B,EAAiC,gBAAjC;AACD,CALD","sourcesContent":["import Literal from \"../patterns/value/Literal.js\";\nimport OptionalValue from \"../patterns/value/OptionalValue.js\";\nimport assert from \"assert\";\nimport Cursor from \"../Cursor.js\";\n\nexports[\"OptionalValue: Empty constructor.\"] = () => {\n  assert.throws(() => {\n    new OptionalValue();\n  });\n};\n\nexports[\"OptionalValue: Empty pattern.\"] = () => {\n  assert.throws(() => {\n    new OptionalValue();\n  });\n};\n\nexports[\"OptionalValue: Invalid pattern.\"] = () => {\n  assert.throws(() => {\n    new OptionalValue({});\n  });\n};\n\nexports[\"OptionalValue: Match pattern.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const optionalValue = new OptionalValue(john);\n  const cursor = new Cursor(\"John\");\n  const node = optionalValue.parse(cursor);\n\n  assert.equal(node.name, \"john\");\n  assert.equal(node.value, \"John\");\n};\n\nexports[\"OptionalValue: No Match pattern.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const optionalValue = new OptionalValue(john);\n  const cursor = new Cursor(\"Jane\");\n  const node = optionalValue.parse(cursor);\n\n  assert.equal(node, null);\n};\n\nexports[\"OptionalValue: Name\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const optionalValue = new OptionalValue(john);\n\n  assert.equal(optionalValue.name, \"optional-value\");\n};\n"],"file":"OptionalValue.js"}