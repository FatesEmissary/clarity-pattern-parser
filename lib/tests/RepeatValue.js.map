{"version":3,"sources":["../../src/tests/RepeatValue.js"],"names":["exports","assert","throws","RepeatValue","Literal","john","johns","cursor","Cursor","parse","node","equal","type","value","startIndex","endIndex","getIndex","clone","name","OptionalValue"],"mappings":"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","sourcesContent":["import RepeatValue from \"../patterns/value/RepeatValue.js\";\nimport Literal from \"../patterns/value/Literal.js\";\nimport OptionalValue from \"../patterns/value/OptionalValue.js\";\nimport assert from \"assert\";\nimport Cursor from \"../Cursor.js\";\n\nexports[\"RepeatValue: Empty Constructor.\"] = () => {\n  assert.throws(() => {\n    new RepeatValue();\n  });\n};\n\nexports[\"RepeatValue: Invalid name.\"] = () => {\n  assert.throws(() => {\n    new RepeatValue([], new Literal(\"blah\", \"Blah\"));\n  });\n};\n\nexports[\"RepeatValue: No patterns\"] = () => {\n  assert.throws(() => {\n    new RepeatValue(\"and-value\");\n  });\n};\n\nexports[\"RepeatValue: Empty patterns\"] = () => {\n  assert.throws(() => {\n    new RepeatValue(\"and-value\", null);\n  });\n};\n\nexports[\"RepeatValue: Invalid patterns\"] = () => {\n  assert.throws(() => {\n    new RepeatValue(\"and-value\", {});\n  });\n};\n\nexports[\"RepeatValue: No Match\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const johns = new RepeatValue(\"johns\", john);\n  const cursor = new Cursor(\"JaneJane\");\n\n  assert.throws(() => {\n    johns.parse(cursor);\n  });\n};\n\nexports[\"RepeatValue: Success, one John\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const johns = new RepeatValue(\"johns\", john);\n  const cursor = new Cursor(\"John\");\n  const node = johns.parse(cursor);\n\n  assert.equal(node.type, \"johns\");\n  assert.equal(node.value, \"John\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 3);\n};\n\nexports[\"RepeatValue: Success with a terminating match.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const johns = new RepeatValue(\"johns\", john);\n  const cursor = new Cursor(\"JohnJohnJane\");\n  const node = johns.parse(cursor);\n\n  assert.equal(node.type, \"johns\");\n  assert.equal(node.value, \"JohnJohn\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 7);\n  assert.equal(cursor.getIndex(), 8);\n};\n\nexports[\"RepeatValue: Bad cursor.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const johns = new RepeatValue(\"johns\", john);\n\n  assert.throws(() => {\n    johns.parse(cursor);\n  });\n};\n\nexports[\"RepeatValue: Clone.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n  const johns = new RepeatValue(\"johns\", john);\n  const clone = johns.clone();\n\n  assert.equal(johns.name, clone.name);\n};\n\nexports[\"RepeatValue: Try Optional.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n\n  assert.throws(() => {\n    new RepeatValue(\"johns\", new OptionalValue(john));\n  });\n};\n"],"file":"RepeatValue.js"}