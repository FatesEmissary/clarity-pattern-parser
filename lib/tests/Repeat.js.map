{"version":3,"sources":["../../src/tests/Repeat.js"],"names":["exports","cursor","Cursor","literal","Literal","repetition","Repeat","node","parse","assert","equal","type","children","value","name","comma","dividerParser"],"mappings":"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","sourcesContent":["import Literal from \"../patterns/Literal.js\";\nimport Cursor from \"../Cursor.js\";\nimport Repeat from \"../patterns/Repeat.js\";\nimport assert from \"assert\";\n\nexports[\"Repeat Literal twice.\"] = () => {\n  const cursor = new Cursor(\"JohnJohn\");\n  const literal = new Literal(\"name\", \"John\");\n  const repetition = new Repeat(\"stutter\", literal);\n  const node = repetition.parse(cursor);\n\n  assert.equal(node.type, \"stutter\");\n  assert.equal(node.children[0].type, \"name\");\n  assert.equal(node.children[0].value, \"John\");\n  assert.equal(node.children[1].type, \"name\");\n  assert.equal(node.children[1].value, \"John\");\n};\n\nexports[\"Repeat Literal twice with divider.\"] = () => {\n  const cursor = new Cursor(\"John,John\");\n  const name = new Literal(\"name\", \"John\");\n  const comma = new Literal(\"comma\", \",\");\n  const repetition = new Repeat(\"stutter\", name, { dividerParser: comma });\n  const node = repetition.parse(cursor);\n\n  assert.equal(node.type, \"stutter\");\n  assert.equal(node.children[0].type, \"name\");\n  assert.equal(node.children[0].value, \"John\");\n  assert.equal(node.children[1].type, \"comma\");\n  assert.equal(node.children[1].value, \",\");\n  assert.equal(node.children[2].type, \"name\");\n  assert.equal(node.children[2].value, \"John\");\n};\n\nexports[\"Repeat Literal three with divider.\"] = () => {\n  const cursor = new Cursor(\"John,John,John\");\n  const name = new Literal(\"name\", \"John\");\n  const comma = new Literal(\"comma\", \",\");\n  const repetition = new Repeat(\"stutter\", name, { dividerParser: comma });\n  const node = repetition.parse(cursor);\n\n  assert.equal(node.type, \"stutter\");\n  assert.equal(node.children[0].type, \"name\");\n  assert.equal(node.children[0].value, \"John\");\n  assert.equal(node.children[1].type, \"comma\");\n  assert.equal(node.children[1].value, \",\");\n  assert.equal(node.children[2].type, \"name\");\n  assert.equal(node.children[2].value, \"John\");\n  assert.equal(node.children[3].type, \"comma\");\n  assert.equal(node.children[3].value, \",\");\n  assert.equal(node.children[4].type, \"name\");\n  assert.equal(node.children[4].value, \"John\");\n};\n\nexports[\"Repeat Literal three with trailing divider.\"] = () => {\n  const cursor = new Cursor(\"John,John,John,\");\n  const name = new Literal(\"name\", \"John\");\n  const comma = new Literal(\"comma\", \",\");\n  const repetition = new Repeat(\"stutter\", name, { dividerParser: comma });\n  const node = repetition.parse(cursor);\n\n  assert.equal(node.type, \"stutter\");\n  assert.equal(node.children[0].type, \"name\");\n  assert.equal(node.children[0].value, \"John\");\n  assert.equal(node.children[1].type, \"comma\");\n  assert.equal(node.children[1].value, \",\");\n  assert.equal(node.children[2].type, \"name\");\n  assert.equal(node.children[2].value, \"John\");\n  assert.equal(node.children[3].type, \"comma\");\n  assert.equal(node.children[3].value, \",\");\n  assert.equal(node.children[4].type, \"name\");\n  assert.equal(node.children[4].value, \"John\");\n  assert.equal(node.children[5].type, \"comma\");\n  assert.equal(node.children[5].value, \",\");\n};\n"],"file":"Repeat.js"}