{"version":3,"sources":["../../src/tests/CompositeNode.js"],"names":["exports","node","CompositeNode","valueNode","ValueNode","children","push","clone","assert","equal","type","name","length"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,sBAAD,CAAP,GAAkC,YAAM;AACtC,MAAMC,IAAI,GAAG,IAAIC,sBAAJ,CAAkB,MAAlB,EAA0B,MAA1B,EAAkC,CAAlC,EAAqC,CAArC,CAAb;AACA,MAAMC,SAAS,GAAG,IAAIC,gBAAJ,CAAc,YAAd,EAA4B,YAA5B,EAA0C,GAA1C,EAA+C,CAA/C,EAAkD,CAAlD,CAAlB;AAEAH,EAAAA,IAAI,CAACI,QAAL,CAAcC,IAAd,CAAmBH,SAAnB;AAEA,MAAMI,KAAK,GAAGN,IAAI,CAACM,KAAL,EAAd;;AAEAC,kBAAOC,KAAP,CAAaF,KAAK,CAACG,IAAnB,EAAyB,MAAzB;;AACAF,kBAAOC,KAAP,CAAaF,KAAK,CAACI,IAAnB,EAAyB,MAAzB;;AACAH,kBAAOC,KAAP,CAAaF,KAAK,CAACF,QAAN,CAAeO,MAA5B,EAAoC,CAApC;;AACAJ,kBAAOC,KAAP,CAAaF,KAAK,CAACF,QAAN,CAAe,CAAf,EAAkBK,IAA/B,EAAqC,YAArC;;AACAF,kBAAOC,KAAP,CAAaF,KAAK,CAACF,QAAN,CAAe,CAAf,EAAkBM,IAA/B,EAAqC,YAArC;AACD,CAbD;;AAeAX,OAAO,CAAC,qDAAD,CAAP,GAAiE,YAAM;AACrE,MAAMC,IAAI,GAAG,IAAIC,sBAAJ,CAAkB,MAAlB,EAA0B,MAA1B,CAAb;AACA,MAAMC,SAAS,GAAG,IAAIC,gBAAJ,CAAc,YAAd,EAA4B,YAA5B,EAA0C,GAA1C,EAA+C,CAA/C,EAAkD,CAAlD,CAAlB;AAEAH,EAAAA,IAAI,CAACI,QAAL,CAAcC,IAAd,CAAmBH,SAAnB;;AAEAK,kBAAOC,KAAP,CAAaR,IAAI,CAACS,IAAlB,EAAwB,MAAxB;;AACAF,kBAAOC,KAAP,CAAaR,IAAI,CAACU,IAAlB,EAAwB,MAAxB;;AACAH,kBAAOC,KAAP,CAAaR,IAAI,CAACI,QAAL,CAAcO,MAA3B,EAAmC,CAAnC;;AACAJ,kBAAOC,KAAP,CAAaR,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiBK,IAA9B,EAAoC,YAApC;;AACAF,kBAAOC,KAAP,CAAaR,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiBM,IAA9B,EAAoC,YAApC;AACD,CAXD","sourcesContent":["import CompositeNode from \"../ast/CompositeNode.js\";\nimport assert from \"assert\";\nimport { ValueNode } from \"../index.js\";\n\nexports[\"CompositeNode: clone\"] = () => {\n  const node = new CompositeNode(\"type\", \"name\", 0, 0);\n  const valueNode = new ValueNode(\"value-type\", \"value-name\", \"t\", 0, 0);\n\n  node.children.push(valueNode);\n\n  const clone = node.clone();\n\n  assert.equal(clone.type, \"type\");\n  assert.equal(clone.name, \"name\");\n  assert.equal(clone.children.length, 1);\n  assert.equal(clone.children[0].type, \"value-type\");\n  assert.equal(clone.children[0].name, \"value-name\");\n};\n\nexports[\"CompositeNode: constructor without default indexes.\"] = () => {\n  const node = new CompositeNode(\"type\", \"name\");\n  const valueNode = new ValueNode(\"value-type\", \"value-name\", \"t\", 0, 0);\n\n  node.children.push(valueNode);\n\n  assert.equal(node.type, \"type\");\n  assert.equal(node.name, \"name\");\n  assert.equal(node.children.length, 1);\n  assert.equal(node.children[0].type, \"value-type\");\n  assert.equal(node.children[0].name, \"value-name\");\n};\n"],"file":"CompositeNode.js"}