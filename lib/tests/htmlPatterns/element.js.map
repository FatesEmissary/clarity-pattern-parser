{"version":3,"sources":["../../../src/tests/htmlPatterns/element.js"],"names":["attributeName","RegexValue","doubleQuote","Literal","greaterThan","lessThan","forwardSlash","equal","spaces","optionalSpaces","OptionalValue","value","attribute","AndComposite","attributes","RepeatComposite","optionalAttributes","OptionalComposite","elementName","text","recursiveElement","RecursivePattern","elementContent","OrComposite","element","clone"],"mappings":";;;;;;;AAAA;;AAcA,IAAMA,aAAa,GAAG,IAAIC,iBAAJ,CACpB,gBADoB,EAEpB,0BAFoB,CAAtB;AAKA,IAAMC,WAAW,GAAG,IAAIC,cAAJ,CAAY,cAAZ,EAA4B,GAA5B,CAApB;AACA,IAAMC,WAAW,GAAG,IAAID,cAAJ,CAAY,cAAZ,EAA4B,GAA5B,CAApB;AACA,IAAME,QAAQ,GAAG,IAAIF,cAAJ,CAAY,WAAZ,EAAyB,GAAzB,CAAjB;AACA,IAAMG,YAAY,GAAG,IAAIH,cAAJ,CAAY,eAAZ,EAA6B,GAA7B,CAArB;AACA,IAAMI,KAAK,GAAG,IAAIJ,cAAJ,CAAY,OAAZ,EAAqB,GAArB,CAAd;AACA,IAAMK,MAAM,GAAG,IAAIP,iBAAJ,CAAe,GAAf,EAAoB,MAApB,CAAf;AACA,IAAMQ,cAAc,GAAG,IAAIC,oBAAJ,CAAkBF,MAAlB,CAAvB;AAEA,IAAMG,KAAK,GAAG,IAAIV,iBAAJ,CAAe,OAAf,EAAwB,OAAxB,CAAd;AAEO,IAAMW,SAAS,GAAG,IAAIC,mBAAJ,CAAiB,WAAjB,EAA8B,CACrDb,aADqD,EAErDO,KAFqD,EAGrDL,WAHqD,EAIrDS,KAJqD,EAKrDT,WALqD,CAA9B,CAAlB;;AAOP,IAAMY,UAAU,GAAG,IAAIC,sBAAJ,CAAoB,YAApB,EAAkCH,SAAlC,EAA6CJ,MAA7C,CAAnB;AACA,IAAMQ,kBAAkB,GAAG,IAAIC,wBAAJ,CAAsBH,UAAtB,CAA3B;AAEA,IAAMI,WAAW,GAAG,IAAIjB,iBAAJ,CAAe,cAAf,EAA+B,qBAA/B,CAApB;AACA,IAAMkB,IAAI,GAAG,IAAIlB,iBAAJ,CAAe,MAAf,EAAuB,QAAvB,CAAb;AACA,IAAMmB,gBAAgB,GAAG,IAAIC,uBAAJ,CAAqB,SAArB,CAAzB;AAEA,IAAMC,cAAc,GAAG,IAAIP,sBAAJ,CACrB,UADqB,EAErB,IAAIQ,kBAAJ,CAAgB,SAAhB,EAA2B,CAACJ,IAAD,EAAOC,gBAAP,CAA3B,CAFqB,CAAvB;AAKA,IAAMI,OAAO,GAAG,IAAIX,mBAAJ,CAAiB,SAAjB,EAA4B,CAC1CR,QAD0C,EAE1Ca,WAAW,CAACO,KAAZ,CAAkB,mBAAlB,CAF0C,EAG1ChB,cAH0C,EAI1CO,kBAJ0C,EAK1CP,cAL0C,EAM1CL,WAN0C,EAO1C,IAAIa,wBAAJ,CAAsBK,cAAtB,CAP0C,EAQ1CjB,QAR0C,EAS1CC,YAT0C,EAU1CY,WAAW,CAACO,KAAZ,CAAkB,oBAAlB,CAV0C,EAW1ChB,cAX0C,EAY1CL,WAZ0C,CAA5B,CAAhB;eAeeoB,O","sourcesContent":["import {\n  Literal,\n  OptionalValue,\n  AndValue,\n  OrValue,\n  AndComposite,\n  OrComposite,\n  RegexValue,\n  NotValue,\n  RepeatComposite,\n  RecursivePattern,\n  OptionalComposite\n} from \"../../index\";\n\nconst attributeName = new RegexValue(\n  \"attribute-name\",\n  \"[a-zA-Z_:]+[a-zA-Z0-9_]*\"\n);\n\nconst doubleQuote = new Literal(\"double-quote\", '\"');\nconst greaterThan = new Literal(\"greater-than\", \">\");\nconst lessThan = new Literal(\"less-than\", \"<\");\nconst forwardSlash = new Literal(\"forward-slash\", \"/\");\nconst equal = new Literal(\"equal\", \"=\");\nconst spaces = new RegexValue(\" \", \"\\\\s+\");\nconst optionalSpaces = new OptionalValue(spaces);\n\nconst value = new RegexValue(\"value\", '[^\"]+');\n\nexport const attribute = new AndComposite(\"attribute\", [\n  attributeName,\n  equal,\n  doubleQuote,\n  value,\n  doubleQuote\n]);\nconst attributes = new RepeatComposite(\"attributes\", attribute, spaces);\nconst optionalAttributes = new OptionalComposite(attributes);\n\nconst elementName = new RegexValue(\"element-name\", \"[a-zA-Z]+[a-zA-Z-]*\");\nconst text = new RegexValue(\"text\", \"[^<>]+\");\nconst recursiveElement = new RecursivePattern(\"element\");\n\nconst elementContent = new RepeatComposite(\n  \"children\",\n  new OrComposite(\"content\", [text, recursiveElement])\n);\n\nconst element = new AndComposite(\"element\", [\n  lessThan,\n  elementName.clone(\"open-element-name\"),\n  optionalSpaces,\n  optionalAttributes,\n  optionalSpaces,\n  greaterThan,\n  new OptionalComposite(elementContent),\n  lessThan,\n  forwardSlash,\n  elementName.clone(\"close-element-name\"),\n  optionalSpaces,\n  greaterThan\n]);\n\nexport default element;\n"],"file":"element.js"}