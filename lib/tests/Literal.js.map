{"version":3,"sources":["../../src/tests/Literal.js"],"names":["exports","cursor","Cursor","literal","Literal","node","parse","assert","equal","value","type","startIndex","endIndex","lastIndex","getIndex","getChar"],"mappings":"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","sourcesContent":["import Literal from \"../patterns/Literal.js\";\nimport Cursor from \"../Cursor.js\";\nimport assert from \"assert\";\n\nexports[\"Literal: One character, Exact.\"] = () => {\n  const cursor = new Cursor(\"2\");\n  const literal = new Literal(\"two\", \"2\");\n  const node = literal.parse(cursor);\n\n  assert.equal(node.value, \"2\");\n  assert.equal(node.type, \"two\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 0);\n  assert.equal(cursor.lastIndex(), 0);\n};\n\nexports[\"Literal: Two characters, Exact.\"] = () => {\n  const cursor = new Cursor(\"20\");\n  const literal = new Literal(\"twenty\", \"20\");\n  const node = literal.parse(cursor);\n\n  assert.equal(node.value, \"20\");\n  assert.equal(node.type, \"twenty\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 1);\n  assert.equal(cursor.lastIndex(), 1);\n};\n\nexports[\"Literal: One character, Within.\"] = () => {\n  const cursor = new Cursor(\"200\");\n  const literal = new Literal(\"two\", \"2\");\n  const node = literal.parse(cursor);\n\n  assert.equal(node.value, \"2\");\n  assert.equal(node.type, \"two\");\n  assert.equal(cursor.getIndex(), 1);\n  assert.equal(cursor.getChar(), \"0\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 0);\n  assert.equal(cursor.lastIndex(), 2);\n};\n\nexports[\"Literal: Two characters, Within.\"] = () => {\n  const cursor = new Cursor(\"200\");\n  const literal = new Literal(\"twenty\", \"20\");\n  const node = literal.parse(cursor);\n\n  assert.equal(node.value, \"20\");\n  assert.equal(node.type, \"twenty\");\n  assert.equal(cursor.getIndex(), 2);\n  assert.equal(cursor.getChar(), \"0\");\n  assert.equal(node.startIndex, 0);\n  assert.equal(node.endIndex, 1);\n  assert.equal(cursor.lastIndex(), 2);\n};\n"],"file":"Literal.js"}