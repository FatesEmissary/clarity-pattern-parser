{"version":3,"sources":["../../src/tests/Literal.js"],"names":["exports","assert","throws","Literal","john","result","exec","result2","expectedValue","type","name","startIndex","endIndex","value","equal","JSON","stringify","variable","cursor","Cursor","node","parse","getIndex","getChar","isAtEnd","hasUnresolvedError","clone","children","length"],"mappings":"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","sourcesContent":["import Literal from \"../patterns/value/Literal.js\";\nimport Cursor from \"../Cursor.js\";\nimport assert from \"assert\";\n\nexports[\"Literal: Empty constructor.\"] = () => {\n  assert.throws(() => {\n    new Literal();\n  });\n};\n\nexports[\"Literal: Undefined literal.\"] = () => {\n  assert.throws(() => {\n    new Literal(\"literal\");\n  });\n};\n\nexports[\"Literal: Null literal.\"] = () => {\n  assert.throws(() => {\n    new Literal(\"literal\", null);\n  });\n};\n\nexports[\"Literal: Empty literal.\"] = () => {\n  assert.throws(() => {\n    new Literal(\"literal\", \"\");\n  });\n};\n\nexports[\"Literal: exec.\"] = () => {\n  const john = new Literal(\"john\", \"John\");\n\n  const result = john.exec(\"John\");\n  const result2 = john.exec(\"Jane\");\n\n  const expectedValue = {\n    type: \"literal\",\n    name: \"john\",\n    startIndex: 0,\n    endIndex: 3,\n    value: \"John\"\n  };\n\n  assert.equal(JSON.stringify(result), JSON.stringify(expectedValue));\n  assert.equal(result2, null);\n};\n\nexports[\"Literal: Match.\"] = () => {\n  const variable = new Literal(\"variable\", \"var\");\n  const cursor = new Cursor(\"var foo = 'Hello World';\");\n  const node = variable.parse(cursor);\n\n  assert.equal(node.name, \"variable\");\n  assert.equal(node.value, \"var\");\n  assert.equal(cursor.getIndex(), 2);\n  assert.equal(cursor.getChar(), \"r\");\n};\n\nexports[\"Literal: Match at end.\"] = () => {\n  const variable = new Literal(\"variable\", \"var\");\n  const cursor = new Cursor(\"var\");\n  const node = variable.parse(cursor);\n\n  assert.equal(node.name, \"variable\");\n  assert.equal(node.value, \"var\");\n  assert.equal(cursor.getIndex(), 2);\n  assert.equal(cursor.getChar(), \"r\");\n  assert.equal(cursor.isAtEnd(), true);\n};\n\nexports[\"Literal: No match.\"] = () => {\n  const variable = new Literal(\"variable\", \"var\");\n  const cursor = new Cursor(\"vax\");\n\n  variable.parse(cursor);\n\n  assert.equal(cursor.hasUnresolvedError(), true);\n  assert.equal(cursor.getIndex(), 0);\n  assert.equal(cursor.getChar(), \"v\");\n};\n\nexports[\"Literal: Bad cursor.\"] = () => {\n  const variable = new Literal(\"variable\", \"var\");\n\n  assert.throws(() => {\n    variable.parse();\n  });\n};\n\nexports[\"Literal: Pattern methods.\"] = () => {\n  const variable = new Literal(\"variable\", \"var\");\n  const clone = variable.clone();\n\n  assert.equal(variable.name, clone.name);\n  assert.equal(variable.children.length, clone.children.length);\n};\n"],"file":"Literal.js"}