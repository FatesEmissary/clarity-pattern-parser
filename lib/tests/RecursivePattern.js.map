{"version":3,"sources":["../../src/tests/RecursivePattern.js"],"names":["exports","openBracket","Literal","closeBracket","colon","space","spaces","RepeatValue","optionalSpaces","OptionalValue","nullLiteral","comma","divider","AndValue","value","OrComposite","number","string","boolean","RecursivePattern","keyValue","AndComposite","keyValues","RepeatComposite","optionalKeyValues","OptionalComposite","jsonPattern","json","JSON","stringify","null","cursor","Cursor","node","parse"],"mappings":";;AAAA;;AACA;;AACA;;AAWA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,wBAAD,CAAP,GAAoC,YAAM;AACxC,MAAMC,WAAW,GAAG,IAAIC,cAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAApB;AACA,MAAMC,YAAY,GAAG,IAAID,cAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAArB;AACA,MAAME,KAAK,GAAG,IAAIF,cAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAd;AACA,MAAMG,KAAK,GAAG,IAAIH,cAAJ,CAAY,OAAZ,EAAqB,GAArB,CAAd;AACA,MAAMI,MAAM,GAAG,IAAIC,kBAAJ,CAAgB,QAAhB,EAA0BF,KAA1B,CAAf;AACA,MAAMG,cAAc,GAAG,IAAIC,oBAAJ,CAAkBH,MAAlB,CAAvB;AACA,MAAMI,WAAW,GAAG,IAAIR,cAAJ,CAAY,MAAZ,EAAoB,MAApB,CAApB;AACA,MAAMS,KAAK,GAAG,IAAIT,cAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAd;AAEA,MAAMU,OAAO,GAAG,IAAIC,eAAJ,CAAa,SAAb,EAAwB,CACtCL,cADsC,EAEtCG,KAFsC,EAGtCH,cAHsC,CAAxB,CAAhB;AAMA,MAAMM,KAAK,GAAG,IAAIC,kBAAJ,CAAgB,OAAhB,EAAyB,CACrCC,eADqC,EAErCC,eAFqC,EAGrCC,gBAHqC,EAIrCR,WAJqC,EAKrC,IAAIS,yBAAJ,CAAqB,MAArB,CALqC,CAAzB,CAAd;AAQA,MAAMC,QAAQ,GAAG,IAAIC,mBAAJ,CAAiB,WAAjB,EAA8B,CAC7CJ,eAD6C,EAE7CT,cAF6C,EAG7CJ,KAH6C,EAI7CI,cAJ6C,EAK7CM,KAL6C,CAA9B,CAAjB;AAQA,MAAMQ,SAAS,GAAG,IAAIC,sBAAJ,CAAoB,YAApB,EAAkCH,QAAlC,EAA4CR,OAA5C,CAAlB;AACA,MAAMY,iBAAiB,GAAG,IAAIC,wBAAJ,CAAsBH,SAAtB,CAA1B;AAEA,MAAMI,WAAW,GAAG,IAAIL,mBAAJ,CAAiB,MAAjB,EAAyB,CAC3CpB,WAD2C,EAE3CO,cAF2C,EAG3CgB,iBAH2C,EAI3ChB,cAJ2C,EAK3CL,YAL2C,CAAzB,CAApB;AAQA,MAAMwB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BZ,IAAAA,MAAM,EAAE,mBADkB;AAE1BD,IAAAA,MAAM,EAAE,CAFkB;AAG1BE,IAAAA,OAAO,EAAE,IAHiB;AAI1BY,IAAAA,IAAI,EAAE,IAJoB;AAK1BH,IAAAA,IAAI,EAAE;AACJV,MAAAA,MAAM,EAAE;AADJ;AALoB,GAAf,CAAb;AAUA,MAAMc,MAAM,GAAG,IAAIC,aAAJ,CAAWL,IAAX,CAAf;AACA,MAAMM,IAAI,GAAGP,WAAW,CAACQ,KAAZ,CAAkBH,MAAlB,CAAb;AACD,CAvDD","sourcesContent":["import RecursivePattern from \"../patterns/RecursivePattern.js\";\nimport assert from \"assert\";\nimport {\n  Literal,\n  AndComposite,\n  RepeatValue,\n  OptionalValue,\n  RepeatComposite,\n  OptionalComposite,\n  OrComposite,\n  Cursor,\n  AndValue\n} from \"../index.js\";\nimport string from \"./javascriptPatterns/string\";\nimport number from \"./javascriptPatterns/number\";\nimport boolean from \"./javascriptPatterns/boolean\";\n\nexports[\"RecursivePattern: JSON\"] = () => {\n  const openBracket = new Literal(\"{\", \"{\");\n  const closeBracket = new Literal(\"}\", \"}\");\n  const colon = new Literal(\":\", \":\");\n  const space = new Literal(\"space\", \" \");\n  const spaces = new RepeatValue(\"spaces\", space);\n  const optionalSpaces = new OptionalValue(spaces);\n  const nullLiteral = new Literal(\"null\", \"null\");\n  const comma = new Literal(\",\", \",\");\n\n  const divider = new AndValue(\"divider\", [\n    optionalSpaces,\n    comma,\n    optionalSpaces\n  ]);\n\n  const value = new OrComposite(\"value\", [\n    number,\n    string,\n    boolean,\n    nullLiteral,\n    new RecursivePattern(\"json\")\n  ]);\n\n  const keyValue = new AndComposite(\"key-value\", [\n    string,\n    optionalSpaces,\n    colon,\n    optionalSpaces,\n    value\n  ]);\n\n  const keyValues = new RepeatComposite(\"key-values\", keyValue, divider);\n  const optionalKeyValues = new OptionalComposite(keyValues);\n\n  const jsonPattern = new AndComposite(\"json\", [\n    openBracket,\n    optionalSpaces,\n    optionalKeyValues,\n    optionalSpaces,\n    closeBracket\n  ]);\n\n  const json = JSON.stringify({\n    string: \"This is a string.\",\n    number: 1,\n    boolean: true,\n    null: null,\n    json: {\n      string: \"This is a nested string.\"\n    }\n  });\n\n  const cursor = new Cursor(json);\n  const node = jsonPattern.parse(cursor);\n};\n"],"file":"RecursivePattern.js"}