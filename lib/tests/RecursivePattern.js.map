{"version":3,"sources":["../../src/tests/RecursivePattern.js"],"names":["openCurlyBracket","Literal","closeCurlyBracket","openSquareBracket","closeSquareBracket","colon","space","spaces","RepeatValue","optionalSpaces","OptionalValue","nullLiteral","comma","divider","AndValue","arrayValues","RepeatComposite","RecursivePattern","optionalArrayValues","OptionalComposite","arrayLiteral","AndComposite","keyValue","string","keyValues","optionalKeyValues","objectLiteral","literals","OrComposite","number","boolean","exports","json","JSON","stringify","null","array","prop1","cursor","Cursor","cursor2","foo","object","parse","assert","equal","name","toString","node","result","exec","clone","otherClone","tokens","getTokens","children","getNextTokens"],"mappings":"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","sourcesContent":["import RecursivePattern from \"../patterns/RecursivePattern.js\";\nimport assert from \"assert\";\nimport {\n  Literal,\n  AndComposite,\n  RepeatValue,\n  OptionalValue,\n  RepeatComposite,\n  OptionalComposite,\n  OrComposite,\n  Cursor,\n  AndValue,\n} from \"../index.js\";\nimport string from \"./javascriptPatterns/string.js\";\nimport number from \"./javascriptPatterns/number.js\";\nimport boolean from \"./javascriptPatterns/boolean.js\";\n\nconst openCurlyBracket = new Literal(\"open-curly-bracket\", \"{\");\nconst closeCurlyBracket = new Literal(\"close-curly-bracket\", \"}\");\nconst openSquareBracket = new Literal(\"open-square-bracket\", \"[\");\nconst closeSquareBracket = new Literal(\"close-square-bracket\", \"]\");\nconst colon = new Literal(\":\", \":\");\nconst space = new Literal(\"space\", \" \");\nconst spaces = new RepeatValue(\"spaces\", space);\nconst optionalSpaces = new OptionalValue(spaces);\nconst nullLiteral = new Literal(\"null\", \"null\");\nconst comma = new Literal(\",\", \",\");\n\nconst divider = new AndValue(\"divider\", [\n  optionalSpaces,\n  comma,\n  optionalSpaces,\n]);\n\nconst arrayValues = new RepeatComposite(\n  \"values\",\n  new RecursivePattern(\"literals\"),\n  divider\n);\nconst optionalArrayValues = new OptionalComposite(arrayValues);\n\nconst arrayLiteral = new AndComposite(\"array-literal\", [\n  openSquareBracket,\n  optionalSpaces,\n  optionalArrayValues,\n  optionalSpaces,\n  closeSquareBracket,\n]);\n\nconst keyValue = new AndComposite(\"key-value\", [\n  string,\n  optionalSpaces,\n  colon,\n  optionalSpaces,\n  new RecursivePattern(\"literals\"),\n]);\n\nconst keyValues = new RepeatComposite(\"key-values\", keyValue, divider);\nconst optionalKeyValues = new OptionalComposite(keyValues);\n\nconst objectLiteral = new AndComposite(\"object-literal\", [\n  openCurlyBracket,\n  optionalSpaces,\n  optionalKeyValues,\n  optionalSpaces,\n  closeCurlyBracket,\n]);\n\nconst literals = new OrComposite(\"literals\", [\n  number,\n  string,\n  boolean,\n  nullLiteral,\n  objectLiteral,\n  arrayLiteral,\n]);\n\nexports[\"RecursivePattern: JSON\"] = () => {\n  const json = JSON.stringify({\n    string: \"This is a string.\",\n    number: 1,\n    boolean: true,\n    json: {\n      string: \"This is a nested string.\",\n    },\n    null: null,\n    array: [1, \"Blah\", { prop1: true }],\n  });\n\n  const cursor = new Cursor(json);\n  const cursor2 = new Cursor(JSON.stringify([{ foo: \"bar\" }]));\n\n  const object = literals.parse(cursor);\n  const array = literals.parse(cursor2);\n\n  assert.equal(object.name, \"object-literal\");\n  assert.equal(array.name, \"array-literal\");\n  assert.equal(object.toString(), json);\n};\n\nexports[\"RecursivePattern: No pattern\"] = () => {\n  const node = new RecursivePattern(\"nothing\");\n  const result = node.exec(\"Some string.\");\n\n  assert.equal(result, null);\n};\n\nexports[\"RecursivePattern: clone.\"] = () => {\n  const node = new RecursivePattern(\"nothing\");\n  const clone = node.clone();\n\n  assert.equal(node.name, clone.name);\n\n  const otherClone = node.clone(\"nothing2\");\n\n  assert.equal(otherClone.name, \"nothing2\");\n};\n\nexports[\"RecursivePattern: getNextTokens.\"] = () => {\n  let tokens = literals.getTokens();\n\n  tokens = literals.children[0].getNextTokens();\n\n  tokens = literals.children[4].getTokens();\n  tokens = literals.children[4].children[1].getNextTokens();\n  tokens = literals.children[4].children[2].getNextTokens();\n\n  tokens = literals.children[4].children[2].children[0].children[0].children[0].children[0].getTokens();\n  tokens = literals.children[4].children[2].children[0].children[0].getNextTokens();\n\n  tokens = literals.children[4].children[3].getNextTokens();\n};\n"],"file":"RecursivePattern.js"}