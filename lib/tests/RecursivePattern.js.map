{"version":3,"sources":["../../src/tests/RecursivePattern.js"],"names":["exports","openCurlyBracket","Literal","closeCurlyBracket","openSquareBracket","closeSquareBracket","colon","space","spaces","RepeatValue","optionalSpaces","OptionalValue","nullLiteral","comma","divider","AndValue","arrayValues","RepeatComposite","RecursivePattern","optionalArrayValues","OptionalComposite","arrayLiteral","AndComposite","keyValue","string","keyValues","optionalKeyValues","objectLiteral","literals","OrComposite","number","boolean","json","JSON","stringify","null","array","prop1","cursor","Cursor","cursor2","foo","object","parse","assert","equal","name"],"mappings":"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","sourcesContent":["import RecursivePattern from \"../patterns/RecursivePattern.js\";\nimport assert from \"assert\";\nimport {\n  Literal,\n  AndComposite,\n  RepeatValue,\n  OptionalValue,\n  RepeatComposite,\n  OptionalComposite,\n  OrComposite,\n  Cursor,\n  AndValue\n} from \"../index.js\";\nimport string from \"./javascriptPatterns/string\";\nimport number from \"./javascriptPatterns/number\";\nimport boolean from \"./javascriptPatterns/boolean\";\n\nexports[\"RecursivePattern: JSON\"] = () => {\n  const openCurlyBracket = new Literal(\"open-curly-bracket\", \"{\");\n  const closeCurlyBracket = new Literal(\"close-curly-bracket\", \"}\");\n  const openSquareBracket = new Literal(\"open-square-bracket\", \"[\");\n  const closeSquareBracket = new Literal(\"close-square-bracket\", \"]\");\n  const colon = new Literal(\":\", \":\");\n  const space = new Literal(\"space\", \" \");\n  const spaces = new RepeatValue(\"spaces\", space);\n  const optionalSpaces = new OptionalValue(spaces);\n  const nullLiteral = new Literal(\"null\", \"null\");\n  const comma = new Literal(\",\", \",\");\n\n  const divider = new AndValue(\"divider\", [\n    optionalSpaces,\n    comma,\n    optionalSpaces\n  ]);\n\n  const arrayValues = new RepeatComposite(\n    \"values\",\n    new RecursivePattern(\"literals\"),\n    divider\n  );\n  const optionalArrayValues = new OptionalComposite(arrayValues);\n\n  const arrayLiteral = new AndComposite(\"array-literal\", [\n    openSquareBracket,\n    optionalSpaces,\n    optionalArrayValues,\n    optionalSpaces,\n    closeSquareBracket\n  ]);\n\n  const keyValue = new AndComposite(\"key-value\", [\n    string,\n    optionalSpaces,\n    colon,\n    optionalSpaces,\n    new RecursivePattern(\"literals\")\n  ]);\n\n  const keyValues = new RepeatComposite(\"key-values\", keyValue, divider);\n  const optionalKeyValues = new OptionalComposite(keyValues);\n\n  const objectLiteral = new AndComposite(\"object-literal\", [\n    openCurlyBracket,\n    optionalSpaces,\n    optionalKeyValues,\n    optionalSpaces,\n    closeCurlyBracket\n  ]);\n\n  const literals = new OrComposite(\"literals\", [\n    number,\n    string,\n    boolean,\n    nullLiteral,\n    objectLiteral,\n    arrayLiteral\n  ]);\n\n  const json = JSON.stringify({\n    string: \"This is a string.\",\n    number: 1,\n    boolean: true,\n    json: {\n      string: \"This is a nested string.\"\n    },\n    null: null,\n    array: [1, \"Blah\", { prop1: true }]\n  });\n\n  const cursor = new Cursor(json);\n  const cursor2 = new Cursor(JSON.stringify([{ foo: \"bar\" }]));\n\n  const object = literals.parse(cursor);\n  const array = literals.parse(cursor2);\n\n  assert.equal(object.name, \"object-literal\");\n  assert.equal(array.name, \"array-literal\");\n};\n"],"file":"RecursivePattern.js"}