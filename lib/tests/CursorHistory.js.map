{"version":3,"sources":["../../src/tests/CursorHistory.js"],"names":["exports","cursorHistory","CursorHistory","pattern","ValuePattern","node","ValueNode","addMatch","assert","equal","getFurthestMatch","astNode","startRecording","getLastMatch","error","Error","addError","getFurthestError","getLastError"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,yBAAD,CAAP,GAAqC,YAAM;AACzC,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AACA,MAAMC,OAAO,GAAG,IAAIC,mBAAJ,CAAiB,GAAjB,EAAsB,GAAtB,CAAhB;AACA,MAAMC,IAAI,GAAG,IAAIC,gBAAJ,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,CAA7B,EAAgC,CAAhC,CAAb;AAEAL,EAAAA,aAAa,CAACM,QAAd,CAAuBJ,OAAvB,EAAgCE,IAAhC;;AACAG,kBAAOC,KAAP,CAAaR,aAAa,CAACS,gBAAd,GAAiCP,OAA9C,EAAuDA,OAAvD;;AACAK,kBAAOC,KAAP,CAAaR,aAAa,CAACS,gBAAd,GAAiCC,OAA9C,EAAuDN,IAAvD;AACD,CARD;;AAUAL,OAAO,CAAC,wCAAD,CAAP,GAAoD,YAAM;AACxD,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AACA,MAAMC,OAAO,GAAG,IAAIC,mBAAJ,CAAiB,GAAjB,EAAsB,GAAtB,CAAhB;AACA,MAAMC,IAAI,GAAG,IAAIC,gBAAJ,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,CAA7B,EAAgC,CAAhC,CAAb;AAEAL,EAAAA,aAAa,CAACW,cAAd;AACAX,EAAAA,aAAa,CAACM,QAAd,CAAuBJ,OAAvB,EAAgCE,IAAhC;;AAEAG,kBAAOC,KAAP,CAAaR,aAAa,CAACS,gBAAd,GAAiCP,OAA9C,EAAuDA,OAAvD;;AACAK,kBAAOC,KAAP,CAAaR,aAAa,CAACS,gBAAd,GAAiCC,OAA9C,EAAuDN,IAAvD;;AACAG,kBAAOC,KAAP,CAAaR,aAAa,CAACY,YAAd,GAA6BV,OAA1C,EAAmDA,OAAnD;;AACAK,kBAAOC,KAAP,CAAaR,aAAa,CAACY,YAAd,GAA6BF,OAA1C,EAAmDN,IAAnD;AACD,CAZD;;AAcAL,OAAO,CAAC,yBAAD,CAAP,GAAqC,YAAM;AACzC,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AACA,MAAMY,KAAK,GAAG,IAAIC,KAAJ,CAAU,0BAAV,CAAd;AAEAd,EAAAA,aAAa,CAACe,QAAd,CAAuBF,KAAvB;;AAEAN,kBAAOC,KAAP,CAAaR,aAAa,CAACgB,gBAAd,EAAb,EAA+CH,KAA/C;AACD,CAPD;;AASAd,OAAO,CAAC,wCAAD,CAAP,GAAoD,YAAM;AACxD,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AACA,MAAMY,KAAK,GAAG,IAAIC,KAAJ,CAAU,0BAAV,CAAd;AAEAd,EAAAA,aAAa,CAACW,cAAd;AACAX,EAAAA,aAAa,CAACe,QAAd,CAAuBF,KAAvB;;AAEAN,kBAAOC,KAAP,CAAaR,aAAa,CAACgB,gBAAd,EAAb,EAA+CH,KAA/C;;AACAN,kBAAOC,KAAP,CAAaR,aAAa,CAACiB,YAAd,EAAb,EAA2CJ,KAA3C;AACD,CATD;;AAWAd,OAAO,CAAC,0CAAD,CAAP,GAAsD,YAAM;AAC1D,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AACA,MAAMY,KAAK,GAAG,IAAIC,KAAJ,CAAU,0BAAV,CAAd;;AAEAP,kBAAOC,KAAP,CAAaR,aAAa,CAACiB,YAAd,EAAb,EAA2C,IAA3C;AACD,CALD;;AAOAlB,OAAO,CAAC,qDAAD,CAAP,GAAiE,YAAM;AACrE,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;;AAEAM,kBAAOC,KAAP,CAAaR,aAAa,CAACY,YAAd,GAA6BV,OAA1C,EAAmD,IAAnD;;AACAK,kBAAOC,KAAP,CAAaR,aAAa,CAACY,YAAd,GAA6BF,OAA1C,EAAmD,IAAnD;;AACAH,kBAAOC,KAAP,CAAaR,aAAa,CAACS,gBAAd,GAAiCP,OAA9C,EAAuD,IAAvD;;AACAK,kBAAOC,KAAP,CAAaR,aAAa,CAACS,gBAAd,GAAiCC,OAA9C,EAAuD,IAAvD;AACD,CAPD;;AASAX,OAAO,CACL,qEADK,CAAP,GAEI,YAAM;AACR,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AACAD,EAAAA,aAAa,CAACW,cAAd;;AAEAJ,kBAAOC,KAAP,CAAaR,aAAa,CAACY,YAAd,GAA6BV,OAA1C,EAAmD,IAAnD;;AACAK,kBAAOC,KAAP,CAAaR,aAAa,CAACY,YAAd,GAA6BF,OAA1C,EAAmD,IAAnD;;AACAH,kBAAOC,KAAP,CAAaR,aAAa,CAACS,gBAAd,GAAiCP,OAA9C,EAAuD,IAAvD;;AACAK,kBAAOC,KAAP,CAAaR,aAAa,CAACS,gBAAd,GAAiCC,OAA9C,EAAuD,IAAvD;AACD,CAVD","sourcesContent":["import CursorHistory from \"../CursorHistory.js\";\nimport assert from \"assert\";\nimport { ValuePattern, ValueNode } from \"../index.js\";\n\nexports[\"CursorHistory: addMatch\"] = () => {\n  const cursorHistory = new CursorHistory();\n  const pattern = new ValuePattern(\"T\", \"T\");\n  const node = new ValueNode(\"T\", \"T\", \"T\", 0, 1);\n\n  cursorHistory.addMatch(pattern, node);\n  assert.equal(cursorHistory.getFurthestMatch().pattern, pattern);\n  assert.equal(cursorHistory.getFurthestMatch().astNode, node);\n};\n\nexports[\"CursorHistory: addMatch with Recording\"] = () => {\n  const cursorHistory = new CursorHistory();\n  const pattern = new ValuePattern(\"T\", \"T\");\n  const node = new ValueNode(\"T\", \"T\", \"T\", 0, 1);\n\n  cursorHistory.startRecording();\n  cursorHistory.addMatch(pattern, node);\n\n  assert.equal(cursorHistory.getFurthestMatch().pattern, pattern);\n  assert.equal(cursorHistory.getFurthestMatch().astNode, node);\n  assert.equal(cursorHistory.getLastMatch().pattern, pattern);\n  assert.equal(cursorHistory.getLastMatch().astNode, node);\n};\n\nexports[\"CursorHistory: addError\"] = () => {\n  const cursorHistory = new CursorHistory();\n  const error = new Error(\"Expected something else.\");\n\n  cursorHistory.addError(error);\n\n  assert.equal(cursorHistory.getFurthestError(), error);\n};\n\nexports[\"CursorHistory: addError with recording\"] = () => {\n  const cursorHistory = new CursorHistory();\n  const error = new Error(\"Expected something else.\");\n\n  cursorHistory.startRecording();\n  cursorHistory.addError(error);\n\n  assert.equal(cursorHistory.getFurthestError(), error);\n  assert.equal(cursorHistory.getLastError(), error);\n};\n\nexports[\"CursorHistory: getLastError without any.\"] = () => {\n  const cursorHistory = new CursorHistory();\n  const error = new Error(\"Expected something else.\");\n\n  assert.equal(cursorHistory.getLastError(), null);\n};\n\nexports[\"CursorHistory: getFurthestMatch without an matches.\"] = () => {\n  const cursorHistory = new CursorHistory();\n\n  assert.equal(cursorHistory.getLastMatch().pattern, null);\n  assert.equal(cursorHistory.getLastMatch().astNode, null);\n  assert.equal(cursorHistory.getFurthestMatch().pattern, null);\n  assert.equal(cursorHistory.getFurthestMatch().astNode, null);\n};\n\nexports[\n  \"CursorHistory: getFurthestMatch without an matches while recording.\"\n] = () => {\n  const cursorHistory = new CursorHistory();\n  cursorHistory.startRecording();\n\n  assert.equal(cursorHistory.getLastMatch().pattern, null);\n  assert.equal(cursorHistory.getLastMatch().astNode, null);\n  assert.equal(cursorHistory.getFurthestMatch().pattern, null);\n  assert.equal(cursorHistory.getFurthestMatch().astNode, null);\n};\n"],"file":"CursorHistory.js"}