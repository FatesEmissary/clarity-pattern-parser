{"version":3,"sources":["../../src/ast/CompositeNode.js"],"names":["CompositeNode","type","name","startIndex","endIndex","children","node","map","child","clone","isMatch","context","childrenContext","slice","push","Object","freeze","matches","reduce","acc","concat","filter","match","toString","join","Node"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,a;;;;;AACnB,yBAAYC,IAAZ,EAAkBC,IAAlB,EAAsD;AAAA;;AAAA,QAA9BC,UAA8B,uEAAjB,CAAiB;AAAA,QAAdC,QAAc,uEAAH,CAAG;;AAAA;;AACpD,uFAAMH,IAAN,EAAYC,IAAZ,EAAkBC,UAAlB,EAA8BC,QAA9B;AACA,UAAKC,QAAL,GAAgB,EAAhB;AAFoD;AAGrD;;;;4BAEO;AACN,UAAMC,IAAI,GAAG,IAAIN,aAAJ,CACX,KAAKC,IADM,EAEX,KAAKC,IAFM,EAGX,KAAKC,UAHM,EAIX,KAAKC,QAJM,CAAb;AAMAE,MAAAA,IAAI,CAACD,QAAL,GAAgB,KAAKA,QAAL,CAAcE,GAAd,CAAkB,UAAAC,KAAK,EAAI;AACzC,eAAOA,KAAK,CAACC,KAAN,EAAP;AACD,OAFe,CAAhB;AAIA,aAAOH,IAAP;AACD;;;2BAEMI,O,EAAuB;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AAC5B,UAAMC,eAAe,GAAGD,OAAO,CAACE,KAAR,EAAxB;AACAD,MAAAA,eAAe,CAACE,IAAhB,CAAqB,IAArB;AAEAC,MAAAA,MAAM,CAACC,MAAP,CAAcJ,eAAd;AAEA,UAAMK,OAAO,GAAG,KAAKZ,QAAL,CAAca,MAAd,CAAqB,UAACC,GAAD,EAAMX,KAAN,EAAgB;AACnD,eAAOW,GAAG,CAACC,MAAJ,CAAWZ,KAAK,CAACa,MAAN,CAAaX,OAAb,EAAsBE,eAAtB,CAAX,CAAP;AACD,OAFe,EAEb,EAFa,CAAhB;AAIA,UAAMU,KAAK,GAAGZ,OAAO,CAAC,IAAD,EAAOC,OAAP,CAArB;;AAEA,UAAIW,KAAJ,EAAW;AACTL,QAAAA,OAAO,CAACH,IAAR,CAAa,IAAb;AACD;;AAED,aAAOG,OAAP;AACD;;;+BAEU;AACT,aAAO,KAAKZ,QAAL,CAAcE,GAAd,CAAkB,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACe,QAAN,EAAJ;AAAA,OAAvB,EAA6CC,IAA7C,CAAkD,EAAlD,CAAP;AACD;;;;EAzCwCC,c","sourcesContent":["import Node from \"./Node.js\";\n\nexport default class CompositeNode extends Node {\n  constructor(type, name, startIndex = 0, endIndex = 0) {\n    super(type, name, startIndex, endIndex);\n    this.children = [];\n  }\n\n  clone() {\n    const node = new CompositeNode(\n      this.type,\n      this.name,\n      this.startIndex,\n      this.endIndex\n    );\n    node.children = this.children.map(child => {\n      return child.clone();\n    });\n\n    return node;\n  }\n\n  filter(isMatch, context = []) {\n    const childrenContext = context.slice();\n    childrenContext.push(this);\n\n    Object.freeze(childrenContext);\n\n    const matches = this.children.reduce((acc, child) => {\n      return acc.concat(child.filter(isMatch, childrenContext));\n    }, []);\n\n    const match = isMatch(this, context);\n\n    if (match) {\n      matches.push(this);\n    }\n\n    return matches;\n  }\n\n  toString() {\n    return this.children.map(child => child.toString()).join(\"\");\n  }\n}\n"],"file":"CompositeNode.js"}