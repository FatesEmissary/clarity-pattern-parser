{"version":3,"sources":["../src/Cursor.js"],"names":["Cursor","string","assertValidity","index","length","history","CursorHistory","isInErrorState","isNullOrEmpty","Error","startRecording","stopRecording","parseError","addError","pattern","astNode","addMatch","value","hasNext","hasPrevious","mark","charAt","lastIndex","hasUnresolvedError","isAtEnd","getFurthestError","getFurthestMatch"],"mappings":"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","sourcesContent":["import CursorHistory from \"./CursorHistory.js\";\n\nexport default class Cursor {\n  constructor(string) {\n    this.string = string;\n    this.assertValidity();\n\n\n    this.index = 0;\n    this.length = string.length;\n    this.history = new CursorHistory();\n    this.isInErrorState = false;\n  }\n\n  assertValidity() {\n    if (this.isNullOrEmpty(this.string)) {\n      throw new Error(\n        \"Illegal Argument: Cursor needs to have a string that has a length greater than 0.\"\n      );\n    }\n  }\n\n  startRecording(){\n    this.history.startRecording();\n  }\n\n  stopRecording(){\n    this.history.stopRecording();\n  }\n\n  get parseError (){\n    return this.history.getFurthestError();\n  }\n\n  get lastMatch(){\n    return this.history.getFurthestMatch();\n  }\n\n  throwError(parseError) {\n    this.isInErrorState = true;\n    this.history.addError(parseError);\n  }\n\n  addMatch(pattern, astNode){\n    this.history.addMatch(pattern, astNode);\n  }\n\n  resolveError() {\n    this.isInErrorState = false;\n  }\n\n  hasUnresolvedError() {\n    return this.isInErrorState;\n  }\n\n  isNullOrEmpty(value) {\n    return value == null || (typeof value === \"string\" && value.length === 0);\n  }\n\n  hasNext() {\n    return this.index + 1 < this.string.length;\n  }\n\n  hasPrevious() {\n    return this.index - 1 >= 0;\n  }\n\n  next() {\n    if (this.hasNext()) {\n      this.index++;\n    } else {\n      throw new Error(\"Cursor: Out of Bounds Exception.\");\n    }\n  }\n\n  previous() {\n    if (this.hasPrevious()) {\n      this.index--;\n    } else {\n      throw new Error(\"Cursor: Out of Bounds Exception.\");\n    }\n  }\n\n  mark() {\n    return this.index;\n  }\n\n  moveToMark(mark) {\n    this.index = mark;\n  }\n\n  moveToBeginning() {\n    this.index = 0;\n  }\n\n  moveToEnd() {\n    this.index = this.string.length - 1;\n  }\n\n  getChar() {\n    return this.string.charAt(this.index);\n  }\n\n  getIndex() {\n    return this.index;\n  }\n\n  setIndex(index) {\n    if (typeof index === \"number\") {\n      if (index < 0 || index > this.lastIndex()) {\n        throw new Error(\"Cursor: Out of Bounds Exception.\");\n      }\n\n      this.index = index;\n    }\n  }\n\n  isAtBeginning() {\n    return this.index === 0;\n  }\n\n  isAtEnd() {\n    return this.index === this.string.length - 1;\n  }\n\n  lastIndex() {\n    return this.length - 1;\n  }\n\n  didSuccessfullyParse(){\n    return !this.hasUnresolvedError() && this.isAtEnd();\n  }\n}\n"],"file":"Cursor.js"}