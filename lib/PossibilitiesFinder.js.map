{"version":3,"sources":["../src/PossibilitiesFinder.js"],"names":["typeToMethodName","literal","recursive","PossibilitiesFinder","pattern","string","cursor","astResult","lastSuccessfulAst","lastSuccessfulPattern","options","Cursor","parse","lastSuccessfulPatternMatch","buildPossibilities","type","method","Error"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG;AACvB,eAAa,2BADU;AAEvB,kBAAgB,8BAFO;AAGvBC,EAAAA,OAAO,EAAE,2BAHc;AAIvB,eAAa,4BAJU;AAKvB,oBAAkB,iCALK;AAMvB,cAAY,2BANW;AAOvB,iBAAe,8BAPQ;AAQvB,kBAAgB,+BARO;AASvB,mBAAiB,mBATM;AAUvB,kBAAgB,kBAVO;AAWvB,sBAAoB,sBAXG;AAYvBC,EAAAA,SAAS,EAAE;AAZY,CAAzB;;IAeqBC,mB;;;AACnB,iCAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,qBAAL,GAA6B,IAA7B;AACA,SAAKC,OAAL,GAAe,EAAf;AACD;;;;sCAEiBL,M,EAAQD,O,EAAS;AACjC,WAAKE,MAAL,GAAc,IAAIK,eAAJ,CAAWN,MAAX,CAAd;AACA,WAAKE,SAAL,GAAiBH,OAAO,CAACQ,KAAR,CAAcN,MAAd,CAAjB;AACA,WAAKE,iBAAL,GAAyB,KAAKF,MAAL,CAAYE,iBAArC;AACA,WAAKC,qBAAL,GAA6B,KAAKH,MAAL,CAAYO,0BAAzC;AACA,WAAKH,OAAL,GAAe,EAAf;AAEA,WAAKI,kBAAL;AACD;;;mCAEcC,I,EAAM;AACnB,UAAMC,MAAM,GAAG,KAAKhB,gBAAgB,CAACe,IAAD,CAArB,CAAf;;AAEA,UAAI,OAAOC,MAAP,KAAkB,UAAtB,EAAkC;AAChC,cAAM,IAAIC,KAAJ,uCAAyCF,IAAzC,QAAN;AACD;;AAED,aAAOC,MAAP;AACD;;;yCAEoB,CAAE","sourcesContent":["import Cursor from \"./Cursor.js\";\nimport Possibilities from \"./Possibilities\";\n\nconst typeToMethodName = {\n  \"and-value\": \"buildAndValuePossibilites\",\n  \"any-of-these\": \"buildAnyOfThesePossibilities\",\n  literal: \"buildLiteralPossibilities\",\n  \"not-value\": \"buildNotValuePossibilities\",\n  \"optional-value\": \"buildOptionalValuePossibilities\",\n  \"or-value\": \"buildOrValuePossibilities\",\n  \"regex-value\": \"buildRegexValuePossibilities\",\n  \"repeat-value\": \"buildRepeatValuePossibilities\",\n  \"and-composite\": \"buildAndComposite\",\n  \"or-composite\": \"buildOrComposite\",\n  \"repeat-composite\": \"buildRepeatComposite\",\n  recursive: \"buildRecursive\"\n};\n\nexport default class PossibilitiesFinder {\n  constructor() {\n    this.pattern = null;\n    this.string = null;\n    this.cursor = null;\n    this.astResult = null;\n    this.lastSuccessfulAst = null;\n    this.lastSuccessfulPattern = null;\n    this.options = [];\n  }\n\n  findPossibilities(string, pattern) {\n    this.cursor = new Cursor(string);\n    this.astResult = pattern.parse(cursor);\n    this.lastSuccessfulAst = this.cursor.lastSuccessfulAst;\n    this.lastSuccessfulPattern = this.cursor.lastSuccessfulPatternMatch;\n    this.options = [];\n\n    this.buildPossibilities();\n  }\n\n  getBuildMethod(type) {\n    const method = this[typeToMethodName[type]];\n\n    if (typeof method !== \"function\") {\n      throw new Error(`Couldn't find builder type '${type}'.`);\n    }\n\n    return method;\n  }\n\n  buildPossibilities() {}\n}\n"],"file":"PossibilitiesFinder.js"}