import { Node } from "../ast/Node";
import { Pattern } from "./Pattern";
import { Cursor } from "./Cursor";
export declare class Regex implements Pattern {
    private _type;
    private _name;
    private _isOptional;
    private _parent;
    private _originalRegexString;
    private _regex;
    private _node;
    private _cursor;
    private _firstIndex;
    private _substring;
    private _tokens;
    get type(): string;
    get name(): string;
    get parent(): Pattern | null;
    set parent(pattern: Pattern | null);
    get children(): Pattern[];
    get isOptional(): boolean;
    constructor(name: string, regex: string, isOptional?: boolean);
    private assertArguments;
    test(text: string): boolean;
    exec(text: string): {
        ast: Node | null;
        cursor: Cursor;
    };
    parse(cursor: Cursor): Node | null;
    private resetState;
    private tryToParse;
    private processResult;
    private processError;
    clone(name?: string, isOptional?: boolean): Regex;
    getTokens(): string[];
    getTokensAfter(_childReference: Pattern): string[];
    getNextTokens(): string[];
    getPatterns(): Pattern[];
    getPatternsAfter(_childReference: Pattern): Pattern[];
    getNextPatterns(): Pattern[];
    find(_predicate: (p: Pattern) => boolean): Pattern | null;
    setTokens(tokens: string[]): void;
}
