import Node from "./Node";
export default class NodeVisitor {
    root: Node | null;
    selectedNodes: Node[];
    constructor(root: Node | null, selectedNodes?: Node[]);
    flatten(): this;
    remove(): this;
    private recursiveRemove;
    wrap(callback: (node: Node) => Node): this;
    unwrap(): this;
    prepend(callback: (node: Node) => Node): this;
    append(callback: (node: Node) => Node): this;
    transform(callback: (node: Node) => Node): this;
    private recursiveTransform;
    walkUp(node: Node, callback: (node: Node, ancestors: Node[]) => void, ancestors?: Node[]): this;
    walkDown(node: Node, callback: (node: Node, ancestors: Node[]) => void, ancestors?: Node[]): this;
    selectAll(): NodeVisitor;
    selectNode(node: Node): NodeVisitor;
    deselectNode(node: Node): NodeVisitor;
    select(callback: (node: Node) => boolean): NodeVisitor;
    forEach(callback: (node: Node) => void): this;
    filter(callback: (node: Node) => boolean): NodeVisitor;
    map(callback: (node: Node) => Node): NodeVisitor;
    selectRoot(): NodeVisitor;
    first(): NodeVisitor;
    last(): NodeVisitor;
    get(index: number): NodeVisitor;
    clear(): this;
    setRoot(root: Node | null): void;
    static select(root: Node, callback?: (node: Node) => boolean): NodeVisitor;
}
